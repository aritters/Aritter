¢7
UC:\Projects\anderson.souza\Ritter\tests\Infra.Data.Seedwork.Tests\Extensions\DbSet.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Data 
. 
Tests !
.! "

Extensions" ,
{ 
public		 

static		 
class		 
DbSetExtensions		 '
{

 
public 
static 
void 
SetupAsQueryable +
<+ ,
T, -
>- .
(. /
this/ 3
Mock4 8
<8 9
DbSet9 >
<> ?
T? @
>@ A
>A B
mockSetC J
,J K
IListL Q
<Q R
TR S
>S T
sourceU [
)[ \
where] b
Tc d
:e f
classg l
{ 	
var 
data 
= 
source 
. 
AsQueryable )
() *
)* +
;+ ,
mockSet 
. 
As 
< 

IQueryable !
<! "
T" #
># $
>$ %
(% &
)& '
.' (
Setup( -
(- .
m. /
=>0 2
m3 4
.4 5
Provider5 =
)= >
.> ?
Returns? F
(F G
dataG K
.K L
ProviderL T
)T U
;U V
mockSet 
. 
As 
< 

IQueryable !
<! "
T" #
># $
>$ %
(% &
)& '
.' (
Setup( -
(- .
m. /
=>0 2
m3 4
.4 5

Expression5 ?
)? @
.@ A
ReturnsA H
(H I
dataI M
.M N

ExpressionN X
)X Y
;Y Z
mockSet 
. 
As 
< 

IQueryable !
<! "
T" #
># $
>$ %
(% &
)& '
.' (
Setup( -
(- .
m. /
=>0 2
m3 4
.4 5
ElementType5 @
)@ A
.A B
ReturnsB I
(I J
dataJ N
.N O
ElementTypeO Z
)Z [
;[ \
mockSet 
. 
As 
< 

IQueryable !
<! "
T" #
># $
>$ %
(% &
)& '
.' (
Setup( -
(- .
m. /
=>0 2
m3 4
.4 5
GetEnumerator5 B
(B C
)C D
)D E
.E F
ReturnsF M
(M N
dataN R
.R S
GetEnumeratorS `
(` a
)a b
)b c
;c d
mockSet 
. 
Setup 
( 
d 
=> 
d  
.  !
Add! $
($ %
It% '
.' (
IsAny( -
<- .
T. /
>/ 0
(0 1
)1 2
)2 3
)3 4
.4 5
Callback5 =
<= >
T> ?
>? @
(@ A
(A B
sB C
)C D
=>E G
sourceH N
.N O
AddO R
(R S
sS T
)T U
)U V
;V W
} 	
public 
static 
void !
SetupAsQueryableAsync 0
<0 1
T1 2
>2 3
(3 4
this4 8
Mock9 =
<= >
DbSet> C
<C D
TD E
>E F
>F G
mockSetH O
,O P
IListQ V
<V W
TW X
>X Y
sourceZ `
)` a
whereb g
Th i
:j k
classl q
{ 	
var 
data 
= 
source 
. 
AsQueryable )
() *
)* +
;+ ,
mockSet 
. 
As 
< 
IAsyncEnumerable '
<' (
T( )
>) *
>* +
(+ ,
), -
.- .
Setup. 3
(3 4
m4 5
=>6 8
m9 :
.: ;
GetEnumerator; H
(H I
)I J
)J K
.K L
ReturnsL S
(S T
newT W
TestAsyncEnumeratorX k
<k l
Tl m
>m n
(n o
datao s
.s t
GetEnumerator	t Å
(
Å Ç
)
Ç É
)
É Ñ
)
Ñ Ö
;
Ö Ü
mockSet 
. 
As 
< 

IQueryable !
<! "
T" #
># $
>$ %
(% &
)& '
.' (
Setup( -
(- .
m. /
=>0 2
m3 4
.4 5
Provider5 =
)= >
.> ?
Returns? F
(F G
newG J"
TestAsyncQueryProviderK a
<a b
Tb c
>c d
(d e
datae i
.i j
Providerj r
)r s
)s t
;t u
mockSet 
. 
As 
< 

IQueryable !
<! "
T" #
># $
>$ %
(% &
)& '
.' (
Setup( -
(- .
m. /
=>0 2
m3 4
.4 5

Expression5 ?
)? @
.@ A
ReturnsA H
(H I
dataI M
.M N

ExpressionN X
)X Y
;Y Z
mockSet 
. 
As 
< 

IQueryable !
<! "
T" #
># $
>$ %
(% &
)& '
.' (
Setup( -
(- .
m. /
=>0 2
m3 4
.4 5
ElementType5 @
)@ A
.A B
ReturnsB I
(I J
dataJ N
.N O
ElementTypeO Z
)Z [
;[ \
mockSet 
. 
As 
< 

IQueryable !
<! "
T" #
># $
>$ %
(% &
)& '
.' (
Setup( -
(- .
m. /
=>0 2
m3 4
.4 5
GetEnumerator5 B
(B C
)C D
)D E
.E F
ReturnsF M
(M N
(N O
)O P
=>Q S
dataT X
.X Y
GetEnumeratorY f
(f g
)g h
)h i
;i j
}   	
}!! 
}"" Ò
`C:\Projects\anderson.souza\Ritter\tests\Infra.Data.Seedwork.Tests\Mocks\GenericTestRepository.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Data 
. 
Tests !
.! "
Mocks" '
{ 
internal 
class !
GenericTestRepository (
:) *

Repository+ 5
<5 6
Test6 :
>: ;
{ 
public !
GenericTestRepository $
($ % 
IQueryableUnitOfWork% 9

unitOfWork: D
)D E
: 
base 
( 

unitOfWork 
) 
{		 	
}

 	
} 
} œ
OC:\Projects\anderson.souza\Ritter\tests\Infra.Data.Seedwork.Tests\Mocks\Test.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Data 
. 
Tests !
.! "
Mocks" '
{ 
public 

class 
Test 
: 
Entity 
{ 
public 
bool 
Active 
{ 
get  
;  !
set" %
;% &
}' (
public

 
Test

 
(

 
int

 
id

 
)

 
: 
this 
( 
id 
, 
true 
) 
{ 	
} 	
public 
Test 
( 
int 
id 
, 
bool  
active! '
)' (
: 
this 
( 
) 
{ 	
Id 
= 
id 
; 
Active 
= 
active 
; 
} 	
public 
Test 
( 
) 
: 
base 
( 
) 
{ 	
} 	
public 
void 

Deactivate 
( 
)  
{ 	
Active 
= 
false 
; 
} 	
public   
void   
SetId   
(   
int   
id    
)    !
{!! 	
Id"" 
="" 
id"" 
;"" 
}## 	
}$$ 
}%% ∂
^C:\Projects\anderson.souza\Ritter\tests\Infra.Data.Seedwork.Tests\Mocks\TestAsyncEnumerable.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Data 
. 
Tests !
.! "
Mocks" '
{ 
internal 
class 
TestAsyncEnumerable &
<& '
T' (
>( )
:* +
EnumerableQuery, ;
<; <
T< =
>= >
,> ?
IAsyncEnumerable@ P
<P Q
TQ R
>R S
,S T

IQueryableU _
<_ `
T` a
>a b
{ 
public		 
TestAsyncEnumerable		 "
(		" #
IEnumerable		# .
<		. /
T		/ 0
>		0 1

enumerable		2 <
)		< =
:

 
base

 
(

 

enumerable

 
)

 
{ 	
}
 
public 
TestAsyncEnumerable "
(" #

Expression# -

expression. 8
)8 9
: 
base 
( 

expression 
) 
{ 	
}
 
public 
IAsyncEnumerator 
<  
T  !
>! "
GetEnumerator# 0
(0 1
)1 2
{ 	
return 
new 
TestAsyncEnumerator *
<* +
T+ ,
>, -
(- .
this. 2
.2 3
AsEnumerable3 ?
(? @
)@ A
.A B
GetEnumeratorB O
(O P
)P Q
)Q R
;R S
} 	
IQueryProvider 

IQueryable !
.! "
Provider" *
{ 	
get 
{ 
return 
new "
TestAsyncQueryProvider 3
<3 4
T4 5
>5 6
(6 7
this7 ;
); <
;< =
}> ?
} 	
} 
} Ó
^C:\Projects\anderson.souza\Ritter\tests\Infra.Data.Seedwork.Tests\Mocks\TestAsyncEnumerator.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Data 
. 
Tests !
.! "
Mocks" '
{ 
internal 
class 
TestAsyncEnumerator &
<& '
T' (
>( )
:* +
IAsyncEnumerator, <
<< =
T= >
>> ?
{ 
private		 
readonly		 
IEnumerator		 $
<		$ %
T		% &
>		& '

enumerator		( 2
;		2 3
public 
TestAsyncEnumerator "
(" #
IEnumerator# .
<. /
T/ 0
>0 1

enumerator2 <
)< =
{ 	
this 
. 

enumerator 
= 

enumerator (
;( )
} 	
public 
void 
Dispose 
( 
) 
{ 	

enumerator 
. 
Dispose 
( 
)  
;  !
} 	
public 
T 
Current 
{ 	
get 
{ 
return 

enumerator !
.! "
Current" )
;) *
} 
} 	
public 
Task 
< 
bool 
> 
MoveNext "
(" #
CancellationToken# 4
cancellationToken5 F
)F G
{ 	
return 
Task 
. 

FromResult "
(" #

enumerator# -
.- .
MoveNext. 6
(6 7
)7 8
)8 9
;9 :
}   	
}!! 
}"" Ò
aC:\Projects\anderson.souza\Ritter\tests\Infra.Data.Seedwork.Tests\Mocks\TestAsyncQueryProvider.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Data 
. 
Tests !
.! "
Mocks" '
{		 
internal

 
class

 "
TestAsyncQueryProvider

 )
<

) *
TEntity

* 1
>

1 2
:

3 4
IAsyncQueryProvider

5 H
{ 
private 
readonly 
IQueryProvider '
queryProvider( 5
;5 6
internal "
TestAsyncQueryProvider '
(' (
IQueryProvider( 6
queryProvider7 D
)D E
{ 	
this 
. 
queryProvider 
=  
queryProvider! .
;. /
} 	
public 

IQueryable 
CreateQuery %
(% &

Expression& 0

expression1 ;
); <
{ 	
return 
new 
TestAsyncEnumerable *
<* +
TEntity+ 2
>2 3
(3 4

expression4 >
)> ?
;? @
} 	
public 

IQueryable 
< 
TElement "
>" #
CreateQuery$ /
</ 0
TElement0 8
>8 9
(9 :

Expression: D

expressionE O
)O P
{ 	
return 
new 
TestAsyncEnumerable *
<* +
TElement+ 3
>3 4
(4 5

expression5 ?
)? @
;@ A
} 	
public 
object 
Execute 
( 

Expression (

expression) 3
)3 4
{ 	
return 
queryProvider  
.  !
Execute! (
(( )

expression) 3
)3 4
;4 5
}   	
public"" 
TResult"" 
Execute"" 
<"" 
TResult"" &
>""& '
(""' (

Expression""( 2

expression""3 =
)""= >
{## 	
return$$ 
queryProvider$$  
.$$  !
Execute$$! (
<$$( )
TResult$$) 0
>$$0 1
($$1 2

expression$$2 <
)$$< =
;$$= >
}%% 	
public'' 
IAsyncEnumerable'' 
<''  
TResult''  '
>''' (
ExecuteAsync'') 5
<''5 6
TResult''6 =
>''= >
(''> ?

Expression''? I

expression''J T
)''T U
{(( 	
return)) 
new)) 
TestAsyncEnumerable)) *
<))* +
TResult))+ 2
>))2 3
())3 4

expression))4 >
)))> ?
;))? @
}** 	
public,, 
Task,, 
<,, 
TResult,, 
>,, 
ExecuteAsync,, )
<,,) *
TResult,,* 1
>,,1 2
(,,2 3

Expression,,3 =

expression,,> H
,,,H I
CancellationToken,,J [
cancellationToken,,\ m
),,m n
{-- 	
return.. 
Task.. 
... 

FromResult.. "
(.." #
Execute..# *
<..* +
TResult..+ 2
>..2 3
(..3 4

expression..4 >
)..> ?
)..? @
;..@ A
}// 	
}00 
}11 £
YC:\Projects\anderson.souza\Ritter\tests\Infra.Data.Seedwork.Tests\Mocks\TestRepository.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Data 
. 
Tests !
.! "
Mocks" '
{ 
internal 
class 
TestRepository !
:" #

Repository$ .
{ 
public 
TestRepository 
( 
IUnitOfWork )

unitOfWork* 4
)4 5
:		 
base		 
(		 

unitOfWork		 
)		 
{

 	
} 	
} 
} Ï¶
`C:\Projects\anderson.souza\Ritter\tests\Infra.Data.Seedwork.Tests\Repositories\Repository_Add.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Data 
. 
Tests !
.! "
Repositories" .
{ 
public 

class 
Repository_Add 
{ 
[ 	
Fact	 
] 
public 
void 5
)CallSaveChangesSuccessfullyGivenOneEntity =
(= >
)> ?
{ 	
List 
< 
Test 
> 
mockedTests "
=# $
new% (
List) -
<- .
Test. 2
>2 3
(3 4
)4 5
;5 6
Mock 
< 
DbSet 
< 
Test 
> 
> 
	mockDbSet '
=( )
new* -
Mock. 2
<2 3
DbSet3 8
<8 9
Test9 =
>= >
>> ?
(? @
)@ A
;A B
	mockDbSet 
. 
SetupAsQueryable &
(& '
mockedTests' 2
)2 3
;3 4
Mock 
<  
IQueryableUnitOfWork %
>% &
mockUnitOfWork' 5
=6 7
new8 ;
Mock< @
<@ A 
IQueryableUnitOfWorkA U
>U V
(V W
)W X
;X Y
mockUnitOfWork 
. 
Setup  
(  !
p! "
=># %
p& '
.' (
Set( +
<+ ,
Test, 0
>0 1
(1 2
)2 3
)3 4
.4 5
Returns5 <
(< =
	mockDbSet= F
.F G
ObjectG M
)M N
;N O
mockUnitOfWork 
. 
Setup  
(  !
p! "
=># %
p& '
.' (
SaveChanges( 3
(3 4
)4 5
)5 6
;6 7
IRepository 
< 
Test 
> 
testRepository ,
=- .
new/ 2!
GenericTestRepository3 H
(H I
mockUnitOfWorkI W
.W X
ObjectX ^
)^ _
;_ `
Test 
test 
= 
new 
Test  
(  !
)! "
;" #
testRepository 
. 
Add 
( 
test #
)# $
;$ %
mockUnitOfWork   
.   
Verify   !
(  ! "
x  " #
=>  $ &
x  ' (
.  ( )
Set  ) ,
<  , -
Test  - 1
>  1 2
(  2 3
)  3 4
,  4 5
Times  6 ;
.  ; <
Once  < @
)  @ A
;  A B
mockUnitOfWork!! 
.!! 
Verify!! !
(!!! "
x!!" #
=>!!$ &
x!!' (
.!!( )
SaveChanges!!) 4
(!!4 5
)!!5 6
,!!6 7
Times!!8 =
.!!= >
Once!!> B
)!!B C
;!!C D
}"" 	
[$$ 	
Fact$$	 
]$$ 
public%% 
void%% :
.CallSaveChangesSuccessfullyGivenOneEntityAsync%% B
(%%B C
)%%C D
{&& 	
List'' 
<'' 
Test'' 
>'' 
mockedTests'' "
=''# $
new''% (
List'') -
<''- .
Test''. 2
>''2 3
(''3 4
)''4 5
;''5 6
Mock)) 
<)) 
DbSet)) 
<)) 
Test)) 
>)) 
>)) 
	mockDbSet)) '
=))( )
new))* -
Mock)). 2
<))2 3
DbSet))3 8
<))8 9
Test))9 =
>))= >
>))> ?
())? @
)))@ A
;))A B
	mockDbSet** 
.** !
SetupAsQueryableAsync** +
(**+ ,
mockedTests**, 7
)**7 8
;**8 9
Mock,, 
<,,  
IQueryableUnitOfWork,, %
>,,% &
mockUnitOfWork,,' 5
=,,6 7
new,,8 ;
Mock,,< @
<,,@ A 
IQueryableUnitOfWork,,A U
>,,U V
(,,V W
),,W X
;,,X Y
mockUnitOfWork-- 
.-- 
Setup--  
(--  !
p--! "
=>--# %
p--& '
.--' (
Set--( +
<--+ ,
Test--, 0
>--0 1
(--1 2
)--2 3
)--3 4
.--4 5
Returns--5 <
(--< =
	mockDbSet--= F
.--F G
Object--G M
)--M N
;--N O
mockUnitOfWork.. 
... 
Setup..  
(..  !
p..! "
=>..# %
p..& '
...' (
SaveChangesAsync..( 8
(..8 9
)..9 :
)..: ;
...; <
Returns..< C
(..C D
Task..D H
...H I

FromResult..I S
(..S T
It..T V
...V W
IsAny..W \
<..\ ]
int..] `
>..` a
(..a b
)..b c
)..c d
)..d e
;..e f
IRepository00 
<00 
Test00 
>00 
testRepository00 ,
=00- .
new00/ 2!
GenericTestRepository003 H
(00H I
mockUnitOfWork00I W
.00W X
Object00X ^
)00^ _
;00_ `
Test11 
test11 
=11 
new11 
Test11  
(11  !
)11! "
;11" #
testRepository22 
.22 
AddAsync22 #
(22# $
test22$ (
)22( )
.22) *

GetAwaiter22* 4
(224 5
)225 6
.226 7
	GetResult227 @
(22@ A
)22A B
;22B C
mockUnitOfWork44 
.44 
Verify44 !
(44! "
x44" #
=>44$ &
x44' (
.44( )
Set44) ,
<44, -
Test44- 1
>441 2
(442 3
)443 4
,444 5
Times446 ;
.44; <
Once44< @
)44@ A
;44A B
mockUnitOfWork55 
.55 
Verify55 !
(55! "
x55" #
=>55$ &
x55' (
.55( )
SaveChangesAsync55) 9
(559 :
)55: ;
,55; <
Times55= B
.55B C
Once55C G
)55G H
;55H I
}66 	
[88 	
Fact88	 
]88 
public99 
void99 6
*ThrowsArgumentNullExceptionGivenNullEntity99 >
(99> ?
)99? @
{:: 	
Mock;; 
<;;  
IQueryableUnitOfWork;; %
>;;% &
mockUnitOfWork;;' 5
=;;6 7
new;;8 ;
Mock;;< @
<;;@ A 
IQueryableUnitOfWork;;A U
>;;U V
(;;V W
);;W X
;;;X Y
Action== 
act== 
=== 
(== 
)== 
=>== 
{>> 
IRepository?? 
<?? 
Test??  
>??  !
testRepository??" 0
=??1 2
new??3 6!
GenericTestRepository??7 L
(??L M
mockUnitOfWork??M [
.??[ \
Object??\ b
)??b c
;??c d
testRepository@@ 
.@@ 
Add@@ "
(@@" #
(@@# $
Test@@$ (
)@@( )
null@@* .
)@@. /
;@@/ 0
}AA 
;AA 
actCC 
.CC 
ShouldCC 
(CC 
)CC 
.CC 
ThrowCC 
<CC !
ArgumentNullExceptionCC 4
>CC4 5
(CC5 6
)CC6 7
.CC7 8
AndCC8 ;
.CC; <
	ParamNameCC< E
.CCE F
ShouldCCF L
(CCL M
)CCM N
.CCN O
BeCCO Q
(CCQ R
$strCCR Z
)CCZ [
;CC[ \
}DD 	
[FF 	
FactFF	 
]FF 
publicGG 
voidGG ;
/ThrowsArgumentNullExceptionGivenNullEntityAsyncGG C
(GGC D
)GGD E
{HH 	
MockII 
<II  
IQueryableUnitOfWorkII %
>II% &
mockUnitOfWorkII' 5
=II6 7
newII8 ;
MockII< @
<II@ A 
IQueryableUnitOfWorkIIA U
>IIU V
(IIV W
)IIW X
;IIX Y
ActionKK 
actKK 
=KK 
(KK 
)KK 
=>KK 
{LL 
IRepositoryMM 
<MM 
TestMM  
>MM  !
testRepositoryMM" 0
=MM1 2
newMM3 6!
GenericTestRepositoryMM7 L
(MML M
mockUnitOfWorkMMM [
.MM[ \
ObjectMM\ b
)MMb c
;MMc d
testRepositoryNN 
.NN 
AddAsyncNN '
(NN' (
(NN( )
TestNN) -
)NN- .
nullNN/ 3
)NN3 4
.NN4 5

GetAwaiterNN5 ?
(NN? @
)NN@ A
.NNA B
	GetResultNNB K
(NNK L
)NNL M
;NNM N
}OO 
;OO 
actQQ 
.QQ 
ShouldQQ 
(QQ 
)QQ 
.QQ 
ThrowQQ 
<QQ !
ArgumentNullExceptionQQ 4
>QQ4 5
(QQ5 6
)QQ6 7
.QQ7 8
AndQQ8 ;
.QQ; <
	ParamNameQQ< E
.QQE F
ShouldQQF L
(QQL M
)QQM N
.QQN O
BeQQO Q
(QQQ R
$strQQR Z
)QQZ [
;QQ[ \
}RR 	
[TT 	
FactTT	 
]TT 
publicUU 
voidUU 8
,CallSaveChangesSuccessfullyGivenManyEntitiesUU @
(UU@ A
)UUA B
{VV 	
ListWW 
<WW 
TestWW 
>WW 
mockedTestsWW "
=WW# $
newWW% (
ListWW) -
<WW- .
TestWW. 2
>WW2 3
(WW3 4
)WW4 5
;WW5 6
MockYY 
<YY 
DbSetYY 
<YY 
TestYY 
>YY 
>YY 
	mockDbSetYY '
=YY( )
newYY* -
MockYY. 2
<YY2 3
DbSetYY3 8
<YY8 9
TestYY9 =
>YY= >
>YY> ?
(YY? @
)YY@ A
;YYA B
	mockDbSetZZ 
.ZZ 
SetupAsQueryableZZ &
(ZZ& '
mockedTestsZZ' 2
)ZZ2 3
;ZZ3 4
Mock\\ 
<\\  
IQueryableUnitOfWork\\ %
>\\% &
mockUnitOfWork\\' 5
=\\6 7
new\\8 ;
Mock\\< @
<\\@ A 
IQueryableUnitOfWork\\A U
>\\U V
(\\V W
)\\W X
;\\X Y
mockUnitOfWork]] 
.]] 
Setup]]  
(]]  !
p]]! "
=>]]# %
p]]& '
.]]' (
Set]]( +
<]]+ ,
Test]], 0
>]]0 1
(]]1 2
)]]2 3
)]]3 4
.]]4 5
Returns]]5 <
(]]< =
	mockDbSet]]= F
.]]F G
Object]]G M
)]]M N
;]]N O
mockUnitOfWork^^ 
.^^ 
Setup^^  
(^^  !
p^^! "
=>^^# %
p^^& '
.^^' (
SaveChanges^^( 3
(^^3 4
)^^4 5
)^^5 6
;^^6 7
IRepository`` 
<`` 
Test`` 
>`` 
testRepository`` ,
=``- .
new``/ 2!
GenericTestRepository``3 H
(``H I
mockUnitOfWork``I W
.``W X
Object``X ^
)``^ _
;``_ `
Listaa 
<aa 
Testaa 
>aa 
testsaa 
=aa 
	MockTestsaa (
(aa( )
)aa) *
;aa* +
testRepositorybb 
.bb 
Addbb 
(bb 
testsbb $
)bb$ %
;bb% &
mockUnitOfWorkdd 
.dd 
Verifydd !
(dd! "
xdd" #
=>dd$ &
xdd' (
.dd( )
Setdd) ,
<dd, -
Testdd- 1
>dd1 2
(dd2 3
)dd3 4
,dd4 5
Timesdd6 ;
.dd; <
Oncedd< @
)dd@ A
;ddA B
mockUnitOfWorkee 
.ee 
Verifyee !
(ee! "
xee" #
=>ee$ &
xee' (
.ee( )
SaveChangesee) 4
(ee4 5
)ee5 6
,ee6 7
Timesee8 =
.ee= >
Onceee> B
)eeB C
;eeC D
}ff 	
[hh 	
Facthh	 
]hh 
publicii 
voidii @
4ThrowsArgumentNullExceptionGivenNullEntityEnumerableii H
(iiH I
)iiI J
{jj 	
Mockkk 
<kk  
IQueryableUnitOfWorkkk %
>kk% &
mockUnitOfWorkkk' 5
=kk6 7
newkk8 ;
Mockkk< @
<kk@ A 
IQueryableUnitOfWorkkkA U
>kkU V
(kkV W
)kkW X
;kkX Y
Actionmm 
actmm 
=mm 
(mm 
)mm 
=>mm 
{nn 
IRepositoryoo 
<oo 
Testoo  
>oo  !
testRepositoryoo" 0
=oo1 2
newoo3 6!
GenericTestRepositoryoo7 L
(ooL M
mockUnitOfWorkooM [
.oo[ \
Objectoo\ b
)oob c
;ooc d
testRepositorypp 
.pp 
Addpp "
(pp" #
(pp# $
IEnumerablepp$ /
<pp/ 0
Testpp0 4
>pp4 5
)pp5 6
nullpp7 ;
)pp; <
;pp< =
}qq 
;qq 
actss 
.ss 
Shouldss 
(ss 
)ss 
.ss 
Throwss 
<ss !
ArgumentNullExceptionss 4
>ss4 5
(ss5 6
)ss6 7
.ss7 8
Andss8 ;
.ss; <
	ParamNamess< E
.ssE F
ShouldssF L
(ssL M
)ssM N
.ssN O
BessO Q
(ssQ R
$strssR \
)ss\ ]
;ss] ^
}tt 	
[vv 	
Factvv	 
]vv 
publicww 
voidww E
9ThrowsArgumentNullExceptionGivenNullEntityEnumerableAsyncww M
(wwM N
)wwN O
{xx 	
Mockyy 
<yy  
IQueryableUnitOfWorkyy %
>yy% &
mockUnitOfWorkyy' 5
=yy6 7
newyy8 ;
Mockyy< @
<yy@ A 
IQueryableUnitOfWorkyyA U
>yyU V
(yyV W
)yyW X
;yyX Y
Action{{ 
act{{ 
={{ 
({{ 
){{ 
=>{{ 
{|| 
IRepository}} 
<}} 
Test}}  
>}}  !
testRepository}}" 0
=}}1 2
new}}3 6!
GenericTestRepository}}7 L
(}}L M
mockUnitOfWork}}M [
.}}[ \
Object}}\ b
)}}b c
;}}c d
testRepository~~ 
.~~ 
AddAsync~~ '
(~~' (
(~~( )
IEnumerable~~) 4
<~~4 5
Test~~5 9
>~~9 :
)~~: ;
null~~< @
)~~@ A
.~~A B

GetAwaiter~~B L
(~~L M
)~~M N
.~~N O
	GetResult~~O X
(~~X Y
)~~Y Z
;~~Z [
} 
; 
act
ÅÅ 
.
ÅÅ 
Should
ÅÅ 
(
ÅÅ 
)
ÅÅ 
.
ÅÅ 
Throw
ÅÅ 
<
ÅÅ #
ArgumentNullException
ÅÅ 4
>
ÅÅ4 5
(
ÅÅ5 6
)
ÅÅ6 7
.
ÅÅ7 8
And
ÅÅ8 ;
.
ÅÅ; <
	ParamName
ÅÅ< E
.
ÅÅE F
Should
ÅÅF L
(
ÅÅL M
)
ÅÅM N
.
ÅÅN O
Be
ÅÅO Q
(
ÅÅQ R
$str
ÅÅR \
)
ÅÅ\ ]
;
ÅÅ] ^
}
ÇÇ 	
[
ÑÑ 	
Fact
ÑÑ	 
]
ÑÑ 
public
ÖÖ 
void
ÖÖ ?
1CallSaveChangesSuccessfullyGivenManyEntitiesAsync
ÖÖ E
(
ÖÖE F
)
ÖÖF G
{
ÜÜ 	
List
áá 
<
áá 
Test
áá 
>
áá 
mockedTests
áá "
=
áá# $
new
áá% (
List
áá) -
<
áá- .
Test
áá. 2
>
áá2 3
(
áá3 4
)
áá4 5
;
áá5 6
Mock
ââ 
<
ââ 
DbSet
ââ 
<
ââ 
Test
ââ 
>
ââ 
>
ââ 
	mockDbSet
ââ '
=
ââ( )
new
ââ* -
Mock
ââ. 2
<
ââ2 3
DbSet
ââ3 8
<
ââ8 9
Test
ââ9 =
>
ââ= >
>
ââ> ?
(
ââ? @
)
ââ@ A
;
ââA B
	mockDbSet
ää 
.
ää 
SetupAsQueryable
ää &
(
ää& '
mockedTests
ää' 2
)
ää2 3
;
ää3 4
Mock
åå 
<
åå "
IQueryableUnitOfWork
åå %
>
åå% &
mockUnitOfWork
åå' 5
=
åå6 7
new
åå8 ;
Mock
åå< @
<
åå@ A"
IQueryableUnitOfWork
ååA U
>
ååU V
(
ååV W
)
ååW X
;
ååX Y
mockUnitOfWork
çç 
.
çç 
Setup
çç  
(
çç  !
p
çç! "
=>
çç# %
p
çç& '
.
çç' (
Set
çç( +
<
çç+ ,
Test
çç, 0
>
çç0 1
(
çç1 2
)
çç2 3
)
çç3 4
.
çç4 5
Returns
çç5 <
(
çç< =
	mockDbSet
çç= F
.
ççF G
Object
ççG M
)
ççM N
;
ççN O
mockUnitOfWork
éé 
.
éé 
Setup
éé  
(
éé  !
p
éé! "
=>
éé# %
p
éé& '
.
éé' (
SaveChangesAsync
éé( 8
(
éé8 9
)
éé9 :
)
éé: ;
.
éé; <
Returns
éé< C
(
ééC D
Task
ééD H
.
ééH I

FromResult
ééI S
(
ééS T
It
ééT V
.
ééV W
IsAny
ééW \
<
éé\ ]
int
éé] `
>
éé` a
(
ééa b
)
ééb c
)
ééc d
)
ééd e
;
éée f
IRepository
êê 
<
êê 
Test
êê 
>
êê 
testRepository
êê ,
=
êê- .
new
êê/ 2#
GenericTestRepository
êê3 H
(
êêH I
mockUnitOfWork
êêI W
.
êêW X
Object
êêX ^
)
êê^ _
;
êê_ `
List
ëë 
<
ëë 
Test
ëë 
>
ëë 
tests
ëë 
=
ëë 
	MockTests
ëë (
(
ëë( )
)
ëë) *
;
ëë* +
testRepository
íí 
.
íí 
AddAsync
íí #
(
íí# $
tests
íí$ )
)
íí) *
.
íí* +

GetAwaiter
íí+ 5
(
íí5 6
)
íí6 7
.
íí7 8
	GetResult
íí8 A
(
ííA B
)
ííB C
;
ííC D
mockUnitOfWork
îî 
.
îî 
Verify
îî !
(
îî! "
x
îî" #
=>
îî$ &
x
îî' (
.
îî( )
Set
îî) ,
<
îî, -
Test
îî- 1
>
îî1 2
(
îî2 3
)
îî3 4
,
îî4 5
Times
îî6 ;
.
îî; <
Once
îî< @
)
îî@ A
;
îîA B
mockUnitOfWork
ïï 
.
ïï 
Verify
ïï !
(
ïï! "
x
ïï" #
=>
ïï$ &
x
ïï' (
.
ïï( )
SaveChangesAsync
ïï) 9
(
ïï9 :
)
ïï: ;
,
ïï; <
Times
ïï= B
.
ïïB C
Once
ïïC G
)
ïïG H
;
ïïH I
}
ññ 	
private
òò 
static
òò 
List
òò 
<
òò 
Test
òò  
>
òò  !
	MockTests
òò" +
(
òò+ ,
int
òò, /
count
òò0 5
)
òò5 6
{
ôô 	
List
öö 
<
öö 
Test
öö 
>
öö 
tests
öö 
=
öö 
new
öö "
List
öö# '
<
öö' (
Test
öö( ,
>
öö, -
(
öö- .
)
öö. /
;
öö/ 0
for
úú 
(
úú 
int
úú 
i
úú 
=
úú 
$num
úú 
;
úú 
i
úú 
<=
úú  
count
úú! &
;
úú& '
i
úú( )
++
úú) +
)
úú+ ,
{
ùù 
tests
ûû 
.
ûû 
Add
ûû 
(
ûû 
new
ûû 
Test
ûû "
(
ûû" #
i
ûû# $
)
ûû$ %
)
ûû% &
;
ûû& '
}
üü 
return
°° 
tests
°° 
;
°° 
}
¢¢ 	
private
§§ 
static
§§ 
List
§§ 
<
§§ 
Test
§§  
>
§§  !
	MockTests
§§" +
(
§§+ ,
)
§§, -
{
•• 	
return
¶¶ 
	MockTests
¶¶ 
(
¶¶ 
$num
¶¶ 
)
¶¶ 
;
¶¶  
}
ßß 	
}
®® 
}©© Í‹
`C:\Projects\anderson.souza\Ritter\tests\Infra.Data.Seedwork.Tests\Repositories\Repository_Any.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Data 
. 
Tests !
.! "
Repositories" .
{ 
public 

class 
Repository_Any 
{ 
[ 	
Fact	 
] 
public 
void %
ReturnsTrueGivenAnyEntity -
(- .
). /
{ 	
List 
< 
Test 
> 
mockedTests "
=# $
	MockTests% .
(. /
)/ 0
;0 1
Mock 
< 
DbSet 
< 
Test 
> 
> 
	mockDbSet '
=( )
new* -
Mock. 2
<2 3
DbSet3 8
<8 9
Test9 =
>= >
>> ?
(? @
)@ A
;A B
	mockDbSet 
. 
SetupAsQueryable &
(& '
mockedTests' 2
)2 3
;3 4
Mock 
<  
IQueryableUnitOfWork %
>% &
mockUnitOfWork' 5
=6 7
new8 ;
Mock< @
<@ A 
IQueryableUnitOfWorkA U
>U V
(V W
)W X
;X Y
mockUnitOfWork 
. 
Setup  
(  !
p! "
=># %
p& '
.' (
Set( +
<+ ,
Test, 0
>0 1
(1 2
)2 3
)3 4
.4 5
Returns5 <
(< =
	mockDbSet= F
.F G
ObjectG M
)M N
;N O
IRepository 
< 
Test 
> 
testRepository ,
=- .
new/ 2!
GenericTestRepository3 H
(H I
mockUnitOfWorkI W
.W X
ObjectX ^
)^ _
;_ `
bool 
any 
= 
testRepository %
.% &
Any& )
() *
)* +
;+ ,
mockUnitOfWork   
.   
Verify   !
(  ! "
x  " #
=>  $ &
x  ' (
.  ( )
Set  ) ,
<  , -
Test  - 1
>  1 2
(  2 3
)  3 4
,  4 5
Times  6 ;
.  ; <
Once  < @
)  @ A
;  A B
any!! 
.!! 
Should!! 
(!! 
)!! 
.!! 
BeTrue!! 
(!!  
)!!  !
;!!! "
}"" 	
[$$ 	
Fact$$	 
]$$ 
public%% 
void%% *
ReturnsTrueGivenAnyEntityAsync%% 2
(%%2 3
)%%3 4
{&& 	
List'' 
<'' 
Test'' 
>'' 
mockedTests'' "
=''# $
	MockTests''% .
(''. /
)''/ 0
;''0 1
Mock)) 
<)) 
DbSet)) 
<)) 
Test)) 
>)) 
>)) 
	mockDbSet)) '
=))( )
new))* -
Mock)). 2
<))2 3
DbSet))3 8
<))8 9
Test))9 =
>))= >
>))> ?
())? @
)))@ A
;))A B
	mockDbSet** 
.** !
SetupAsQueryableAsync** +
(**+ ,
mockedTests**, 7
)**7 8
;**8 9
Mock,, 
<,,  
IQueryableUnitOfWork,, %
>,,% &
mockUnitOfWork,,' 5
=,,6 7
new,,8 ;
Mock,,< @
<,,@ A 
IQueryableUnitOfWork,,A U
>,,U V
(,,V W
),,W X
;,,X Y
mockUnitOfWork-- 
.-- 
Setup--  
(--  !
p--! "
=>--# %
p--& '
.--' (
Set--( +
<--+ ,
Test--, 0
>--0 1
(--1 2
)--2 3
)--3 4
.--4 5
Returns--5 <
(--< =
	mockDbSet--= F
.--F G
Object--G M
)--M N
;--N O
IRepository// 
<// 
Test// 
>// 
testRepository// ,
=//- .
new/// 2!
GenericTestRepository//3 H
(//H I
mockUnitOfWork//I W
.//W X
Object//X ^
)//^ _
;//_ `
bool00 
any00 
=00 
testRepository00 %
.00% &
AnyAsync00& .
(00. /
)00/ 0
.000 1

GetAwaiter001 ;
(00; <
)00< =
.00= >
	GetResult00> G
(00G H
)00H I
;00I J
mockUnitOfWork22 
.22 
Verify22 !
(22! "
x22" #
=>22$ &
x22' (
.22( )
Set22) ,
<22, -
Test22- 1
>221 2
(222 3
)223 4
,224 5
Times226 ;
.22; <
Once22< @
)22@ A
;22A B
any33 
.33 
Should33 
(33 
)33 
.33 
BeTrue33 
(33  
)33  !
;33! "
}44 	
[66 	
Fact66	 
]66 
public77 
void77 '
ReturnsFalseGivenNoneEntity77 /
(77/ 0
)770 1
{88 	
List99 
<99 
Test99 
>99 
mockedTests99 "
=99# $
	MockTests99% .
(99. /
$num99/ 0
)990 1
;991 2
Mock;; 
<;; 
DbSet;; 
<;; 
Test;; 
>;; 
>;; 
	mockDbSet;; '
=;;( )
new;;* -
Mock;;. 2
<;;2 3
DbSet;;3 8
<;;8 9
Test;;9 =
>;;= >
>;;> ?
(;;? @
);;@ A
;;;A B
	mockDbSet<< 
.<< 
SetupAsQueryable<< &
(<<& '
mockedTests<<' 2
)<<2 3
;<<3 4
Mock>> 
<>>  
IQueryableUnitOfWork>> %
>>>% &
mockUnitOfWork>>' 5
=>>6 7
new>>8 ;
Mock>>< @
<>>@ A 
IQueryableUnitOfWork>>A U
>>>U V
(>>V W
)>>W X
;>>X Y
mockUnitOfWork?? 
.?? 
Setup??  
(??  !
p??! "
=>??# %
p??& '
.??' (
Set??( +
<??+ ,
Test??, 0
>??0 1
(??1 2
)??2 3
)??3 4
.??4 5
Returns??5 <
(??< =
	mockDbSet??= F
.??F G
Object??G M
)??M N
;??N O
IRepositoryAA 
<AA 
TestAA 
>AA 
testRepositoryAA ,
=AA- .
newAA/ 2!
GenericTestRepositoryAA3 H
(AAH I
mockUnitOfWorkAAI W
.AAW X
ObjectAAX ^
)AA^ _
;AA_ `
boolBB 
anyBB 
=BB 
testRepositoryBB %
.BB% &
AnyBB& )
(BB) *
)BB* +
;BB+ ,
mockUnitOfWorkDD 
.DD 
VerifyDD !
(DD! "
xDD" #
=>DD$ &
xDD' (
.DD( )
SetDD) ,
<DD, -
TestDD- 1
>DD1 2
(DD2 3
)DD3 4
,DD4 5
TimesDD6 ;
.DD; <
OnceDD< @
)DD@ A
;DDA B
anyEE 
.EE 
ShouldEE 
(EE 
)EE 
.EE 
BeFalseEE  
(EE  !
)EE! "
;EE" #
}FF 	
[HH 	
FactHH	 
]HH 
publicII 
voidII ,
 ReturnsFalseGivenNoneEntityAsyncII 4
(II4 5
)II5 6
{JJ 	
ListKK 
<KK 
TestKK 
>KK 
mockedTestsKK "
=KK# $
	MockTestsKK% .
(KK. /
$numKK/ 0
)KK0 1
;KK1 2
MockMM 
<MM 
DbSetMM 
<MM 
TestMM 
>MM 
>MM 
	mockDbSetMM '
=MM( )
newMM* -
MockMM. 2
<MM2 3
DbSetMM3 8
<MM8 9
TestMM9 =
>MM= >
>MM> ?
(MM? @
)MM@ A
;MMA B
	mockDbSetNN 
.NN !
SetupAsQueryableAsyncNN +
(NN+ ,
mockedTestsNN, 7
)NN7 8
;NN8 9
MockPP 
<PP  
IQueryableUnitOfWorkPP %
>PP% &
mockUnitOfWorkPP' 5
=PP6 7
newPP8 ;
MockPP< @
<PP@ A 
IQueryableUnitOfWorkPPA U
>PPU V
(PPV W
)PPW X
;PPX Y
mockUnitOfWorkQQ 
.QQ 
SetupQQ  
(QQ  !
pQQ! "
=>QQ# %
pQQ& '
.QQ' (
SetQQ( +
<QQ+ ,
TestQQ, 0
>QQ0 1
(QQ1 2
)QQ2 3
)QQ3 4
.QQ4 5
ReturnsQQ5 <
(QQ< =
	mockDbSetQQ= F
.QQF G
ObjectQQG M
)QQM N
;QQN O
IRepositorySS 
<SS 
TestSS 
>SS 
testRepositorySS ,
=SS- .
newSS/ 2!
GenericTestRepositorySS3 H
(SSH I
mockUnitOfWorkSSI W
.SSW X
ObjectSSX ^
)SS^ _
;SS_ `
boolTT 
anyTT 
=TT 
testRepositoryTT %
.TT% &
AnyAsyncTT& .
(TT. /
)TT/ 0
.TT0 1

GetAwaiterTT1 ;
(TT; <
)TT< =
.TT= >
	GetResultTT> G
(TTG H
)TTH I
;TTI J
mockUnitOfWorkVV 
.VV 
VerifyVV !
(VV! "
xVV" #
=>VV$ &
xVV' (
.VV( )
SetVV) ,
<VV, -
TestVV- 1
>VV1 2
(VV2 3
)VV3 4
,VV4 5
TimesVV6 ;
.VV; <
OnceVV< @
)VV@ A
;VVA B
anyWW 
.WW 
ShouldWW 
(WW 
)WW 
.WW 
BeFalseWW  
(WW  !
)WW! "
;WW" #
}XX 	
[ZZ 	
FactZZ	 
]ZZ 
public[[ 
void[[ +
ReturnsTrueGivenAnyActiveEntity[[ 3
([[3 4
)[[4 5
{\\ 	
List]] 
<]] 
Test]] 
>]] 
mockedTests]] "
=]]# $
	MockTests]]% .
(]]. /
)]]/ 0
;]]0 1
mockedTests^^ 
.^^ 
First^^ 
(^^ 
)^^ 
.^^  

Deactivate^^  *
(^^* +
)^^+ ,
;^^, -
Mock`` 
<`` 
DbSet`` 
<`` 
Test`` 
>`` 
>`` 
	mockDbSet`` '
=``( )
new``* -
Mock``. 2
<``2 3
DbSet``3 8
<``8 9
Test``9 =
>``= >
>``> ?
(``? @
)``@ A
;``A B
	mockDbSetaa 
.aa 
SetupAsQueryableaa &
(aa& '
mockedTestsaa' 2
)aa2 3
;aa3 4
Mockcc 
<cc  
IQueryableUnitOfWorkcc %
>cc% &
mockUnitOfWorkcc' 5
=cc6 7
newcc8 ;
Mockcc< @
<cc@ A 
IQueryableUnitOfWorkccA U
>ccU V
(ccV W
)ccW X
;ccX Y
mockUnitOfWorkdd 
.dd 
Setupdd  
(dd  !
pdd! "
=>dd# %
pdd& '
.dd' (
Setdd( +
<dd+ ,
Testdd, 0
>dd0 1
(dd1 2
)dd2 3
)dd3 4
.dd4 5
Returnsdd5 <
(dd< =
	mockDbSetdd= F
.ddF G
ObjectddG M
)ddM N
;ddN O
ISpecificationff 
<ff 
Testff 
>ff  
specff! %
=ff& '
newff( +
DirectSpecificationff, ?
<ff? @
Testff@ D
>ffD E
(ffE F
tffF G
=>ffH J
tffK L
.ffL M
ActiveffM S
)ffS T
;ffT U
IRepositorygg 
<gg 
Testgg 
>gg 
testRepositorygg ,
=gg- .
newgg/ 2!
GenericTestRepositorygg3 H
(ggH I
mockUnitOfWorkggI W
.ggW X
ObjectggX ^
)gg^ _
;gg_ `
boolhh 
anyhh 
=hh 
testRepositoryhh %
.hh% &
Anyhh& )
(hh) *
spechh* .
)hh. /
;hh/ 0
mockUnitOfWorkjj 
.jj 
Verifyjj !
(jj! "
xjj" #
=>jj$ &
xjj' (
.jj( )
Setjj) ,
<jj, -
Testjj- 1
>jj1 2
(jj2 3
)jj3 4
,jj4 5
Timesjj6 ;
.jj; <
Oncejj< @
)jj@ A
;jjA B
anykk 
.kk 
Shouldkk 
(kk 
)kk 
.kk 
BeTruekk 
(kk  
)kk  !
;kk! "
}ll 	
[nn 	
Factnn	 
]nn 
publicoo 
voidoo 0
$ReturnsTrueGivenAnyActiveEntityAsyncoo 8
(oo8 9
)oo9 :
{pp 	
Listqq 
<qq 
Testqq 
>qq 
mockedTestsqq "
=qq# $
	MockTestsqq% .
(qq. /
)qq/ 0
;qq0 1
mockedTestsrr 
.rr 
Firstrr 
(rr 
)rr 
.rr  

Deactivaterr  *
(rr* +
)rr+ ,
;rr, -
Mocktt 
<tt 
DbSettt 
<tt 
Testtt 
>tt 
>tt 
	mockDbSettt '
=tt( )
newtt* -
Mocktt. 2
<tt2 3
DbSettt3 8
<tt8 9
Testtt9 =
>tt= >
>tt> ?
(tt? @
)tt@ A
;ttA B
	mockDbSetuu 
.uu !
SetupAsQueryableAsyncuu +
(uu+ ,
mockedTestsuu, 7
)uu7 8
;uu8 9
Mockww 
<ww  
IQueryableUnitOfWorkww %
>ww% &
mockUnitOfWorkww' 5
=ww6 7
newww8 ;
Mockww< @
<ww@ A 
IQueryableUnitOfWorkwwA U
>wwU V
(wwV W
)wwW X
;wwX Y
mockUnitOfWorkxx 
.xx 
Setupxx  
(xx  !
pxx! "
=>xx# %
pxx& '
.xx' (
Setxx( +
<xx+ ,
Testxx, 0
>xx0 1
(xx1 2
)xx2 3
)xx3 4
.xx4 5
Returnsxx5 <
(xx< =
	mockDbSetxx= F
.xxF G
ObjectxxG M
)xxM N
;xxN O
ISpecificationzz 
<zz 
Testzz 
>zz  
speczz! %
=zz& '
newzz( +
DirectSpecificationzz, ?
<zz? @
Testzz@ D
>zzD E
(zzE F
tzzF G
=>zzH J
tzzK L
.zzL M
ActivezzM S
)zzS T
;zzT U
IRepository{{ 
<{{ 
Test{{ 
>{{ 
testRepository{{ ,
={{- .
new{{/ 2!
GenericTestRepository{{3 H
({{H I
mockUnitOfWork{{I W
.{{W X
Object{{X ^
){{^ _
;{{_ `
bool|| 
any|| 
=|| 
testRepository|| %
.||% &
AnyAsync||& .
(||. /
spec||/ 3
)||3 4
.||4 5

GetAwaiter||5 ?
(||? @
)||@ A
.||A B
	GetResult||B K
(||K L
)||L M
;||M N
mockUnitOfWork~~ 
.~~ 
Verify~~ !
(~~! "
x~~" #
=>~~$ &
x~~' (
.~~( )
Set~~) ,
<~~, -
Test~~- 1
>~~1 2
(~~2 3
)~~3 4
,~~4 5
Times~~6 ;
.~~; <
Once~~< @
)~~@ A
;~~A B
any 
. 
Should 
( 
) 
. 
BeTrue 
(  
)  !
;! "
}
ÄÄ 	
[
ÇÇ 	
Fact
ÇÇ	 
]
ÇÇ 
public
ÉÉ 
void
ÉÉ /
!ReturnsFalseGivenNoneActiveEntity
ÉÉ 5
(
ÉÉ5 6
)
ÉÉ6 7
{
ÑÑ 	
List
ÖÖ 
<
ÖÖ 
Test
ÖÖ 
>
ÖÖ 
mockedTests
ÖÖ "
=
ÖÖ# $
	MockTests
ÖÖ% .
(
ÖÖ. /
$num
ÖÖ/ 0
)
ÖÖ0 1
;
ÖÖ1 2
mockedTests
ÜÜ 
.
ÜÜ 
First
ÜÜ 
(
ÜÜ 
)
ÜÜ 
.
ÜÜ  

Deactivate
ÜÜ  *
(
ÜÜ* +
)
ÜÜ+ ,
;
ÜÜ, -
Mock
àà 
<
àà 
DbSet
àà 
<
àà 
Test
àà 
>
àà 
>
àà 
	mockDbSet
àà '
=
àà( )
new
àà* -
Mock
àà. 2
<
àà2 3
DbSet
àà3 8
<
àà8 9
Test
àà9 =
>
àà= >
>
àà> ?
(
àà? @
)
àà@ A
;
ààA B
	mockDbSet
ââ 
.
ââ 
SetupAsQueryable
ââ &
(
ââ& '
mockedTests
ââ' 2
)
ââ2 3
;
ââ3 4
Mock
ãã 
<
ãã "
IQueryableUnitOfWork
ãã %
>
ãã% &
mockUnitOfWork
ãã' 5
=
ãã6 7
new
ãã8 ;
Mock
ãã< @
<
ãã@ A"
IQueryableUnitOfWork
ããA U
>
ããU V
(
ããV W
)
ããW X
;
ããX Y
mockUnitOfWork
åå 
.
åå 
Setup
åå  
(
åå  !
p
åå! "
=>
åå# %
p
åå& '
.
åå' (
Set
åå( +
<
åå+ ,
Test
åå, 0
>
åå0 1
(
åå1 2
)
åå2 3
)
åå3 4
.
åå4 5
Returns
åå5 <
(
åå< =
	mockDbSet
åå= F
.
ååF G
Object
ååG M
)
ååM N
;
ååN O
ISpecification
éé 
<
éé 
Test
éé 
>
éé  
spec
éé! %
=
éé& '
new
éé( +!
DirectSpecification
éé, ?
<
éé? @
Test
éé@ D
>
ééD E
(
ééE F
t
ééF G
=>
ééH J
t
ééK L
.
ééL M
Active
ééM S
)
ééS T
;
ééT U
IRepository
èè 
<
èè 
Test
èè 
>
èè 
testRepository
èè ,
=
èè- .
new
èè/ 2#
GenericTestRepository
èè3 H
(
èèH I
mockUnitOfWork
èèI W
.
èèW X
Object
èèX ^
)
èè^ _
;
èè_ `
bool
êê 
any
êê 
=
êê 
testRepository
êê %
.
êê% &
Any
êê& )
(
êê) *
spec
êê* .
)
êê. /
;
êê/ 0
mockUnitOfWork
íí 
.
íí 
Verify
íí !
(
íí! "
x
íí" #
=>
íí$ &
x
íí' (
.
íí( )
Set
íí) ,
<
íí, -
Test
íí- 1
>
íí1 2
(
íí2 3
)
íí3 4
,
íí4 5
Times
íí6 ;
.
íí; <
Once
íí< @
)
íí@ A
;
ííA B
any
ìì 
.
ìì 
Should
ìì 
(
ìì 
)
ìì 
.
ìì 
BeFalse
ìì  
(
ìì  !
)
ìì! "
;
ìì" #
}
îî 	
[
ññ 	
Fact
ññ	 
]
ññ 
public
óó 
void
óó 4
&ReturnsFalseGivenNoneActiveEntityAsync
óó :
(
óó: ;
)
óó; <
{
òò 	
List
ôô 
<
ôô 
Test
ôô 
>
ôô 
mockedTests
ôô "
=
ôô# $
	MockTests
ôô% .
(
ôô. /
$num
ôô/ 0
)
ôô0 1
;
ôô1 2
mockedTests
öö 
.
öö 
First
öö 
(
öö 
)
öö 
.
öö  

Deactivate
öö  *
(
öö* +
)
öö+ ,
;
öö, -
Mock
úú 
<
úú 
DbSet
úú 
<
úú 
Test
úú 
>
úú 
>
úú 
	mockDbSet
úú '
=
úú( )
new
úú* -
Mock
úú. 2
<
úú2 3
DbSet
úú3 8
<
úú8 9
Test
úú9 =
>
úú= >
>
úú> ?
(
úú? @
)
úú@ A
;
úúA B
	mockDbSet
ùù 
.
ùù #
SetupAsQueryableAsync
ùù +
(
ùù+ ,
mockedTests
ùù, 7
)
ùù7 8
;
ùù8 9
Mock
üü 
<
üü "
IQueryableUnitOfWork
üü %
>
üü% &
mockUnitOfWork
üü' 5
=
üü6 7
new
üü8 ;
Mock
üü< @
<
üü@ A"
IQueryableUnitOfWork
üüA U
>
üüU V
(
üüV W
)
üüW X
;
üüX Y
mockUnitOfWork
†† 
.
†† 
Setup
††  
(
††  !
p
††! "
=>
††# %
p
††& '
.
††' (
Set
††( +
<
††+ ,
Test
††, 0
>
††0 1
(
††1 2
)
††2 3
)
††3 4
.
††4 5
Returns
††5 <
(
††< =
	mockDbSet
††= F
.
††F G
Object
††G M
)
††M N
;
††N O
ISpecification
¢¢ 
<
¢¢ 
Test
¢¢ 
>
¢¢  
spec
¢¢! %
=
¢¢& '
new
¢¢( +!
DirectSpecification
¢¢, ?
<
¢¢? @
Test
¢¢@ D
>
¢¢D E
(
¢¢E F
t
¢¢F G
=>
¢¢H J
t
¢¢K L
.
¢¢L M
Active
¢¢M S
)
¢¢S T
;
¢¢T U
IRepository
££ 
<
££ 
Test
££ 
>
££ 
testRepository
££ ,
=
££- .
new
££/ 2#
GenericTestRepository
££3 H
(
££H I
mockUnitOfWork
££I W
.
££W X
Object
££X ^
)
££^ _
;
££_ `
bool
§§ 
any
§§ 
=
§§ 
testRepository
§§ %
.
§§% &
AnyAsync
§§& .
(
§§. /
spec
§§/ 3
)
§§3 4
.
§§4 5

GetAwaiter
§§5 ?
(
§§? @
)
§§@ A
.
§§A B
	GetResult
§§B K
(
§§K L
)
§§L M
;
§§M N
mockUnitOfWork
¶¶ 
.
¶¶ 
Verify
¶¶ !
(
¶¶! "
x
¶¶" #
=>
¶¶$ &
x
¶¶' (
.
¶¶( )
Set
¶¶) ,
<
¶¶, -
Test
¶¶- 1
>
¶¶1 2
(
¶¶2 3
)
¶¶3 4
,
¶¶4 5
Times
¶¶6 ;
.
¶¶; <
Once
¶¶< @
)
¶¶@ A
;
¶¶A B
any
ßß 
.
ßß 
Should
ßß 
(
ßß 
)
ßß 
.
ßß 
BeFalse
ßß  
(
ßß  !
)
ßß! "
;
ßß" #
}
®® 	
[
™™ 	
Fact
™™	 
]
™™ 
public
´´ 
void
´´ ?
1ThrowsArgumentNullExceptionGivenNullSpecification
´´ E
(
´´E F
)
´´F G
{
¨¨ 	
Mock
≠≠ 
<
≠≠ "
IQueryableUnitOfWork
≠≠ %
>
≠≠% &
mockUnitOfWork
≠≠' 5
=
≠≠6 7
new
≠≠8 ;
Mock
≠≠< @
<
≠≠@ A"
IQueryableUnitOfWork
≠≠A U
>
≠≠U V
(
≠≠V W
)
≠≠W X
;
≠≠X Y
Action
ØØ 
act
ØØ 
=
ØØ 
(
ØØ 
)
ØØ 
=>
ØØ 
{
∞∞ 
ISpecification
±± 
<
±± 
Test
±± #
>
±±# $
spec
±±% )
=
±±* +
null
±±, 0
;
±±0 1
IRepository
≤≤ 
<
≤≤ 
Test
≤≤  
>
≤≤  !
testRepository
≤≤" 0
=
≤≤1 2
new
≤≤3 6#
GenericTestRepository
≤≤7 L
(
≤≤L M
mockUnitOfWork
≤≤M [
.
≤≤[ \
Object
≤≤\ b
)
≤≤b c
;
≤≤c d
testRepository
≥≥ 
.
≥≥ 
Any
≥≥ "
(
≥≥" #
spec
≥≥# '
)
≥≥' (
;
≥≥( )
}
¥¥ 
;
¥¥ 
act
∂∂ 
.
∂∂ 
Should
∂∂ 
(
∂∂ 
)
∂∂ 
.
∂∂ 
Throw
∂∂ 
<
∂∂ #
ArgumentNullException
∂∂ 4
>
∂∂4 5
(
∂∂5 6
)
∂∂6 7
.
∂∂7 8
And
∂∂8 ;
.
∂∂; <
	ParamName
∂∂< E
.
∂∂E F
Should
∂∂F L
(
∂∂L M
)
∂∂M N
.
∂∂N O
Be
∂∂O Q
(
∂∂Q R
$str
∂∂R a
)
∂∂a b
;
∂∂b c
}
∑∑ 	
[
ππ 	
Fact
ππ	 
]
ππ 
public
∫∫ 
void
∫∫ D
6ThrowsArgumentNullExceptionGivenNullSpecificationAsync
∫∫ J
(
∫∫J K
)
∫∫K L
{
ªª 	
Mock
ºº 
<
ºº "
IQueryableUnitOfWork
ºº %
>
ºº% &
mockUnitOfWork
ºº' 5
=
ºº6 7
new
ºº8 ;
Mock
ºº< @
<
ºº@ A"
IQueryableUnitOfWork
ººA U
>
ººU V
(
ººV W
)
ººW X
;
ººX Y
Action
ææ 
act
ææ 
=
ææ 
(
ææ 
)
ææ 
=>
ææ 
{
øø 
ISpecification
¿¿ 
<
¿¿ 
Test
¿¿ #
>
¿¿# $
spec
¿¿% )
=
¿¿* +
null
¿¿, 0
;
¿¿0 1
IRepository
¡¡ 
<
¡¡ 
Test
¡¡  
>
¡¡  !
testRepository
¡¡" 0
=
¡¡1 2
new
¡¡3 6#
GenericTestRepository
¡¡7 L
(
¡¡L M
mockUnitOfWork
¡¡M [
.
¡¡[ \
Object
¡¡\ b
)
¡¡b c
;
¡¡c d
testRepository
¬¬ 
.
¬¬ 
AnyAsync
¬¬ '
(
¬¬' (
spec
¬¬( ,
)
¬¬, -
.
¬¬- .

GetAwaiter
¬¬. 8
(
¬¬8 9
)
¬¬9 :
.
¬¬: ;
	GetResult
¬¬; D
(
¬¬D E
)
¬¬E F
;
¬¬F G
}
√√ 
;
√√ 
act
≈≈ 
.
≈≈ 
Should
≈≈ 
(
≈≈ 
)
≈≈ 
.
≈≈ 
Throw
≈≈ 
<
≈≈ #
ArgumentNullException
≈≈ 4
>
≈≈4 5
(
≈≈5 6
)
≈≈6 7
.
≈≈7 8
And
≈≈8 ;
.
≈≈; <
	ParamName
≈≈< E
.
≈≈E F
Should
≈≈F L
(
≈≈L M
)
≈≈M N
.
≈≈N O
Be
≈≈O Q
(
≈≈Q R
$str
≈≈R a
)
≈≈a b
;
≈≈b c
}
∆∆ 	
private
»» 
static
»» 
List
»» 
<
»» 
Test
»»  
>
»»  !
	MockTests
»»" +
(
»»+ ,
int
»», /
count
»»0 5
)
»»5 6
{
…… 	
List
   
<
   
Test
   
>
   
tests
   
=
   
new
   "
List
  # '
<
  ' (
Test
  ( ,
>
  , -
(
  - .
)
  . /
;
  / 0
for
ÃÃ 
(
ÃÃ 
int
ÃÃ 
i
ÃÃ 
=
ÃÃ 
$num
ÃÃ 
;
ÃÃ 
i
ÃÃ 
<=
ÃÃ  
count
ÃÃ! &
;
ÃÃ& '
i
ÃÃ( )
++
ÃÃ) +
)
ÃÃ+ ,
{
ÕÕ 
tests
ŒŒ 
.
ŒŒ 
Add
ŒŒ 
(
ŒŒ 
new
ŒŒ 
Test
ŒŒ "
(
ŒŒ" #
i
ŒŒ# $
)
ŒŒ$ %
)
ŒŒ% &
;
ŒŒ& '
}
œœ 
return
—— 
tests
—— 
;
—— 
}
““ 	
private
‘‘ 
static
‘‘ 
List
‘‘ 
<
‘‘ 
Test
‘‘  
>
‘‘  !
	MockTests
‘‘" +
(
‘‘+ ,
)
‘‘, -
{
’’ 	
return
÷÷ 
	MockTests
÷÷ 
(
÷÷ 
$num
÷÷ 
)
÷÷ 
;
÷÷  
}
◊◊ 	
}
ÿÿ 
}ŸŸ ¶"
hC:\Projects\anderson.souza\Ritter\tests\Infra.Data.Seedwork.Tests\Repositories\Repository_Constructor.cs
	namespace		 	
Ritter		
 
.		 
Infra		 
.		 
Data		 
.		 
Tests		 !
.		! "
Repositories		" .
{

 
public 

class "
Repository_Constructor '
{ 
[ 	
Fact	 
] 
public 
void 6
*NotThrowsAnyExceptionGivenSimpleRepository >
(> ?
)? @
{ 	
Mock 
< 
IUnitOfWork 
> 
mockUnitOfWork ,
=- .
new/ 2
Mock3 7
<7 8
IUnitOfWork8 C
>C D
(D E
)E F
;F G
IRepository 
testRepository &
=' (
new) ,
TestRepository- ;
(; <
mockUnitOfWork< J
.J K
ObjectK Q
)Q R
;R S
testRepository 
. 

UnitOfWork %
.% &
Should& ,
(, -
)- .
.. /
	NotBeNull/ 8
(8 9
)9 :
.: ;
And; >
.> ?
Be? A
(A B
mockUnitOfWorkB P
.P Q
ObjectQ W
)W X
;X Y
} 	
[ 	
Fact	 
] 
public 
void 7
+NotThrowsAnyExceptionGivenGenericRepository ?
(? @
)@ A
{ 	
Mock 
<  
IQueryableUnitOfWork %
>% &
mockUnitOfWork' 5
=6 7
new8 ;
Mock< @
<@ A 
IQueryableUnitOfWorkA U
>U V
(V W
)W X
;X Y
IRepository 
< 
Test 
> 
testRepository ,
=- .
new/ 2!
GenericTestRepository3 H
(H I
mockUnitOfWorkI W
.W X
ObjectX ^
)^ _
;_ `
testRepository 
. 

UnitOfWork %
.% &
Should& ,
(, -
)- .
.. /
	NotBeNull/ 8
(8 9
)9 :
.: ;
And; >
.> ?
Be? A
(A B
mockUnitOfWorkB P
.P Q
ObjectQ W
)W X
;X Y
} 	
[ 	
Fact	 
] 
public   
void   <
0ThrowsArgumentNullExceptionGivenSimpleRepository   D
(  D E
)  E F
{!! 	
Action"" 
act"" 
="" 
("" 
)"" 
=>"" 
{""  
new""! $
TestRepository""% 3
(""3 4
null""4 8
)""8 9
;""9 :
}""; <
;""< =
act## 
.## 
Should## 
(## 
)## 
.## 
Throw## 
<## !
ArgumentNullException## 4
>##4 5
(##5 6
)##6 7
.##7 8
And##8 ;
.##; <
	ParamName##< E
.##E F
Should##F L
(##L M
)##M N
.##N O
Be##O Q
(##Q R
$str##R ^
)##^ _
;##_ `
}$$ 	
[&& 	
Fact&&	 
]&& 
public'' 
void'' =
1ThrowsArgumentNullExceptionGivenGenericRepository'' E
(''E F
)''F G
{(( 	
Action)) 
act)) 
=)) 
()) 
))) 
=>)) 
{))  
new))! $!
GenericTestRepository))% :
()): ;
null)); ?
)))? @
;))@ A
}))B C
;))C D
act** 
.** 
Should** 
(** 
)** 
.** 
Throw** 
<** !
ArgumentNullException** 4
>**4 5
(**5 6
)**6 7
.**7 8
And**8 ;
.**; <
	ParamName**< E
.**E F
Should**F L
(**L M
)**M N
.**N O
Be**O Q
(**Q R
$str**R ^
)**^ _
;**_ `
}++ 	
},, 
}-- ˇå
aC:\Projects\anderson.souza\Ritter\tests\Infra.Data.Seedwork.Tests\Repositories\Repository_Find.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Data 
. 
Tests !
.! "
Repositories" .
{ 
public 

class 
Repository_Find  
{ 
[ 	
Fact	 
] 
public 
void 
ReturnsAllEntities &
(& '
)' (
{ 	
List 
< 
Test 
> 
mockedTests "
=# $
	MockTests% .
(. /
)/ 0
;0 1
Mock 
< 
DbSet 
< 
Test 
> 
> 
	mockDbSet '
=( )
new* -
Mock. 2
<2 3
DbSet3 8
<8 9
Test9 =
>= >
>> ?
(? @
)@ A
;A B
	mockDbSet 
. 
SetupAsQueryable &
(& '
mockedTests' 2
)2 3
;3 4
Mock 
<  
IQueryableUnitOfWork %
>% &
mockUnitOfWork' 5
=6 7
new8 ;
Mock< @
<@ A 
IQueryableUnitOfWorkA U
>U V
(V W
)W X
;X Y
mockUnitOfWork 
. 
Setup  
(  !
p! "
=># %
p& '
.' (
Set( +
<+ ,
Test, 0
>0 1
(1 2
)2 3
)3 4
.4 5
Returns5 <
(< =
	mockDbSet= F
.F G
ObjectG M
)M N
;N O
IRepository 
< 
Test 
> 
testRepository ,
=- .
new/ 2!
GenericTestRepository3 H
(H I
mockUnitOfWorkI W
.W X
ObjectX ^
)^ _
;_ `
ICollection 
< 
Test 
> 
tests #
=$ %
testRepository& 4
.4 5
Find5 9
(9 :
): ;
;; <
mockUnitOfWork   
.   
Verify   !
(  ! "
x  " #
=>  $ &
x  ' (
.  ( )
Set  ) ,
<  , -
Test  - 1
>  1 2
(  2 3
)  3 4
,  4 5
Times  6 ;
.  ; <
Once  < @
)  @ A
;  A B
tests!! 
.!! 
Should!! 
(!! 
)!! 
.!! 
	NotBeNull!! $
(!!$ %
)!!% &
.!!& '
And!!' *
.!!* +
HaveSameCount!!+ 8
(!!8 9
mockedTests!!9 D
)!!D E
;!!E F
}"" 	
[$$ 	
Fact$$	 
]$$ 
public%% 
void%% 
ReturnsEmpty%%  
(%%  !
)%%! "
{&& 	
Mock'' 
<'' 
DbSet'' 
<'' 
Test'' 
>'' 
>'' 
	mockDbSet'' '
=''( )
new''* -
Mock''. 2
<''2 3
DbSet''3 8
<''8 9
Test''9 =
>''= >
>''> ?
(''? @
)''@ A
;''A B
	mockDbSet(( 
.(( 
SetupAsQueryable(( &
(((& '

Enumerable((' 1
.((1 2
Empty((2 7
<((7 8
Test((8 <
>((< =
(((= >
)((> ?
.((? @
ToList((@ F
(((F G
)((G H
)((H I
;((I J
Mock** 
<**  
IQueryableUnitOfWork** %
>**% &
mockUnitOfWork**' 5
=**6 7
new**8 ;
Mock**< @
<**@ A 
IQueryableUnitOfWork**A U
>**U V
(**V W
)**W X
;**X Y
mockUnitOfWork++ 
.++ 
Setup++  
(++  !
p++! "
=>++# %
p++& '
.++' (
Set++( +
<+++ ,
Test++, 0
>++0 1
(++1 2
)++2 3
)++3 4
.++4 5
Returns++5 <
(++< =
	mockDbSet++= F
.++F G
Object++G M
)++M N
;++N O
IRepository-- 
<-- 
Test-- 
>-- 
testRepository-- ,
=--- .
new--/ 2!
GenericTestRepository--3 H
(--H I
mockUnitOfWork--I W
.--W X
Object--X ^
)--^ _
;--_ `
ICollection.. 
<.. 
Test.. 
>.. 
tests.. #
=..$ %
testRepository..& 4
...4 5
Find..5 9
(..9 :
)..: ;
;..; <
mockUnitOfWork00 
.00 
Verify00 !
(00! "
x00" #
=>00$ &
x00' (
.00( )
Set00) ,
<00, -
Test00- 1
>001 2
(002 3
)003 4
,004 5
Times006 ;
.00; <
Once00< @
)00@ A
;00A B
tests11 
.11 
Should11 
(11 
)11 
.11 
	NotBeNull11 $
(11$ %
)11% &
.11& '
And11' *
.11* +
BeEmpty11+ 2
(112 3
)113 4
;114 5
}22 	
[44 	
Fact44	 
]44 
public55 
void55 #
ReturnsAllEntitiesAsync55 +
(55+ ,
)55, -
{66 	
List77 
<77 
Test77 
>77 
mockedTests77 "
=77# $
	MockTests77% .
(77. /
)77/ 0
;770 1
Mock99 
<99 
DbSet99 
<99 
Test99 
>99 
>99 
	mockDbSet99 '
=99( )
new99* -
Mock99. 2
<992 3
DbSet993 8
<998 9
Test999 =
>99= >
>99> ?
(99? @
)99@ A
;99A B
	mockDbSet:: 
.:: !
SetupAsQueryableAsync:: +
(::+ ,
mockedTests::, 7
)::7 8
;::8 9
Mock<< 
<<<  
IQueryableUnitOfWork<< %
><<% &
mockUnitOfWork<<' 5
=<<6 7
new<<8 ;
Mock<<< @
<<<@ A 
IQueryableUnitOfWork<<A U
><<U V
(<<V W
)<<W X
;<<X Y
mockUnitOfWork== 
.== 
Setup==  
(==  !
p==! "
=>==# %
p==& '
.==' (
Set==( +
<==+ ,
Test==, 0
>==0 1
(==1 2
)==2 3
)==3 4
.==4 5
Returns==5 <
(==< =
	mockDbSet=== F
.==F G
Object==G M
)==M N
;==N O
IRepository?? 
<?? 
Test?? 
>?? 
testRepository?? ,
=??- .
new??/ 2!
GenericTestRepository??3 H
(??H I
mockUnitOfWork??I W
.??W X
Object??X ^
)??^ _
;??_ `
ICollection@@ 
<@@ 
Test@@ 
>@@ 
tests@@ #
=@@$ %
testRepository@@& 4
.@@4 5
	FindAsync@@5 >
(@@> ?
)@@? @
.@@@ A

GetAwaiter@@A K
(@@K L
)@@L M
.@@M N
	GetResult@@N W
(@@W X
)@@X Y
;@@Y Z
mockUnitOfWorkBB 
.BB 
VerifyBB !
(BB! "
xBB" #
=>BB$ &
xBB' (
.BB( )
SetBB) ,
<BB, -
TestBB- 1
>BB1 2
(BB2 3
)BB3 4
,BB4 5
TimesBB6 ;
.BB; <
OnceBB< @
)BB@ A
;BBA B
testsCC 
.CC 
ShouldCC 
(CC 
)CC 
.CC 
	NotBeNullCC $
(CC$ %
)CC% &
.CC& '
AndCC' *
.CC* +
HaveSameCountCC+ 8
(CC8 9
mockedTestsCC9 D
)CCD E
;CCE F
}DD 	
[FF 	
FactFF	 
]FF 
publicGG 
voidGG 
ReturnsEmptyAsyncGG %
(GG% &
)GG& '
{HH 	
MockII 
<II 
DbSetII 
<II 
TestII 
>II 
>II 
	mockDbSetII '
=II( )
newII* -
MockII. 2
<II2 3
DbSetII3 8
<II8 9
TestII9 =
>II= >
>II> ?
(II? @
)II@ A
;IIA B
	mockDbSetJJ 
.JJ !
SetupAsQueryableAsyncJJ +
(JJ+ ,

EnumerableJJ, 6
.JJ6 7
EmptyJJ7 <
<JJ< =
TestJJ= A
>JJA B
(JJB C
)JJC D
.JJD E
ToListJJE K
(JJK L
)JJL M
)JJM N
;JJN O
MockLL 
<LL  
IQueryableUnitOfWorkLL %
>LL% &
mockUnitOfWorkLL' 5
=LL6 7
newLL8 ;
MockLL< @
<LL@ A 
IQueryableUnitOfWorkLLA U
>LLU V
(LLV W
)LLW X
;LLX Y
mockUnitOfWorkMM 
.MM 
SetupMM  
(MM  !
pMM! "
=>MM# %
pMM& '
.MM' (
SetMM( +
<MM+ ,
TestMM, 0
>MM0 1
(MM1 2
)MM2 3
)MM3 4
.MM4 5
ReturnsMM5 <
(MM< =
	mockDbSetMM= F
.MMF G
ObjectMMG M
)MMM N
;MMN O
IRepositoryOO 
<OO 
TestOO 
>OO 
testRepositoryOO ,
=OO- .
newOO/ 2!
GenericTestRepositoryOO3 H
(OOH I
mockUnitOfWorkOOI W
.OOW X
ObjectOOX ^
)OO^ _
;OO_ `
ICollectionPP 
<PP 
TestPP 
>PP 
testsPP #
=PP$ %
testRepositoryPP& 4
.PP4 5
	FindAsyncPP5 >
(PP> ?
)PP? @
.PP@ A

GetAwaiterPPA K
(PPK L
)PPL M
.PPM N
	GetResultPPN W
(PPW X
)PPX Y
;PPY Z
mockUnitOfWorkRR 
.RR 
VerifyRR !
(RR! "
xRR" #
=>RR$ &
xRR' (
.RR( )
SetRR) ,
<RR, -
TestRR- 1
>RR1 2
(RR2 3
)RR3 4
,RR4 5
TimesRR6 ;
.RR; <
OnceRR< @
)RR@ A
;RRA B
testsSS 
.SS 
ShouldSS 
(SS 
)SS 
.SS 
	NotBeNullSS $
(SS$ %
)SS% &
.SS& '
AndSS' *
.SS* +
BeEmptySS+ 2
(SS2 3
)SS3 4
;SS4 5
}TT 	
[VV 	
FactVV	 
]VV 
publicWW 
voidWW 0
$ReturnsAllEntitiesGivenSpecificationWW 8
(WW8 9
)WW9 :
{XX 	
ListYY 
<YY 
TestYY 
>YY 
mockedTestsYY "
=YY# $
	MockTestsYY% .
(YY. /
)YY/ 0
;YY0 1
mockedTestsZZ 
.ZZ 
SkipZZ 
(ZZ 
$numZZ 
)ZZ 
.ZZ  
TakeZZ  $
(ZZ$ %
$numZZ% &
)ZZ& '
.ZZ' (
ForEachZZ( /
(ZZ/ 0
tZZ0 1
=>ZZ2 4
tZZ5 6
.ZZ6 7

DeactivateZZ7 A
(ZZA B
)ZZB C
)ZZC D
;ZZD E
Mock\\ 
<\\ 
DbSet\\ 
<\\ 
Test\\ 
>\\ 
>\\ 
	mockDbSet\\ '
=\\( )
new\\* -
Mock\\. 2
<\\2 3
DbSet\\3 8
<\\8 9
Test\\9 =
>\\= >
>\\> ?
(\\? @
)\\@ A
;\\A B
	mockDbSet]] 
.]] 
SetupAsQueryable]] &
(]]& '
mockedTests]]' 2
)]]2 3
;]]3 4
Mock__ 
<__  
IQueryableUnitOfWork__ %
>__% &
mockUnitOfWork__' 5
=__6 7
new__8 ;
Mock__< @
<__@ A 
IQueryableUnitOfWork__A U
>__U V
(__V W
)__W X
;__X Y
mockUnitOfWork`` 
.`` 
Setup``  
(``  !
p``! "
=>``# %
p``& '
.``' (
Set``( +
<``+ ,
Test``, 0
>``0 1
(``1 2
)``2 3
)``3 4
.``4 5
Returns``5 <
(``< =
	mockDbSet``= F
.``F G
Object``G M
)``M N
;``N O
ISpecificationbb 
<bb 
Testbb 
>bb  
specbb! %
=bb& '
newbb( +
DirectSpecificationbb, ?
<bb? @
Testbb@ D
>bbD E
(bbE F
tbbF G
=>bbH J
tbbK L
.bbL M
ActivebbM S
)bbS T
;bbT U
IRepositorycc 
<cc 
Testcc 
>cc 
testRepositorycc ,
=cc- .
newcc/ 2!
GenericTestRepositorycc3 H
(ccH I
mockUnitOfWorkccI W
.ccW X
ObjectccX ^
)cc^ _
;cc_ `
ICollectiondd 
<dd 
Testdd 
>dd 
testsdd #
=dd$ %
testRepositorydd& 4
.dd4 5
Finddd5 9
(dd9 :
specdd: >
)dd> ?
;dd? @
mockUnitOfWorkff 
.ff 
Verifyff !
(ff! "
xff" #
=>ff$ &
xff' (
.ff( )
Setff) ,
<ff, -
Testff- 1
>ff1 2
(ff2 3
)ff3 4
,ff4 5
Timesff6 ;
.ff; <
Onceff< @
)ff@ A
;ffA B
testsgg 
.gg 
Shouldgg 
(gg 
)gg 
.gg 
NotBeNullOrEmptygg +
(gg+ ,
)gg, -
.gg- .
Andgg. 1
.gg1 2
OnlyContaingg2 =
(gg= >
xgg> ?
=>gg@ B
xggC D
.ggD E
ActiveggE K
,ggK L
$strggM e
)gge f
.ggf g
Andggg j
.ggj k
HaveSameCountggk x
(ggx y
mockedTests	ggy Ñ
.
ggÑ Ö
Where
ggÖ ä
(
ggä ã
p
ggã å
=>
ggç è
p
ggê ë
.
ggë í
Active
ggí ò
)
ggò ô
)
ggô ö
;
ggö õ
}hh 	
[jj 	
Factjj	 
]jj 
publickk 
voidkk =
1ThrowsArgumentNullExceptionGivenNullSpecificationkk E
(kkE F
)kkF G
{ll 	
Listmm 
<mm 
Testmm 
>mm 
mockedTestsmm "
=mm# $
	MockTestsmm% .
(mm. /
)mm/ 0
;mm0 1
mockedTestsnn 
.nn 
Skipnn 
(nn 
$numnn 
)nn 
.nn  
Takenn  $
(nn$ %
$numnn% &
)nn& '
.nn' (
ForEachnn( /
(nn/ 0
tnn0 1
=>nn2 4
tnn5 6
.nn6 7

Deactivatenn7 A
(nnA B
)nnB C
)nnC D
;nnD E
Mockpp 
<pp 
DbSetpp 
<pp 
Testpp 
>pp 
>pp 
	mockDbSetpp '
=pp( )
newpp* -
Mockpp. 2
<pp2 3
DbSetpp3 8
<pp8 9
Testpp9 =
>pp= >
>pp> ?
(pp? @
)pp@ A
;ppA B
	mockDbSetqq 
.qq 
SetupAsQueryableqq &
(qq& '
mockedTestsqq' 2
)qq2 3
;qq3 4
Mockss 
<ss  
IQueryableUnitOfWorkss %
>ss% &
mockUnitOfWorkss' 5
=ss6 7
newss8 ;
Mockss< @
<ss@ A 
IQueryableUnitOfWorkssA U
>ssU V
(ssV W
)ssW X
;ssX Y
mockUnitOfWorktt 
.tt 
Setuptt  
(tt  !
ptt! "
=>tt# %
ptt& '
.tt' (
Settt( +
<tt+ ,
Testtt, 0
>tt0 1
(tt1 2
)tt2 3
)tt3 4
.tt4 5
Returnstt5 <
(tt< =
	mockDbSettt= F
.ttF G
ObjectttG M
)ttM N
;ttN O
Actionvv 
actvv 
=vv 
(vv 
)vv 
=>vv 
{ww 
ISpecificationxx 
<xx 
Testxx #
>xx# $
specxx% )
=xx* +
nullxx, 0
;xx0 1
IRepositoryyy 
<yy 
Testyy  
>yy  !
testRepositoryyy" 0
=yy1 2
newyy3 6!
GenericTestRepositoryyy7 L
(yyL M
mockUnitOfWorkyyM [
.yy[ \
Objectyy\ b
)yyb c
;yyc d
testRepositoryzz 
.zz 
Findzz #
(zz# $
speczz$ (
)zz( )
;zz) *
}{{ 
;{{ 
act}} 
.}} 
Should}} 
(}} 
)}} 
.}} 
Throw}} 
<}} !
ArgumentNullException}} 4
>}}4 5
(}}5 6
)}}6 7
.}}7 8
And}}8 ;
.}}; <
	ParamName}}< E
.}}E F
Should}}F L
(}}L M
)}}M N
.}}N O
Be}}O Q
(}}Q R
$str}}R a
)}}a b
;}}b c
}~~ 	
[
ÄÄ 	
Fact
ÄÄ	 
]
ÄÄ 
public
ÅÅ 
void
ÅÅ 7
)ReturnsAllEntitiesGivenSpecificationAsync
ÅÅ =
(
ÅÅ= >
)
ÅÅ> ?
{
ÇÇ 	
List
ÉÉ 
<
ÉÉ 
Test
ÉÉ 
>
ÉÉ 
mockedTests
ÉÉ "
=
ÉÉ# $
	MockTests
ÉÉ% .
(
ÉÉ. /
)
ÉÉ/ 0
;
ÉÉ0 1
mockedTests
ÑÑ 
.
ÑÑ 
Skip
ÑÑ 
(
ÑÑ 
$num
ÑÑ 
)
ÑÑ 
.
ÑÑ  
Take
ÑÑ  $
(
ÑÑ$ %
$num
ÑÑ% &
)
ÑÑ& '
.
ÑÑ' (
ForEach
ÑÑ( /
(
ÑÑ/ 0
t
ÑÑ0 1
=>
ÑÑ2 4
t
ÑÑ5 6
.
ÑÑ6 7

Deactivate
ÑÑ7 A
(
ÑÑA B
)
ÑÑB C
)
ÑÑC D
;
ÑÑD E
Mock
ÜÜ 
<
ÜÜ 
DbSet
ÜÜ 
<
ÜÜ 
Test
ÜÜ 
>
ÜÜ 
>
ÜÜ 
	mockDbSet
ÜÜ '
=
ÜÜ( )
new
ÜÜ* -
Mock
ÜÜ. 2
<
ÜÜ2 3
DbSet
ÜÜ3 8
<
ÜÜ8 9
Test
ÜÜ9 =
>
ÜÜ= >
>
ÜÜ> ?
(
ÜÜ? @
)
ÜÜ@ A
;
ÜÜA B
	mockDbSet
áá 
.
áá #
SetupAsQueryableAsync
áá +
(
áá+ ,
mockedTests
áá, 7
)
áá7 8
;
áá8 9
Mock
ââ 
<
ââ "
IQueryableUnitOfWork
ââ %
>
ââ% &
mockUnitOfWork
ââ' 5
=
ââ6 7
new
ââ8 ;
Mock
ââ< @
<
ââ@ A"
IQueryableUnitOfWork
ââA U
>
ââU V
(
ââV W
)
ââW X
;
ââX Y
mockUnitOfWork
ää 
.
ää 
Setup
ää  
(
ää  !
p
ää! "
=>
ää# %
p
ää& '
.
ää' (
Set
ää( +
<
ää+ ,
Test
ää, 0
>
ää0 1
(
ää1 2
)
ää2 3
)
ää3 4
.
ää4 5
Returns
ää5 <
(
ää< =
	mockDbSet
ää= F
.
ääF G
Object
ääG M
)
ääM N
;
ääN O
ISpecification
åå 
<
åå 
Test
åå 
>
åå  
spec
åå! %
=
åå& '
new
åå( +!
DirectSpecification
åå, ?
<
åå? @
Test
åå@ D
>
ååD E
(
ååE F
t
ååF G
=>
ååH J
t
ååK L
.
ååL M
Active
ååM S
)
ååS T
;
ååT U
IRepository
çç 
<
çç 
Test
çç 
>
çç 
testRepository
çç ,
=
çç- .
new
çç/ 2#
GenericTestRepository
çç3 H
(
ççH I
mockUnitOfWork
ççI W
.
ççW X
Object
ççX ^
)
çç^ _
;
çç_ `
ICollection
éé 
<
éé 
Test
éé 
>
éé 
tests
éé #
=
éé$ %
testRepository
éé& 4
.
éé4 5
	FindAsync
éé5 >
(
éé> ?
spec
éé? C
)
ééC D
.
ééD E

GetAwaiter
ééE O
(
ééO P
)
ééP Q
.
ééQ R
	GetResult
ééR [
(
éé[ \
)
éé\ ]
;
éé] ^
mockUnitOfWork
êê 
.
êê 
Verify
êê !
(
êê! "
x
êê" #
=>
êê$ &
x
êê' (
.
êê( )
Set
êê) ,
<
êê, -
Test
êê- 1
>
êê1 2
(
êê2 3
)
êê3 4
,
êê4 5
Times
êê6 ;
.
êê; <
Once
êê< @
)
êê@ A
;
êêA B
tests
ëë 
.
ëë 
Should
ëë 
(
ëë 
)
ëë 
.
ëë 
NotBeNullOrEmpty
ëë +
(
ëë+ ,
)
ëë, -
.
ëë- .
And
ëë. 1
.
ëë1 2
OnlyContain
ëë2 =
(
ëë= >
x
ëë> ?
=>
ëë@ B
x
ëëC D
.
ëëD E
Active
ëëE K
,
ëëK L
$str
ëëM e
)
ëëe f
.
ëëf g
And
ëëg j
.
ëëj k
HaveSameCount
ëëk x
(
ëëx y
mockedTestsëëy Ñ
.ëëÑ Ö
WhereëëÖ ä
(ëëä ã
pëëã å
=>ëëç è
pëëê ë
.ëëë í
Activeëëí ò
)ëëò ô
)ëëô ö
;ëëö õ
}
íí 	
[
îî 	
Fact
îî	 
]
îî 
public
ïï 
void
ïï D
6ThrowsArgumentNullExceptionGivenNullSpecificationAsync
ïï J
(
ïïJ K
)
ïïK L
{
ññ 	
Mock
óó 
<
óó "
IQueryableUnitOfWork
óó %
>
óó% &
mockUnitOfWork
óó' 5
=
óó6 7
new
óó8 ;
Mock
óó< @
<
óó@ A"
IQueryableUnitOfWork
óóA U
>
óóU V
(
óóV W
)
óóW X
;
óóX Y
Action
ôô 
act
ôô 
=
ôô 
(
ôô 
)
ôô 
=>
ôô 
{
öö 
ISpecification
õõ 
<
õõ 
Test
õõ #
>
õõ# $
spec
õõ% )
=
õõ* +
null
õõ, 0
;
õõ0 1
IRepository
úú 
<
úú 
Test
úú  
>
úú  !
testRepository
úú" 0
=
úú1 2
new
úú3 6#
GenericTestRepository
úú7 L
(
úúL M
mockUnitOfWork
úúM [
.
úú[ \
Object
úú\ b
)
úúb c
;
úúc d
testRepository
ùù 
.
ùù 
	FindAsync
ùù (
(
ùù( )
spec
ùù) -
)
ùù- .
.
ùù. /

GetAwaiter
ùù/ 9
(
ùù9 :
)
ùù: ;
.
ùù; <
	GetResult
ùù< E
(
ùùE F
)
ùùF G
;
ùùG H
}
ûû 
;
ûû 
act
†† 
.
†† 
Should
†† 
(
†† 
)
†† 
.
†† 
Throw
†† 
<
†† #
ArgumentNullException
†† 4
>
††4 5
(
††5 6
)
††6 7
.
††7 8
And
††8 ;
.
††; <
	ParamName
††< E
.
††E F
Should
††F L
(
††L M
)
††M N
.
††N O
Be
††O Q
(
††Q R
$str
††R a
)
††a b
;
††b c
}
°° 	
[
££ 	
Fact
££	 
]
££ 
public
§§ 
void
§§ ,
ReturnsEmptyGivenSpecification
§§ 2
(
§§2 3
)
§§3 4
{
•• 	
List
¶¶ 
<
¶¶ 
Test
¶¶ 
>
¶¶ 
mockedTests
¶¶ "
=
¶¶# $
	MockTests
¶¶% .
(
¶¶. /
)
¶¶/ 0
;
¶¶0 1
Mock
®® 
<
®® 
DbSet
®® 
<
®® 
Test
®® 
>
®® 
>
®® 
	mockDbSet
®® '
=
®®( )
new
®®* -
Mock
®®. 2
<
®®2 3
DbSet
®®3 8
<
®®8 9
Test
®®9 =
>
®®= >
>
®®> ?
(
®®? @
)
®®@ A
;
®®A B
	mockDbSet
©© 
.
©© 
SetupAsQueryable
©© &
(
©©& '
mockedTests
©©' 2
)
©©2 3
;
©©3 4
Mock
´´ 
<
´´ "
IQueryableUnitOfWork
´´ %
>
´´% &
mockUnitOfWork
´´' 5
=
´´6 7
new
´´8 ;
Mock
´´< @
<
´´@ A"
IQueryableUnitOfWork
´´A U
>
´´U V
(
´´V W
)
´´W X
;
´´X Y
mockUnitOfWork
¨¨ 
.
¨¨ 
Setup
¨¨  
(
¨¨  !
p
¨¨! "
=>
¨¨# %
p
¨¨& '
.
¨¨' (
Set
¨¨( +
<
¨¨+ ,
Test
¨¨, 0
>
¨¨0 1
(
¨¨1 2
)
¨¨2 3
)
¨¨3 4
.
¨¨4 5
Returns
¨¨5 <
(
¨¨< =
	mockDbSet
¨¨= F
.
¨¨F G
Object
¨¨G M
)
¨¨M N
;
¨¨N O
ISpecification
ÆÆ 
<
ÆÆ 
Test
ÆÆ 
>
ÆÆ  
spec
ÆÆ! %
=
ÆÆ& '
new
ÆÆ( +!
DirectSpecification
ÆÆ, ?
<
ÆÆ? @
Test
ÆÆ@ D
>
ÆÆD E
(
ÆÆE F
t
ÆÆF G
=>
ÆÆH J
t
ÆÆK L
.
ÆÆL M
Id
ÆÆM O
==
ÆÆP R
$num
ÆÆS T
)
ÆÆT U
;
ÆÆU V
IRepository
ØØ 
<
ØØ 
Test
ØØ 
>
ØØ 
testRepository
ØØ ,
=
ØØ- .
new
ØØ/ 2#
GenericTestRepository
ØØ3 H
(
ØØH I
mockUnitOfWork
ØØI W
.
ØØW X
Object
ØØX ^
)
ØØ^ _
;
ØØ_ `
ICollection
∞∞ 
<
∞∞ 
Test
∞∞ 
>
∞∞ 
tests
∞∞ #
=
∞∞$ %
testRepository
∞∞& 4
.
∞∞4 5
Find
∞∞5 9
(
∞∞9 :
spec
∞∞: >
)
∞∞> ?
;
∞∞? @
mockUnitOfWork
≤≤ 
.
≤≤ 
Verify
≤≤ !
(
≤≤! "
x
≤≤" #
=>
≤≤$ &
x
≤≤' (
.
≤≤( )
Set
≤≤) ,
<
≤≤, -
Test
≤≤- 1
>
≤≤1 2
(
≤≤2 3
)
≤≤3 4
,
≤≤4 5
Times
≤≤6 ;
.
≤≤; <
Once
≤≤< @
)
≤≤@ A
;
≤≤A B
tests
≥≥ 
.
≥≥ 
Should
≥≥ 
(
≥≥ 
)
≥≥ 
.
≥≥ 
	NotBeNull
≥≥ $
(
≥≥$ %
)
≥≥% &
.
≥≥& '
And
≥≥' *
.
≥≥* +
BeEmpty
≥≥+ 2
(
≥≥2 3
)
≥≥3 4
;
≥≥4 5
}
¥¥ 	
[
∂∂ 	
Fact
∂∂	 
]
∂∂ 
public
∑∑ 
void
∑∑ 1
#ReturnsEmptyGivenSpecificationAsync
∑∑ 7
(
∑∑7 8
)
∑∑8 9
{
∏∏ 	
List
ππ 
<
ππ 
Test
ππ 
>
ππ 
mockedTests
ππ "
=
ππ# $
	MockTests
ππ% .
(
ππ. /
)
ππ/ 0
;
ππ0 1
Mock
ªª 
<
ªª 
DbSet
ªª 
<
ªª 
Test
ªª 
>
ªª 
>
ªª 
	mockDbSet
ªª '
=
ªª( )
new
ªª* -
Mock
ªª. 2
<
ªª2 3
DbSet
ªª3 8
<
ªª8 9
Test
ªª9 =
>
ªª= >
>
ªª> ?
(
ªª? @
)
ªª@ A
;
ªªA B
	mockDbSet
ºº 
.
ºº #
SetupAsQueryableAsync
ºº +
(
ºº+ ,
mockedTests
ºº, 7
)
ºº7 8
;
ºº8 9
Mock
ææ 
<
ææ "
IQueryableUnitOfWork
ææ %
>
ææ% &
mockUnitOfWork
ææ' 5
=
ææ6 7
new
ææ8 ;
Mock
ææ< @
<
ææ@ A"
IQueryableUnitOfWork
ææA U
>
ææU V
(
ææV W
)
ææW X
;
ææX Y
mockUnitOfWork
øø 
.
øø 
Setup
øø  
(
øø  !
p
øø! "
=>
øø# %
p
øø& '
.
øø' (
Set
øø( +
<
øø+ ,
Test
øø, 0
>
øø0 1
(
øø1 2
)
øø2 3
)
øø3 4
.
øø4 5
Returns
øø5 <
(
øø< =
	mockDbSet
øø= F
.
øøF G
Object
øøG M
)
øøM N
;
øøN O
ISpecification
¡¡ 
<
¡¡ 
Test
¡¡ 
>
¡¡  
spec
¡¡! %
=
¡¡& '
new
¡¡( +!
DirectSpecification
¡¡, ?
<
¡¡? @
Test
¡¡@ D
>
¡¡D E
(
¡¡E F
t
¡¡F G
=>
¡¡H J
t
¡¡K L
.
¡¡L M
Id
¡¡M O
==
¡¡P R
$num
¡¡S T
)
¡¡T U
;
¡¡U V
IRepository
√√ 
<
√√ 
Test
√√ 
>
√√ 
testRepository
√√ ,
=
√√- .
new
√√/ 2#
GenericTestRepository
√√3 H
(
√√H I
mockUnitOfWork
√√I W
.
√√W X
Object
√√X ^
)
√√^ _
;
√√_ `
ICollection
ƒƒ 
<
ƒƒ 
Test
ƒƒ 
>
ƒƒ 
tests
ƒƒ #
=
ƒƒ$ %
testRepository
ƒƒ& 4
.
ƒƒ4 5
	FindAsync
ƒƒ5 >
(
ƒƒ> ?
spec
ƒƒ? C
)
ƒƒC D
.
ƒƒD E

GetAwaiter
ƒƒE O
(
ƒƒO P
)
ƒƒP Q
.
ƒƒQ R
	GetResult
ƒƒR [
(
ƒƒ[ \
)
ƒƒ\ ]
;
ƒƒ] ^
mockUnitOfWork
∆∆ 
.
∆∆ 
Verify
∆∆ !
(
∆∆! "
x
∆∆" #
=>
∆∆$ &
x
∆∆' (
.
∆∆( )
Set
∆∆) ,
<
∆∆, -
Test
∆∆- 1
>
∆∆1 2
(
∆∆2 3
)
∆∆3 4
,
∆∆4 5
Times
∆∆6 ;
.
∆∆; <
Once
∆∆< @
)
∆∆@ A
;
∆∆A B
tests
«« 
.
«« 
Should
«« 
(
«« 
)
«« 
.
«« 
	NotBeNull
«« $
(
««$ %
)
««% &
.
««& '
And
««' *
.
««* +
BeEmpty
««+ 2
(
««2 3
)
««3 4
;
««4 5
}
»» 	
[
   	
Fact
  	 
]
   
public
ÀÀ 
void
ÀÀ H
:ReturnsFirstPageOrderedAscendingGivenPageSize10AndTotal100
ÀÀ N
(
ÀÀN O
)
ÀÀO P
{
ÃÃ 	
List
ÕÕ 
<
ÕÕ 
Test
ÕÕ 
>
ÕÕ 
mockedTests
ÕÕ "
=
ÕÕ# $
	MockTests
ÕÕ% .
(
ÕÕ. /
$num
ÕÕ/ 2
)
ÕÕ2 3
;
ÕÕ3 4
Mock
œœ 
<
œœ 
DbSet
œœ 
<
œœ 
Test
œœ 
>
œœ 
>
œœ 
	mockDbSet
œœ '
=
œœ( )
new
œœ* -
Mock
œœ. 2
<
œœ2 3
DbSet
œœ3 8
<
œœ8 9
Test
œœ9 =
>
œœ= >
>
œœ> ?
(
œœ? @
)
œœ@ A
;
œœA B
	mockDbSet
–– 
.
–– 
SetupAsQueryable
–– &
(
––& '
mockedTests
––' 2
)
––2 3
;
––3 4
Mock
““ 
<
““ "
IQueryableUnitOfWork
““ %
>
““% &
mockUnitOfWork
““' 5
=
““6 7
new
““8 ;
Mock
““< @
<
““@ A"
IQueryableUnitOfWork
““A U
>
““U V
(
““V W
)
““W X
;
““X Y
mockUnitOfWork
”” 
.
”” 
Setup
””  
(
””  !
p
””! "
=>
””# %
p
””& '
.
””' (
Set
””( +
<
””+ ,
Test
””, 0
>
””0 1
(
””1 2
)
””2 3
)
””3 4
.
””4 5
Returns
””5 <
(
””< =
	mockDbSet
””= F
.
””F G
Object
””G M
)
””M N
;
””N O
IPagination
’’ 

pagination
’’ "
=
’’# $
new
’’% (

Pagination
’’) 3
(
’’3 4
$num
’’4 5
,
’’5 6
$num
’’7 9
)
’’9 :
;
’’: ;
IRepository
÷÷ 
<
÷÷ 
Test
÷÷ 
>
÷÷ 
testRepository
÷÷ ,
=
÷÷- .
new
÷÷/ 2#
GenericTestRepository
÷÷3 H
(
÷÷H I
mockUnitOfWork
÷÷I W
.
÷÷W X
Object
÷÷X ^
)
÷÷^ _
;
÷÷_ `

IPagedList
◊◊ 
<
◊◊ 
Test
◊◊ 
>
◊◊ 
tests
◊◊ "
=
◊◊# $
testRepository
◊◊% 3
.
◊◊3 4
Find
◊◊4 8
(
◊◊8 9

pagination
◊◊9 C
)
◊◊C D
;
◊◊D E
mockUnitOfWork
ŸŸ 
.
ŸŸ 
Verify
ŸŸ !
(
ŸŸ! "
x
ŸŸ" #
=>
ŸŸ$ &
x
ŸŸ' (
.
ŸŸ( )
Set
ŸŸ) ,
<
ŸŸ, -
Test
ŸŸ- 1
>
ŸŸ1 2
(
ŸŸ2 3
)
ŸŸ3 4
,
ŸŸ4 5
Times
ŸŸ6 ;
.
ŸŸ; <
Once
ŸŸ< @
)
ŸŸ@ A
;
ŸŸA B
tests
⁄⁄ 
.
⁄⁄ 
Should
⁄⁄ 
(
⁄⁄ 
)
⁄⁄ 
.
⁄⁄ 
	NotBeNull
⁄⁄ $
(
⁄⁄$ %
)
⁄⁄% &
.
⁄⁄& '
And
⁄⁄' *
.
⁄⁄* +
	HaveCount
⁄⁄+ 4
(
⁄⁄4 5
$num
⁄⁄5 7
)
⁄⁄7 8
;
⁄⁄8 9
tests
€€ 
.
€€ 

TotalCount
€€ 
.
€€ 
Should
€€ #
(
€€# $
)
€€$ %
.
€€% &
Be
€€& (
(
€€( )
$num
€€) ,
)
€€, -
;
€€- .
tests
‹‹ 
.
‹‹ 
	PageCount
‹‹ 
.
‹‹ 
Should
‹‹ "
(
‹‹" #
)
‹‹# $
.
‹‹$ %
Be
‹‹% '
(
‹‹' (
$num
‹‹( *
)
‹‹* +
;
‹‹+ ,
tests
›› 
.
›› 
First
›› 
(
›› 
)
›› 
.
›› 
Should
››  
(
››  !
)
››! "
.
››" #
Be
››# %
(
››% &
mockedTests
››& 1
[
››1 2
$num
››2 3
]
››3 4
)
››4 5
;
››5 6
tests
ﬁﬁ 
.
ﬁﬁ 
Last
ﬁﬁ 
(
ﬁﬁ 
)
ﬁﬁ 
.
ﬁﬁ 
Should
ﬁﬁ 
(
ﬁﬁ  
)
ﬁﬁ  !
.
ﬁﬁ! "
Be
ﬁﬁ" $
(
ﬁﬁ$ %
mockedTests
ﬁﬁ% 0
[
ﬁﬁ0 1
$num
ﬁﬁ1 2
]
ﬁﬁ2 3
)
ﬁﬁ3 4
;
ﬁﬁ4 5
}
ﬂﬂ 	
[
·· 	
Fact
··	 
]
·· 
public
‚‚ 
void
‚‚ I
;ReturnsFirstPageOrderedDescendingGivenPageSize10AndTotal100
‚‚ O
(
‚‚O P
)
‚‚P Q
{
„„ 	
List
‰‰ 
<
‰‰ 
Test
‰‰ 
>
‰‰ 
mockedTests
‰‰ "
=
‰‰# $
	MockTests
‰‰% .
(
‰‰. /
$num
‰‰/ 2
)
‰‰2 3
;
‰‰3 4
Mock
ÊÊ 
<
ÊÊ 
DbSet
ÊÊ 
<
ÊÊ 
Test
ÊÊ 
>
ÊÊ 
>
ÊÊ 
	mockDbSet
ÊÊ '
=
ÊÊ( )
new
ÊÊ* -
Mock
ÊÊ. 2
<
ÊÊ2 3
DbSet
ÊÊ3 8
<
ÊÊ8 9
Test
ÊÊ9 =
>
ÊÊ= >
>
ÊÊ> ?
(
ÊÊ? @
)
ÊÊ@ A
;
ÊÊA B
	mockDbSet
ÁÁ 
.
ÁÁ 
SetupAsQueryable
ÁÁ &
(
ÁÁ& '
mockedTests
ÁÁ' 2
)
ÁÁ2 3
;
ÁÁ3 4
Mock
ÈÈ 
<
ÈÈ "
IQueryableUnitOfWork
ÈÈ %
>
ÈÈ% &
mockUnitOfWork
ÈÈ' 5
=
ÈÈ6 7
new
ÈÈ8 ;
Mock
ÈÈ< @
<
ÈÈ@ A"
IQueryableUnitOfWork
ÈÈA U
>
ÈÈU V
(
ÈÈV W
)
ÈÈW X
;
ÈÈX Y
mockUnitOfWork
ÍÍ 
.
ÍÍ 
Setup
ÍÍ  
(
ÍÍ  !
p
ÍÍ! "
=>
ÍÍ# %
p
ÍÍ& '
.
ÍÍ' (
Set
ÍÍ( +
<
ÍÍ+ ,
Test
ÍÍ, 0
>
ÍÍ0 1
(
ÍÍ1 2
)
ÍÍ2 3
)
ÍÍ3 4
.
ÍÍ4 5
Returns
ÍÍ5 <
(
ÍÍ< =
	mockDbSet
ÍÍ= F
.
ÍÍF G
Object
ÍÍG M
)
ÍÍM N
;
ÍÍN O
IPagination
ÏÏ 

pagination
ÏÏ "
=
ÏÏ# $
new
ÏÏ% (

Pagination
ÏÏ) 3
(
ÏÏ3 4
$num
ÏÏ4 5
,
ÏÏ5 6
$num
ÏÏ7 9
,
ÏÏ9 :
$str
ÏÏ; ?
,
ÏÏ? @
false
ÏÏA F
)
ÏÏF G
;
ÏÏG H
IRepository
ÌÌ 
<
ÌÌ 
Test
ÌÌ 
>
ÌÌ 
testRepository
ÌÌ ,
=
ÌÌ- .
new
ÌÌ/ 2#
GenericTestRepository
ÌÌ3 H
(
ÌÌH I
mockUnitOfWork
ÌÌI W
.
ÌÌW X
Object
ÌÌX ^
)
ÌÌ^ _
;
ÌÌ_ `

IPagedList
ÓÓ 
<
ÓÓ 
Test
ÓÓ 
>
ÓÓ 
tests
ÓÓ "
=
ÓÓ# $
testRepository
ÓÓ% 3
.
ÓÓ3 4
Find
ÓÓ4 8
(
ÓÓ8 9

pagination
ÓÓ9 C
)
ÓÓC D
;
ÓÓD E
mockUnitOfWork
 
.
 
Verify
 !
(
! "
x
" #
=>
$ &
x
' (
.
( )
Set
) ,
<
, -
Test
- 1
>
1 2
(
2 3
)
3 4
,
4 5
Times
6 ;
.
; <
Once
< @
)
@ A
;
A B
tests
ÒÒ 
.
ÒÒ 
Should
ÒÒ 
(
ÒÒ 
)
ÒÒ 
.
ÒÒ 
	NotBeNull
ÒÒ $
(
ÒÒ$ %
)
ÒÒ% &
.
ÒÒ& '
And
ÒÒ' *
.
ÒÒ* +
	HaveCount
ÒÒ+ 4
(
ÒÒ4 5
$num
ÒÒ5 7
)
ÒÒ7 8
;
ÒÒ8 9
tests
ÚÚ 
.
ÚÚ 

TotalCount
ÚÚ 
.
ÚÚ 
Should
ÚÚ #
(
ÚÚ# $
)
ÚÚ$ %
.
ÚÚ% &
Be
ÚÚ& (
(
ÚÚ( )
$num
ÚÚ) ,
)
ÚÚ, -
;
ÚÚ- .
tests
ÛÛ 
.
ÛÛ 
	PageCount
ÛÛ 
.
ÛÛ 
Should
ÛÛ "
(
ÛÛ" #
)
ÛÛ# $
.
ÛÛ$ %
Be
ÛÛ% '
(
ÛÛ' (
$num
ÛÛ( *
)
ÛÛ* +
;
ÛÛ+ ,
tests
ÙÙ 
.
ÙÙ 
First
ÙÙ 
(
ÙÙ 
)
ÙÙ 
.
ÙÙ 
Should
ÙÙ  
(
ÙÙ  !
)
ÙÙ! "
.
ÙÙ" #
Be
ÙÙ# %
(
ÙÙ% &
mockedTests
ÙÙ& 1
[
ÙÙ1 2
$num
ÙÙ2 4
]
ÙÙ4 5
)
ÙÙ5 6
;
ÙÙ6 7
tests
ıı 
.
ıı 
Last
ıı 
(
ıı 
)
ıı 
.
ıı 
Should
ıı 
(
ıı  
)
ıı  !
.
ıı! "
Be
ıı" $
(
ıı$ %
mockedTests
ıı% 0
[
ıı0 1
$num
ıı1 3
]
ıı3 4
)
ıı4 5
;
ıı5 6
}
ˆˆ 	
[
¯¯ 	
Fact
¯¯	 
]
¯¯ 
public
˘˘ 
void
˘˘ M
?ReturnsFirstPageOrderedAscendingGivenPageSize10AndTotal100Async
˘˘ S
(
˘˘S T
)
˘˘T U
{
˙˙ 	
List
˚˚ 
<
˚˚ 
Test
˚˚ 
>
˚˚ 
mockedTests
˚˚ "
=
˚˚# $
	MockTests
˚˚% .
(
˚˚. /
$num
˚˚/ 2
)
˚˚2 3
;
˚˚3 4
Mock
˝˝ 
<
˝˝ 
DbSet
˝˝ 
<
˝˝ 
Test
˝˝ 
>
˝˝ 
>
˝˝ 
	mockDbSet
˝˝ '
=
˝˝( )
new
˝˝* -
Mock
˝˝. 2
<
˝˝2 3
DbSet
˝˝3 8
<
˝˝8 9
Test
˝˝9 =
>
˝˝= >
>
˝˝> ?
(
˝˝? @
)
˝˝@ A
;
˝˝A B
	mockDbSet
˛˛ 
.
˛˛ #
SetupAsQueryableAsync
˛˛ +
(
˛˛+ ,
mockedTests
˛˛, 7
)
˛˛7 8
;
˛˛8 9
Mock
ÄÄ 
<
ÄÄ "
IQueryableUnitOfWork
ÄÄ %
>
ÄÄ% &
mockUnitOfWork
ÄÄ' 5
=
ÄÄ6 7
new
ÄÄ8 ;
Mock
ÄÄ< @
<
ÄÄ@ A"
IQueryableUnitOfWork
ÄÄA U
>
ÄÄU V
(
ÄÄV W
)
ÄÄW X
;
ÄÄX Y
mockUnitOfWork
ÅÅ 
.
ÅÅ 
Setup
ÅÅ  
(
ÅÅ  !
p
ÅÅ! "
=>
ÅÅ# %
p
ÅÅ& '
.
ÅÅ' (
Set
ÅÅ( +
<
ÅÅ+ ,
Test
ÅÅ, 0
>
ÅÅ0 1
(
ÅÅ1 2
)
ÅÅ2 3
)
ÅÅ3 4
.
ÅÅ4 5
Returns
ÅÅ5 <
(
ÅÅ< =
	mockDbSet
ÅÅ= F
.
ÅÅF G
Object
ÅÅG M
)
ÅÅM N
;
ÅÅN O
IPagination
ÉÉ 

pagination
ÉÉ "
=
ÉÉ# $
new
ÉÉ% (

Pagination
ÉÉ) 3
(
ÉÉ3 4
$num
ÉÉ4 5
,
ÉÉ5 6
$num
ÉÉ7 9
)
ÉÉ9 :
;
ÉÉ: ;
IRepository
ÑÑ 
<
ÑÑ 
Test
ÑÑ 
>
ÑÑ 
testRepository
ÑÑ ,
=
ÑÑ- .
new
ÑÑ/ 2#
GenericTestRepository
ÑÑ3 H
(
ÑÑH I
mockUnitOfWork
ÑÑI W
.
ÑÑW X
Object
ÑÑX ^
)
ÑÑ^ _
;
ÑÑ_ `

IPagedList
ÖÖ 
<
ÖÖ 
Test
ÖÖ 
>
ÖÖ 
tests
ÖÖ "
=
ÖÖ# $
testRepository
ÖÖ% 3
.
ÖÖ3 4
	FindAsync
ÖÖ4 =
(
ÖÖ= >

pagination
ÖÖ> H
)
ÖÖH I
.
ÖÖI J

GetAwaiter
ÖÖJ T
(
ÖÖT U
)
ÖÖU V
.
ÖÖV W
	GetResult
ÖÖW `
(
ÖÖ` a
)
ÖÖa b
;
ÖÖb c
mockUnitOfWork
áá 
.
áá 
Verify
áá !
(
áá! "
x
áá" #
=>
áá$ &
x
áá' (
.
áá( )
Set
áá) ,
<
áá, -
Test
áá- 1
>
áá1 2
(
áá2 3
)
áá3 4
,
áá4 5
Times
áá6 ;
.
áá; <
Once
áá< @
)
áá@ A
;
ááA B
tests
àà 
.
àà 
Should
àà 
(
àà 
)
àà 
.
àà 
	NotBeNull
àà $
(
àà$ %
)
àà% &
.
àà& '
And
àà' *
.
àà* +
	HaveCount
àà+ 4
(
àà4 5
$num
àà5 7
)
àà7 8
;
àà8 9
tests
ââ 
.
ââ 

TotalCount
ââ 
.
ââ 
Should
ââ #
(
ââ# $
)
ââ$ %
.
ââ% &
Be
ââ& (
(
ââ( )
$num
ââ) ,
)
ââ, -
;
ââ- .
tests
ää 
.
ää 
	PageCount
ää 
.
ää 
Should
ää "
(
ää" #
)
ää# $
.
ää$ %
Be
ää% '
(
ää' (
$num
ää( *
)
ää* +
;
ää+ ,
tests
ãã 
.
ãã 
First
ãã 
(
ãã 
)
ãã 
.
ãã 
Should
ãã  
(
ãã  !
)
ãã! "
.
ãã" #
Be
ãã# %
(
ãã% &
mockedTests
ãã& 1
[
ãã1 2
$num
ãã2 3
]
ãã3 4
)
ãã4 5
;
ãã5 6
tests
åå 
.
åå 
Last
åå 
(
åå 
)
åå 
.
åå 
Should
åå 
(
åå  
)
åå  !
.
åå! "
Be
åå" $
(
åå$ %
mockedTests
åå% 0
[
åå0 1
$num
åå1 2
]
åå2 3
)
åå3 4
;
åå4 5
}
çç 	
[
èè 	
Fact
èè	 
]
èè 
public
êê 
void
êê N
@ReturnsFirstPageOrderedDescendingGivenPageSize10AndTotal100Async
êê T
(
êêT U
)
êêU V
{
ëë 	
List
íí 
<
íí 
Test
íí 
>
íí 
mockedTests
íí "
=
íí# $
	MockTests
íí% .
(
íí. /
$num
íí/ 2
)
íí2 3
;
íí3 4
Mock
îî 
<
îî 
DbSet
îî 
<
îî 
Test
îî 
>
îî 
>
îî 
	mockDbSet
îî '
=
îî( )
new
îî* -
Mock
îî. 2
<
îî2 3
DbSet
îî3 8
<
îî8 9
Test
îî9 =
>
îî= >
>
îî> ?
(
îî? @
)
îî@ A
;
îîA B
	mockDbSet
ïï 
.
ïï #
SetupAsQueryableAsync
ïï +
(
ïï+ ,
mockedTests
ïï, 7
)
ïï7 8
;
ïï8 9
Mock
óó 
<
óó "
IQueryableUnitOfWork
óó %
>
óó% &
mockUnitOfWork
óó' 5
=
óó6 7
new
óó8 ;
Mock
óó< @
<
óó@ A"
IQueryableUnitOfWork
óóA U
>
óóU V
(
óóV W
)
óóW X
;
óóX Y
mockUnitOfWork
òò 
.
òò 
Setup
òò  
(
òò  !
p
òò! "
=>
òò# %
p
òò& '
.
òò' (
Set
òò( +
<
òò+ ,
Test
òò, 0
>
òò0 1
(
òò1 2
)
òò2 3
)
òò3 4
.
òò4 5
Returns
òò5 <
(
òò< =
	mockDbSet
òò= F
.
òòF G
Object
òòG M
)
òòM N
;
òòN O
IPagination
öö 

pagination
öö "
=
öö# $
new
öö% (

Pagination
öö) 3
(
öö3 4
$num
öö4 5
,
öö5 6
$num
öö7 9
,
öö9 :
$str
öö; ?
,
öö? @
false
ööA F
)
ööF G
;
ööG H
IRepository
õõ 
<
õõ 
Test
õõ 
>
õõ 
testRepository
õõ ,
=
õõ- .
new
õõ/ 2#
GenericTestRepository
õõ3 H
(
õõH I
mockUnitOfWork
õõI W
.
õõW X
Object
õõX ^
)
õõ^ _
;
õõ_ `

IPagedList
úú 
<
úú 
Test
úú 
>
úú 
tests
úú "
=
úú# $
testRepository
úú% 3
.
úú3 4
	FindAsync
úú4 =
(
úú= >

pagination
úú> H
)
úúH I
.
úúI J

GetAwaiter
úúJ T
(
úúT U
)
úúU V
.
úúV W
	GetResult
úúW `
(
úú` a
)
úúa b
;
úúb c
mockUnitOfWork
ûû 
.
ûû 
Verify
ûû !
(
ûû! "
x
ûû" #
=>
ûû$ &
x
ûû' (
.
ûû( )
Set
ûû) ,
<
ûû, -
Test
ûû- 1
>
ûû1 2
(
ûû2 3
)
ûû3 4
,
ûû4 5
Times
ûû6 ;
.
ûû; <
Once
ûû< @
)
ûû@ A
;
ûûA B
tests
üü 
.
üü 
Should
üü 
(
üü 
)
üü 
.
üü 
	NotBeNull
üü $
(
üü$ %
)
üü% &
.
üü& '
And
üü' *
.
üü* +
	HaveCount
üü+ 4
(
üü4 5
$num
üü5 7
)
üü7 8
;
üü8 9
tests
†† 
.
†† 

TotalCount
†† 
.
†† 
Should
†† #
(
††# $
)
††$ %
.
††% &
Be
††& (
(
††( )
$num
††) ,
)
††, -
;
††- .
tests
°° 
.
°° 
	PageCount
°° 
.
°° 
Should
°° "
(
°°" #
)
°°# $
.
°°$ %
Be
°°% '
(
°°' (
$num
°°( *
)
°°* +
;
°°+ ,
tests
¢¢ 
.
¢¢ 
First
¢¢ 
(
¢¢ 
)
¢¢ 
.
¢¢ 
Should
¢¢  
(
¢¢  !
)
¢¢! "
.
¢¢" #
Be
¢¢# %
(
¢¢% &
mockedTests
¢¢& 1
[
¢¢1 2
$num
¢¢2 4
]
¢¢4 5
)
¢¢5 6
;
¢¢6 7
tests
££ 
.
££ 
Last
££ 
(
££ 
)
££ 
.
££ 
Should
££ 
(
££  
)
££  !
.
££! "
Be
££" $
(
££$ %
mockedTests
££% 0
[
££0 1
$num
££1 3
]
££3 4
)
££4 5
;
££5 6
}
§§ 	
[
¶¶ 	
Fact
¶¶	 
]
¶¶ 
public
ßß 
void
ßß I
;ReturnsSecondPageOrderedAscendingGivenPageSize10AndTotal100
ßß O
(
ßßO P
)
ßßP Q
{
®® 	
List
©© 
<
©© 
Test
©© 
>
©© 
mockedTests
©© "
=
©©# $
	MockTests
©©% .
(
©©. /
$num
©©/ 2
)
©©2 3
;
©©3 4
Mock
´´ 
<
´´ 
DbSet
´´ 
<
´´ 
Test
´´ 
>
´´ 
>
´´ 
	mockDbSet
´´ '
=
´´( )
new
´´* -
Mock
´´. 2
<
´´2 3
DbSet
´´3 8
<
´´8 9
Test
´´9 =
>
´´= >
>
´´> ?
(
´´? @
)
´´@ A
;
´´A B
	mockDbSet
¨¨ 
.
¨¨ 
SetupAsQueryable
¨¨ &
(
¨¨& '
mockedTests
¨¨' 2
)
¨¨2 3
;
¨¨3 4
Mock
ÆÆ 
<
ÆÆ "
IQueryableUnitOfWork
ÆÆ %
>
ÆÆ% &
mockUnitOfWork
ÆÆ' 5
=
ÆÆ6 7
new
ÆÆ8 ;
Mock
ÆÆ< @
<
ÆÆ@ A"
IQueryableUnitOfWork
ÆÆA U
>
ÆÆU V
(
ÆÆV W
)
ÆÆW X
;
ÆÆX Y
mockUnitOfWork
ØØ 
.
ØØ 
Setup
ØØ  
(
ØØ  !
p
ØØ! "
=>
ØØ# %
p
ØØ& '
.
ØØ' (
Set
ØØ( +
<
ØØ+ ,
Test
ØØ, 0
>
ØØ0 1
(
ØØ1 2
)
ØØ2 3
)
ØØ3 4
.
ØØ4 5
Returns
ØØ5 <
(
ØØ< =
	mockDbSet
ØØ= F
.
ØØF G
Object
ØØG M
)
ØØM N
;
ØØN O
IPagination
±± 

pagination
±± "
=
±±# $
new
±±% (

Pagination
±±) 3
(
±±3 4
$num
±±4 5
,
±±5 6
$num
±±7 9
)
±±9 :
;
±±: ;
IRepository
≤≤ 
<
≤≤ 
Test
≤≤ 
>
≤≤ 
testRepository
≤≤ ,
=
≤≤- .
new
≤≤/ 2#
GenericTestRepository
≤≤3 H
(
≤≤H I
mockUnitOfWork
≤≤I W
.
≤≤W X
Object
≤≤X ^
)
≤≤^ _
;
≤≤_ `

IPagedList
≥≥ 
<
≥≥ 
Test
≥≥ 
>
≥≥ 
tests
≥≥ "
=
≥≥# $
testRepository
≥≥% 3
.
≥≥3 4
Find
≥≥4 8
(
≥≥8 9

pagination
≥≥9 C
)
≥≥C D
;
≥≥D E
mockUnitOfWork
µµ 
.
µµ 
Verify
µµ !
(
µµ! "
x
µµ" #
=>
µµ$ &
x
µµ' (
.
µµ( )
Set
µµ) ,
<
µµ, -
Test
µµ- 1
>
µµ1 2
(
µµ2 3
)
µµ3 4
,
µµ4 5
Times
µµ6 ;
.
µµ; <
Once
µµ< @
)
µµ@ A
;
µµA B
tests
∂∂ 
.
∂∂ 
Should
∂∂ 
(
∂∂ 
)
∂∂ 
.
∂∂ 
	NotBeNull
∂∂ $
(
∂∂$ %
)
∂∂% &
.
∂∂& '
And
∂∂' *
.
∂∂* +
	HaveCount
∂∂+ 4
(
∂∂4 5
$num
∂∂5 7
)
∂∂7 8
;
∂∂8 9
tests
∑∑ 
.
∑∑ 

TotalCount
∑∑ 
.
∑∑ 
Should
∑∑ #
(
∑∑# $
)
∑∑$ %
.
∑∑% &
Be
∑∑& (
(
∑∑( )
$num
∑∑) ,
)
∑∑, -
;
∑∑- .
tests
∏∏ 
.
∏∏ 
	PageCount
∏∏ 
.
∏∏ 
Should
∏∏ "
(
∏∏" #
)
∏∏# $
.
∏∏$ %
Be
∏∏% '
(
∏∏' (
$num
∏∏( *
)
∏∏* +
;
∏∏+ ,
tests
ππ 
.
ππ 
First
ππ 
(
ππ 
)
ππ 
.
ππ 
Should
ππ  
(
ππ  !
)
ππ! "
.
ππ" #
Be
ππ# %
(
ππ% &
mockedTests
ππ& 1
[
ππ1 2
$num
ππ2 4
]
ππ4 5
)
ππ5 6
;
ππ6 7
tests
∫∫ 
.
∫∫ 
Last
∫∫ 
(
∫∫ 
)
∫∫ 
.
∫∫ 
Should
∫∫ 
(
∫∫  
)
∫∫  !
.
∫∫! "
Be
∫∫" $
(
∫∫$ %
mockedTests
∫∫% 0
[
∫∫0 1
$num
∫∫1 3
]
∫∫3 4
)
∫∫4 5
;
∫∫5 6
}
ªª 	
[
ΩΩ 	
Fact
ΩΩ	 
]
ΩΩ 
public
ææ 
void
ææ J
<ReturnsSecondPageOrderedDescendingGivenPageSize10AndTotal100
ææ P
(
ææP Q
)
ææQ R
{
øø 	
List
¿¿ 
<
¿¿ 
Test
¿¿ 
>
¿¿ 
mockedTests
¿¿ "
=
¿¿# $
	MockTests
¿¿% .
(
¿¿. /
$num
¿¿/ 2
)
¿¿2 3
;
¿¿3 4
Mock
¬¬ 
<
¬¬ 
DbSet
¬¬ 
<
¬¬ 
Test
¬¬ 
>
¬¬ 
>
¬¬ 
	mockDbSet
¬¬ '
=
¬¬( )
new
¬¬* -
Mock
¬¬. 2
<
¬¬2 3
DbSet
¬¬3 8
<
¬¬8 9
Test
¬¬9 =
>
¬¬= >
>
¬¬> ?
(
¬¬? @
)
¬¬@ A
;
¬¬A B
	mockDbSet
√√ 
.
√√ 
SetupAsQueryable
√√ &
(
√√& '
mockedTests
√√' 2
)
√√2 3
;
√√3 4
Mock
≈≈ 
<
≈≈ "
IQueryableUnitOfWork
≈≈ %
>
≈≈% &
mockUnitOfWork
≈≈' 5
=
≈≈6 7
new
≈≈8 ;
Mock
≈≈< @
<
≈≈@ A"
IQueryableUnitOfWork
≈≈A U
>
≈≈U V
(
≈≈V W
)
≈≈W X
;
≈≈X Y
mockUnitOfWork
∆∆ 
.
∆∆ 
Setup
∆∆  
(
∆∆  !
p
∆∆! "
=>
∆∆# %
p
∆∆& '
.
∆∆' (
Set
∆∆( +
<
∆∆+ ,
Test
∆∆, 0
>
∆∆0 1
(
∆∆1 2
)
∆∆2 3
)
∆∆3 4
.
∆∆4 5
Returns
∆∆5 <
(
∆∆< =
	mockDbSet
∆∆= F
.
∆∆F G
Object
∆∆G M
)
∆∆M N
;
∆∆N O
IPagination
»» 

pagination
»» "
=
»»# $
new
»»% (

Pagination
»») 3
(
»»3 4
$num
»»4 5
,
»»5 6
$num
»»7 9
,
»»9 :
$str
»»; ?
,
»»? @
false
»»A F
)
»»F G
;
»»G H
IRepository
…… 
<
…… 
Test
…… 
>
…… 
testRepository
…… ,
=
……- .
new
……/ 2#
GenericTestRepository
……3 H
(
……H I
mockUnitOfWork
……I W
.
……W X
Object
……X ^
)
……^ _
;
……_ `

IPagedList
   
<
   
Test
   
>
   
tests
   "
=
  # $
testRepository
  % 3
.
  3 4
Find
  4 8
(
  8 9

pagination
  9 C
)
  C D
;
  D E
mockUnitOfWork
ÃÃ 
.
ÃÃ 
Verify
ÃÃ !
(
ÃÃ! "
x
ÃÃ" #
=>
ÃÃ$ &
x
ÃÃ' (
.
ÃÃ( )
Set
ÃÃ) ,
<
ÃÃ, -
Test
ÃÃ- 1
>
ÃÃ1 2
(
ÃÃ2 3
)
ÃÃ3 4
,
ÃÃ4 5
Times
ÃÃ6 ;
.
ÃÃ; <
Once
ÃÃ< @
)
ÃÃ@ A
;
ÃÃA B
tests
ÕÕ 
.
ÕÕ 
Should
ÕÕ 
(
ÕÕ 
)
ÕÕ 
.
ÕÕ 
	NotBeNull
ÕÕ $
(
ÕÕ$ %
)
ÕÕ% &
.
ÕÕ& '
And
ÕÕ' *
.
ÕÕ* +
	HaveCount
ÕÕ+ 4
(
ÕÕ4 5
$num
ÕÕ5 7
)
ÕÕ7 8
;
ÕÕ8 9
tests
ŒŒ 
.
ŒŒ 

TotalCount
ŒŒ 
.
ŒŒ 
Should
ŒŒ #
(
ŒŒ# $
)
ŒŒ$ %
.
ŒŒ% &
Be
ŒŒ& (
(
ŒŒ( )
$num
ŒŒ) ,
)
ŒŒ, -
;
ŒŒ- .
tests
œœ 
.
œœ 
	PageCount
œœ 
.
œœ 
Should
œœ "
(
œœ" #
)
œœ# $
.
œœ$ %
Be
œœ% '
(
œœ' (
$num
œœ( *
)
œœ* +
;
œœ+ ,
tests
–– 
.
–– 
First
–– 
(
–– 
)
–– 
.
–– 
Should
––  
(
––  !
)
––! "
.
––" #
Be
––# %
(
––% &
mockedTests
––& 1
[
––1 2
$num
––2 4
]
––4 5
)
––5 6
;
––6 7
tests
—— 
.
—— 
Last
—— 
(
—— 
)
—— 
.
—— 
Should
—— 
(
——  
)
——  !
.
——! "
Be
——" $
(
——$ %
mockedTests
——% 0
[
——0 1
$num
——1 3
]
——3 4
)
——4 5
;
——5 6
}
““ 	
[
‘‘ 	
Fact
‘‘	 
]
‘‘ 
public
’’ 
void
’’ N
@ReturnsSecondPageOrderedAscendingGivenPageSize10AndTotal100Async
’’ T
(
’’T U
)
’’U V
{
÷÷ 	
List
◊◊ 
<
◊◊ 
Test
◊◊ 
>
◊◊ 
mockedTests
◊◊ "
=
◊◊# $
	MockTests
◊◊% .
(
◊◊. /
$num
◊◊/ 2
)
◊◊2 3
;
◊◊3 4
Mock
ŸŸ 
<
ŸŸ 
DbSet
ŸŸ 
<
ŸŸ 
Test
ŸŸ 
>
ŸŸ 
>
ŸŸ 
	mockDbSet
ŸŸ '
=
ŸŸ( )
new
ŸŸ* -
Mock
ŸŸ. 2
<
ŸŸ2 3
DbSet
ŸŸ3 8
<
ŸŸ8 9
Test
ŸŸ9 =
>
ŸŸ= >
>
ŸŸ> ?
(
ŸŸ? @
)
ŸŸ@ A
;
ŸŸA B
	mockDbSet
⁄⁄ 
.
⁄⁄ #
SetupAsQueryableAsync
⁄⁄ +
(
⁄⁄+ ,
mockedTests
⁄⁄, 7
)
⁄⁄7 8
;
⁄⁄8 9
Mock
‹‹ 
<
‹‹ "
IQueryableUnitOfWork
‹‹ %
>
‹‹% &
mockUnitOfWork
‹‹' 5
=
‹‹6 7
new
‹‹8 ;
Mock
‹‹< @
<
‹‹@ A"
IQueryableUnitOfWork
‹‹A U
>
‹‹U V
(
‹‹V W
)
‹‹W X
;
‹‹X Y
mockUnitOfWork
›› 
.
›› 
Setup
››  
(
››  !
p
››! "
=>
››# %
p
››& '
.
››' (
Set
››( +
<
››+ ,
Test
››, 0
>
››0 1
(
››1 2
)
››2 3
)
››3 4
.
››4 5
Returns
››5 <
(
››< =
	mockDbSet
››= F
.
››F G
Object
››G M
)
››M N
;
››N O
IPagination
ﬂﬂ 

pagination
ﬂﬂ "
=
ﬂﬂ# $
new
ﬂﬂ% (

Pagination
ﬂﬂ) 3
(
ﬂﬂ3 4
$num
ﬂﬂ4 5
,
ﬂﬂ5 6
$num
ﬂﬂ7 9
)
ﬂﬂ9 :
;
ﬂﬂ: ;
IRepository
‡‡ 
<
‡‡ 
Test
‡‡ 
>
‡‡ 
testRepository
‡‡ ,
=
‡‡- .
new
‡‡/ 2#
GenericTestRepository
‡‡3 H
(
‡‡H I
mockUnitOfWork
‡‡I W
.
‡‡W X
Object
‡‡X ^
)
‡‡^ _
;
‡‡_ `

IPagedList
·· 
<
·· 
Test
·· 
>
·· 
tests
·· "
=
··# $
testRepository
··% 3
.
··3 4
	FindAsync
··4 =
(
··= >

pagination
··> H
)
··H I
.
··I J

GetAwaiter
··J T
(
··T U
)
··U V
.
··V W
	GetResult
··W `
(
··` a
)
··a b
;
··b c
mockUnitOfWork
„„ 
.
„„ 
Verify
„„ !
(
„„! "
x
„„" #
=>
„„$ &
x
„„' (
.
„„( )
Set
„„) ,
<
„„, -
Test
„„- 1
>
„„1 2
(
„„2 3
)
„„3 4
,
„„4 5
Times
„„6 ;
.
„„; <
Once
„„< @
)
„„@ A
;
„„A B
tests
‰‰ 
.
‰‰ 
Should
‰‰ 
(
‰‰ 
)
‰‰ 
.
‰‰ 
	NotBeNull
‰‰ $
(
‰‰$ %
)
‰‰% &
.
‰‰& '
And
‰‰' *
.
‰‰* +
	HaveCount
‰‰+ 4
(
‰‰4 5
$num
‰‰5 7
)
‰‰7 8
;
‰‰8 9
tests
ÂÂ 
.
ÂÂ 

TotalCount
ÂÂ 
.
ÂÂ 
Should
ÂÂ #
(
ÂÂ# $
)
ÂÂ$ %
.
ÂÂ% &
Be
ÂÂ& (
(
ÂÂ( )
$num
ÂÂ) ,
)
ÂÂ, -
;
ÂÂ- .
tests
ÊÊ 
.
ÊÊ 
	PageCount
ÊÊ 
.
ÊÊ 
Should
ÊÊ "
(
ÊÊ" #
)
ÊÊ# $
.
ÊÊ$ %
Be
ÊÊ% '
(
ÊÊ' (
$num
ÊÊ( *
)
ÊÊ* +
;
ÊÊ+ ,
tests
ÁÁ 
.
ÁÁ 
First
ÁÁ 
(
ÁÁ 
)
ÁÁ 
.
ÁÁ 
Should
ÁÁ  
(
ÁÁ  !
)
ÁÁ! "
.
ÁÁ" #
Be
ÁÁ# %
(
ÁÁ% &
mockedTests
ÁÁ& 1
[
ÁÁ1 2
$num
ÁÁ2 4
]
ÁÁ4 5
)
ÁÁ5 6
;
ÁÁ6 7
tests
ËË 
.
ËË 
Last
ËË 
(
ËË 
)
ËË 
.
ËË 
Should
ËË 
(
ËË  
)
ËË  !
.
ËË! "
Be
ËË" $
(
ËË$ %
mockedTests
ËË% 0
[
ËË0 1
$num
ËË1 3
]
ËË3 4
)
ËË4 5
;
ËË5 6
}
ÈÈ 	
[
ÎÎ 	
Fact
ÎÎ	 
]
ÎÎ 
public
ÏÏ 
void
ÏÏ O
AReturnsSecondPageOrderedDescendingGivenPageSize10AndTotal100Async
ÏÏ U
(
ÏÏU V
)
ÏÏV W
{
ÌÌ 	
List
ÓÓ 
<
ÓÓ 
Test
ÓÓ 
>
ÓÓ 
mockedTests
ÓÓ "
=
ÓÓ# $
	MockTests
ÓÓ% .
(
ÓÓ. /
$num
ÓÓ/ 2
)
ÓÓ2 3
;
ÓÓ3 4
Mock
 
<
 
DbSet
 
<
 
Test
 
>
 
>
 
	mockDbSet
 '
=
( )
new
* -
Mock
. 2
<
2 3
DbSet
3 8
<
8 9
Test
9 =
>
= >
>
> ?
(
? @
)
@ A
;
A B
	mockDbSet
ÒÒ 
.
ÒÒ #
SetupAsQueryableAsync
ÒÒ +
(
ÒÒ+ ,
mockedTests
ÒÒ, 7
)
ÒÒ7 8
;
ÒÒ8 9
Mock
ÛÛ 
<
ÛÛ "
IQueryableUnitOfWork
ÛÛ %
>
ÛÛ% &
mockUnitOfWork
ÛÛ' 5
=
ÛÛ6 7
new
ÛÛ8 ;
Mock
ÛÛ< @
<
ÛÛ@ A"
IQueryableUnitOfWork
ÛÛA U
>
ÛÛU V
(
ÛÛV W
)
ÛÛW X
;
ÛÛX Y
mockUnitOfWork
ÙÙ 
.
ÙÙ 
Setup
ÙÙ  
(
ÙÙ  !
p
ÙÙ! "
=>
ÙÙ# %
p
ÙÙ& '
.
ÙÙ' (
Set
ÙÙ( +
<
ÙÙ+ ,
Test
ÙÙ, 0
>
ÙÙ0 1
(
ÙÙ1 2
)
ÙÙ2 3
)
ÙÙ3 4
.
ÙÙ4 5
Returns
ÙÙ5 <
(
ÙÙ< =
	mockDbSet
ÙÙ= F
.
ÙÙF G
Object
ÙÙG M
)
ÙÙM N
;
ÙÙN O
IPagination
ˆˆ 

pagination
ˆˆ "
=
ˆˆ# $
new
ˆˆ% (

Pagination
ˆˆ) 3
(
ˆˆ3 4
$num
ˆˆ4 5
,
ˆˆ5 6
$num
ˆˆ7 9
,
ˆˆ9 :
$str
ˆˆ; ?
,
ˆˆ? @
false
ˆˆA F
)
ˆˆF G
;
ˆˆG H
IRepository
˜˜ 
<
˜˜ 
Test
˜˜ 
>
˜˜ 
testRepository
˜˜ ,
=
˜˜- .
new
˜˜/ 2#
GenericTestRepository
˜˜3 H
(
˜˜H I
mockUnitOfWork
˜˜I W
.
˜˜W X
Object
˜˜X ^
)
˜˜^ _
;
˜˜_ `

IPagedList
¯¯ 
<
¯¯ 
Test
¯¯ 
>
¯¯ 
tests
¯¯ "
=
¯¯# $
testRepository
¯¯% 3
.
¯¯3 4
	FindAsync
¯¯4 =
(
¯¯= >

pagination
¯¯> H
)
¯¯H I
.
¯¯I J

GetAwaiter
¯¯J T
(
¯¯T U
)
¯¯U V
.
¯¯V W
	GetResult
¯¯W `
(
¯¯` a
)
¯¯a b
;
¯¯b c
mockUnitOfWork
˙˙ 
.
˙˙ 
Verify
˙˙ !
(
˙˙! "
x
˙˙" #
=>
˙˙$ &
x
˙˙' (
.
˙˙( )
Set
˙˙) ,
<
˙˙, -
Test
˙˙- 1
>
˙˙1 2
(
˙˙2 3
)
˙˙3 4
,
˙˙4 5
Times
˙˙6 ;
.
˙˙; <
Once
˙˙< @
)
˙˙@ A
;
˙˙A B
tests
˚˚ 
.
˚˚ 
Should
˚˚ 
(
˚˚ 
)
˚˚ 
.
˚˚ 
	NotBeNull
˚˚ $
(
˚˚$ %
)
˚˚% &
.
˚˚& '
And
˚˚' *
.
˚˚* +
	HaveCount
˚˚+ 4
(
˚˚4 5
$num
˚˚5 7
)
˚˚7 8
;
˚˚8 9
tests
¸¸ 
.
¸¸ 

TotalCount
¸¸ 
.
¸¸ 
Should
¸¸ #
(
¸¸# $
)
¸¸$ %
.
¸¸% &
Be
¸¸& (
(
¸¸( )
$num
¸¸) ,
)
¸¸, -
;
¸¸- .
tests
˝˝ 
.
˝˝ 
	PageCount
˝˝ 
.
˝˝ 
Should
˝˝ "
(
˝˝" #
)
˝˝# $
.
˝˝$ %
Be
˝˝% '
(
˝˝' (
$num
˝˝( *
)
˝˝* +
;
˝˝+ ,
tests
˛˛ 
.
˛˛ 
First
˛˛ 
(
˛˛ 
)
˛˛ 
.
˛˛ 
Should
˛˛  
(
˛˛  !
)
˛˛! "
.
˛˛" #
Be
˛˛# %
(
˛˛% &
mockedTests
˛˛& 1
[
˛˛1 2
$num
˛˛2 4
]
˛˛4 5
)
˛˛5 6
;
˛˛6 7
tests
ˇˇ 
.
ˇˇ 
Last
ˇˇ 
(
ˇˇ 
)
ˇˇ 
.
ˇˇ 
Should
ˇˇ 
(
ˇˇ  
)
ˇˇ  !
.
ˇˇ! "
Be
ˇˇ" $
(
ˇˇ$ %
mockedTests
ˇˇ% 0
[
ˇˇ0 1
$num
ˇˇ1 3
]
ˇˇ3 4
)
ˇˇ4 5
;
ˇˇ5 6
}
ÄÄ 	
[
ÇÇ 	
Fact
ÇÇ	 
]
ÇÇ 
public
ÉÉ 
void
ÉÉ F
8ReturnsFirstPageOrderedAscendingGivenPageSize10AndTotal9
ÉÉ L
(
ÉÉL M
)
ÉÉM N
{
ÑÑ 	
List
ÖÖ 
<
ÖÖ 
Test
ÖÖ 
>
ÖÖ 
mockedTests
ÖÖ "
=
ÖÖ# $
	MockTests
ÖÖ% .
(
ÖÖ. /
$num
ÖÖ/ 0
)
ÖÖ0 1
;
ÖÖ1 2
Mock
áá 
<
áá 
DbSet
áá 
<
áá 
Test
áá 
>
áá 
>
áá 
	mockDbSet
áá '
=
áá( )
new
áá* -
Mock
áá. 2
<
áá2 3
DbSet
áá3 8
<
áá8 9
Test
áá9 =
>
áá= >
>
áá> ?
(
áá? @
)
áá@ A
;
ááA B
	mockDbSet
àà 
.
àà 
SetupAsQueryable
àà &
(
àà& '
mockedTests
àà' 2
)
àà2 3
;
àà3 4
Mock
ää 
<
ää "
IQueryableUnitOfWork
ää %
>
ää% &
mockUnitOfWork
ää' 5
=
ää6 7
new
ää8 ;
Mock
ää< @
<
ää@ A"
IQueryableUnitOfWork
ääA U
>
ääU V
(
ääV W
)
ääW X
;
ääX Y
mockUnitOfWork
ãã 
.
ãã 
Setup
ãã  
(
ãã  !
p
ãã! "
=>
ãã# %
p
ãã& '
.
ãã' (
Set
ãã( +
<
ãã+ ,
Test
ãã, 0
>
ãã0 1
(
ãã1 2
)
ãã2 3
)
ãã3 4
.
ãã4 5
Returns
ãã5 <
(
ãã< =
	mockDbSet
ãã= F
.
ããF G
Object
ããG M
)
ããM N
;
ããN O
IPagination
çç 

pagination
çç "
=
çç# $
new
çç% (

Pagination
çç) 3
(
çç3 4
$num
çç4 5
,
çç5 6
$num
çç7 9
)
çç9 :
;
çç: ;
IRepository
éé 
<
éé 
Test
éé 
>
éé 
testRepository
éé ,
=
éé- .
new
éé/ 2#
GenericTestRepository
éé3 H
(
ééH I
mockUnitOfWork
ééI W
.
ééW X
Object
ééX ^
)
éé^ _
;
éé_ `

IPagedList
èè 
<
èè 
Test
èè 
>
èè 
tests
èè "
=
èè# $
testRepository
èè% 3
.
èè3 4
Find
èè4 8
(
èè8 9

pagination
èè9 C
)
èèC D
;
èèD E
mockUnitOfWork
ëë 
.
ëë 
Verify
ëë !
(
ëë! "
x
ëë" #
=>
ëë$ &
x
ëë' (
.
ëë( )
Set
ëë) ,
<
ëë, -
Test
ëë- 1
>
ëë1 2
(
ëë2 3
)
ëë3 4
,
ëë4 5
Times
ëë6 ;
.
ëë; <
Once
ëë< @
)
ëë@ A
;
ëëA B
tests
íí 
.
íí 
Should
íí 
(
íí 
)
íí 
.
íí 
	NotBeNull
íí $
(
íí$ %
)
íí% &
.
íí& '
And
íí' *
.
íí* +
	HaveCount
íí+ 4
(
íí4 5
$num
íí5 6
)
íí6 7
;
íí7 8
tests
ìì 
.
ìì 

TotalCount
ìì 
.
ìì 
Should
ìì #
(
ìì# $
)
ìì$ %
.
ìì% &
Be
ìì& (
(
ìì( )
$num
ìì) *
)
ìì* +
;
ìì+ ,
tests
îî 
.
îî 
	PageCount
îî 
.
îî 
Should
îî "
(
îî" #
)
îî# $
.
îî$ %
Be
îî% '
(
îî' (
$num
îî( )
)
îî) *
;
îî* +
tests
ïï 
.
ïï 
First
ïï 
(
ïï 
)
ïï 
.
ïï 
Should
ïï  
(
ïï  !
)
ïï! "
.
ïï" #
Be
ïï# %
(
ïï% &
mockedTests
ïï& 1
[
ïï1 2
$num
ïï2 3
]
ïï3 4
)
ïï4 5
;
ïï5 6
tests
ññ 
.
ññ 
Last
ññ 
(
ññ 
)
ññ 
.
ññ 
Should
ññ 
(
ññ  
)
ññ  !
.
ññ! "
Be
ññ" $
(
ññ$ %
mockedTests
ññ% 0
[
ññ0 1
$num
ññ1 2
]
ññ2 3
)
ññ3 4
;
ññ4 5
}
óó 	
[
ôô 	
Fact
ôô	 
]
ôô 
public
öö 
void
öö K
=ReturnsFirstPageOrderedAscendingGivenPageSize10AndTotal9Async
öö Q
(
ööQ R
)
ööR S
{
õõ 	
List
úú 
<
úú 
Test
úú 
>
úú 
mockedTests
úú "
=
úú# $
	MockTests
úú% .
(
úú. /
$num
úú/ 0
)
úú0 1
;
úú1 2
Mock
ûû 
<
ûû 
DbSet
ûû 
<
ûû 
Test
ûû 
>
ûû 
>
ûû 
	mockDbSet
ûû '
=
ûû( )
new
ûû* -
Mock
ûû. 2
<
ûû2 3
DbSet
ûû3 8
<
ûû8 9
Test
ûû9 =
>
ûû= >
>
ûû> ?
(
ûû? @
)
ûû@ A
;
ûûA B
	mockDbSet
üü 
.
üü #
SetupAsQueryableAsync
üü +
(
üü+ ,
mockedTests
üü, 7
)
üü7 8
;
üü8 9
Mock
°° 
<
°° "
IQueryableUnitOfWork
°° %
>
°°% &
mockUnitOfWork
°°' 5
=
°°6 7
new
°°8 ;
Mock
°°< @
<
°°@ A"
IQueryableUnitOfWork
°°A U
>
°°U V
(
°°V W
)
°°W X
;
°°X Y
mockUnitOfWork
¢¢ 
.
¢¢ 
Setup
¢¢  
(
¢¢  !
p
¢¢! "
=>
¢¢# %
p
¢¢& '
.
¢¢' (
Set
¢¢( +
<
¢¢+ ,
Test
¢¢, 0
>
¢¢0 1
(
¢¢1 2
)
¢¢2 3
)
¢¢3 4
.
¢¢4 5
Returns
¢¢5 <
(
¢¢< =
	mockDbSet
¢¢= F
.
¢¢F G
Object
¢¢G M
)
¢¢M N
;
¢¢N O
IPagination
§§ 

pagination
§§ "
=
§§# $
new
§§% (

Pagination
§§) 3
(
§§3 4
$num
§§4 5
,
§§5 6
$num
§§7 9
)
§§9 :
;
§§: ;
IRepository
•• 
<
•• 
Test
•• 
>
•• 
testRepository
•• ,
=
••- .
new
••/ 2#
GenericTestRepository
••3 H
(
••H I
mockUnitOfWork
••I W
.
••W X
Object
••X ^
)
••^ _
;
••_ `

IPagedList
¶¶ 
<
¶¶ 
Test
¶¶ 
>
¶¶ 
tests
¶¶ "
=
¶¶# $
testRepository
¶¶% 3
.
¶¶3 4
	FindAsync
¶¶4 =
(
¶¶= >

pagination
¶¶> H
)
¶¶H I
.
¶¶I J

GetAwaiter
¶¶J T
(
¶¶T U
)
¶¶U V
.
¶¶V W
	GetResult
¶¶W `
(
¶¶` a
)
¶¶a b
;
¶¶b c
mockUnitOfWork
®® 
.
®® 
Verify
®® !
(
®®! "
x
®®" #
=>
®®$ &
x
®®' (
.
®®( )
Set
®®) ,
<
®®, -
Test
®®- 1
>
®®1 2
(
®®2 3
)
®®3 4
,
®®4 5
Times
®®6 ;
.
®®; <
Once
®®< @
)
®®@ A
;
®®A B
tests
©© 
.
©© 
Should
©© 
(
©© 
)
©© 
.
©© 
	NotBeNull
©© $
(
©©$ %
)
©©% &
.
©©& '
And
©©' *
.
©©* +
	HaveCount
©©+ 4
(
©©4 5
$num
©©5 6
)
©©6 7
;
©©7 8
tests
™™ 
.
™™ 

TotalCount
™™ 
.
™™ 
Should
™™ #
(
™™# $
)
™™$ %
.
™™% &
Be
™™& (
(
™™( )
$num
™™) *
)
™™* +
;
™™+ ,
tests
´´ 
.
´´ 
	PageCount
´´ 
.
´´ 
Should
´´ "
(
´´" #
)
´´# $
.
´´$ %
Be
´´% '
(
´´' (
$num
´´( )
)
´´) *
;
´´* +
tests
¨¨ 
.
¨¨ 
First
¨¨ 
(
¨¨ 
)
¨¨ 
.
¨¨ 
Should
¨¨  
(
¨¨  !
)
¨¨! "
.
¨¨" #
Be
¨¨# %
(
¨¨% &
mockedTests
¨¨& 1
[
¨¨1 2
$num
¨¨2 3
]
¨¨3 4
)
¨¨4 5
;
¨¨5 6
tests
≠≠ 
.
≠≠ 
Last
≠≠ 
(
≠≠ 
)
≠≠ 
.
≠≠ 
Should
≠≠ 
(
≠≠  
)
≠≠  !
.
≠≠! "
Be
≠≠" $
(
≠≠$ %
mockedTests
≠≠% 0
[
≠≠0 1
$num
≠≠1 2
]
≠≠2 3
)
≠≠3 4
;
≠≠4 5
}
ÆÆ 	
[
∞∞ 	
Fact
∞∞	 
]
∞∞ 
public
±± 
void
±± G
9ReturnsFirstPageOrderedDescendingGivenPageSize10AndTotal9
±± M
(
±±M N
)
±±N O
{
≤≤ 	
List
≥≥ 
<
≥≥ 
Test
≥≥ 
>
≥≥ 
mockedTests
≥≥ "
=
≥≥# $
	MockTests
≥≥% .
(
≥≥. /
$num
≥≥/ 0
)
≥≥0 1
;
≥≥1 2
Mock
µµ 
<
µµ 
DbSet
µµ 
<
µµ 
Test
µµ 
>
µµ 
>
µµ 
	mockDbSet
µµ '
=
µµ( )
new
µµ* -
Mock
µµ. 2
<
µµ2 3
DbSet
µµ3 8
<
µµ8 9
Test
µµ9 =
>
µµ= >
>
µµ> ?
(
µµ? @
)
µµ@ A
;
µµA B
	mockDbSet
∂∂ 
.
∂∂ 
SetupAsQueryable
∂∂ &
(
∂∂& '
mockedTests
∂∂' 2
)
∂∂2 3
;
∂∂3 4
Mock
∏∏ 
<
∏∏ "
IQueryableUnitOfWork
∏∏ %
>
∏∏% &
mockUnitOfWork
∏∏' 5
=
∏∏6 7
new
∏∏8 ;
Mock
∏∏< @
<
∏∏@ A"
IQueryableUnitOfWork
∏∏A U
>
∏∏U V
(
∏∏V W
)
∏∏W X
;
∏∏X Y
mockUnitOfWork
ππ 
.
ππ 
Setup
ππ  
(
ππ  !
p
ππ! "
=>
ππ# %
p
ππ& '
.
ππ' (
Set
ππ( +
<
ππ+ ,
Test
ππ, 0
>
ππ0 1
(
ππ1 2
)
ππ2 3
)
ππ3 4
.
ππ4 5
Returns
ππ5 <
(
ππ< =
	mockDbSet
ππ= F
.
ππF G
Object
ππG M
)
ππM N
;
ππN O
IPagination
ªª 

pagination
ªª "
=
ªª# $
new
ªª% (

Pagination
ªª) 3
(
ªª3 4
$num
ªª4 5
,
ªª5 6
$num
ªª7 9
,
ªª9 :
$str
ªª; ?
,
ªª? @
false
ªªA F
)
ªªF G
;
ªªG H
IRepository
ºº 
<
ºº 
Test
ºº 
>
ºº 
testRepository
ºº ,
=
ºº- .
new
ºº/ 2#
GenericTestRepository
ºº3 H
(
ººH I
mockUnitOfWork
ººI W
.
ººW X
Object
ººX ^
)
ºº^ _
;
ºº_ `

IPagedList
ΩΩ 
<
ΩΩ 
Test
ΩΩ 
>
ΩΩ 
tests
ΩΩ "
=
ΩΩ# $
testRepository
ΩΩ% 3
.
ΩΩ3 4
Find
ΩΩ4 8
(
ΩΩ8 9

pagination
ΩΩ9 C
)
ΩΩC D
;
ΩΩD E
mockUnitOfWork
øø 
.
øø 
Verify
øø !
(
øø! "
x
øø" #
=>
øø$ &
x
øø' (
.
øø( )
Set
øø) ,
<
øø, -
Test
øø- 1
>
øø1 2
(
øø2 3
)
øø3 4
,
øø4 5
Times
øø6 ;
.
øø; <
Once
øø< @
)
øø@ A
;
øøA B
tests
¿¿ 
.
¿¿ 
Should
¿¿ 
(
¿¿ 
)
¿¿ 
.
¿¿ 
	NotBeNull
¿¿ $
(
¿¿$ %
)
¿¿% &
.
¿¿& '
And
¿¿' *
.
¿¿* +
	HaveCount
¿¿+ 4
(
¿¿4 5
$num
¿¿5 6
)
¿¿6 7
;
¿¿7 8
tests
¡¡ 
.
¡¡ 

TotalCount
¡¡ 
.
¡¡ 
Should
¡¡ #
(
¡¡# $
)
¡¡$ %
.
¡¡% &
Be
¡¡& (
(
¡¡( )
$num
¡¡) *
)
¡¡* +
;
¡¡+ ,
tests
¬¬ 
.
¬¬ 
	PageCount
¬¬ 
.
¬¬ 
Should
¬¬ "
(
¬¬" #
)
¬¬# $
.
¬¬$ %
Be
¬¬% '
(
¬¬' (
$num
¬¬( )
)
¬¬) *
;
¬¬* +
tests
√√ 
.
√√ 
First
√√ 
(
√√ 
)
√√ 
.
√√ 
Should
√√  
(
√√  !
)
√√! "
.
√√" #
Be
√√# %
(
√√% &
mockedTests
√√& 1
[
√√1 2
$num
√√2 3
]
√√3 4
)
√√4 5
;
√√5 6
tests
ƒƒ 
.
ƒƒ 
Last
ƒƒ 
(
ƒƒ 
)
ƒƒ 
.
ƒƒ 
Should
ƒƒ 
(
ƒƒ  
)
ƒƒ  !
.
ƒƒ! "
Be
ƒƒ" $
(
ƒƒ$ %
mockedTests
ƒƒ% 0
[
ƒƒ0 1
$num
ƒƒ1 2
]
ƒƒ2 3
)
ƒƒ3 4
;
ƒƒ4 5
}
≈≈ 	
[
«« 	
Fact
««	 
]
«« 
public
»» 
void
»» L
>ReturnsFirstPageOrderedDescendingGivenPageSize10AndTotal9Async
»» R
(
»»R S
)
»»S T
{
…… 	
List
   
<
   
Test
   
>
   
mockedTests
   "
=
  # $
	MockTests
  % .
(
  . /
$num
  / 0
)
  0 1
;
  1 2
Mock
ÃÃ 
<
ÃÃ 
DbSet
ÃÃ 
<
ÃÃ 
Test
ÃÃ 
>
ÃÃ 
>
ÃÃ 
	mockDbSet
ÃÃ '
=
ÃÃ( )
new
ÃÃ* -
Mock
ÃÃ. 2
<
ÃÃ2 3
DbSet
ÃÃ3 8
<
ÃÃ8 9
Test
ÃÃ9 =
>
ÃÃ= >
>
ÃÃ> ?
(
ÃÃ? @
)
ÃÃ@ A
;
ÃÃA B
	mockDbSet
ÕÕ 
.
ÕÕ #
SetupAsQueryableAsync
ÕÕ +
(
ÕÕ+ ,
mockedTests
ÕÕ, 7
)
ÕÕ7 8
;
ÕÕ8 9
Mock
œœ 
<
œœ "
IQueryableUnitOfWork
œœ %
>
œœ% &
mockUnitOfWork
œœ' 5
=
œœ6 7
new
œœ8 ;
Mock
œœ< @
<
œœ@ A"
IQueryableUnitOfWork
œœA U
>
œœU V
(
œœV W
)
œœW X
;
œœX Y
mockUnitOfWork
–– 
.
–– 
Setup
––  
(
––  !
p
––! "
=>
––# %
p
––& '
.
––' (
Set
––( +
<
––+ ,
Test
––, 0
>
––0 1
(
––1 2
)
––2 3
)
––3 4
.
––4 5
Returns
––5 <
(
––< =
	mockDbSet
––= F
.
––F G
Object
––G M
)
––M N
;
––N O
IPagination
““ 

pagination
““ "
=
““# $
new
““% (

Pagination
““) 3
(
““3 4
$num
““4 5
,
““5 6
$num
““7 9
,
““9 :
$str
““; ?
,
““? @
false
““A F
)
““F G
;
““G H
IRepository
”” 
<
”” 
Test
”” 
>
”” 
testRepository
”” ,
=
””- .
new
””/ 2#
GenericTestRepository
””3 H
(
””H I
mockUnitOfWork
””I W
.
””W X
Object
””X ^
)
””^ _
;
””_ `

IPagedList
‘‘ 
<
‘‘ 
Test
‘‘ 
>
‘‘ 
tests
‘‘ "
=
‘‘# $
testRepository
‘‘% 3
.
‘‘3 4
	FindAsync
‘‘4 =
(
‘‘= >

pagination
‘‘> H
)
‘‘H I
.
‘‘I J

GetAwaiter
‘‘J T
(
‘‘T U
)
‘‘U V
.
‘‘V W
	GetResult
‘‘W `
(
‘‘` a
)
‘‘a b
;
‘‘b c
mockUnitOfWork
÷÷ 
.
÷÷ 
Verify
÷÷ !
(
÷÷! "
x
÷÷" #
=>
÷÷$ &
x
÷÷' (
.
÷÷( )
Set
÷÷) ,
<
÷÷, -
Test
÷÷- 1
>
÷÷1 2
(
÷÷2 3
)
÷÷3 4
,
÷÷4 5
Times
÷÷6 ;
.
÷÷; <
Once
÷÷< @
)
÷÷@ A
;
÷÷A B
tests
◊◊ 
.
◊◊ 
Should
◊◊ 
(
◊◊ 
)
◊◊ 
.
◊◊ 
	NotBeNull
◊◊ $
(
◊◊$ %
)
◊◊% &
.
◊◊& '
And
◊◊' *
.
◊◊* +
	HaveCount
◊◊+ 4
(
◊◊4 5
$num
◊◊5 6
)
◊◊6 7
;
◊◊7 8
tests
ÿÿ 
.
ÿÿ 

TotalCount
ÿÿ 
.
ÿÿ 
Should
ÿÿ #
(
ÿÿ# $
)
ÿÿ$ %
.
ÿÿ% &
Be
ÿÿ& (
(
ÿÿ( )
$num
ÿÿ) *
)
ÿÿ* +
;
ÿÿ+ ,
tests
ŸŸ 
.
ŸŸ 
	PageCount
ŸŸ 
.
ŸŸ 
Should
ŸŸ "
(
ŸŸ" #
)
ŸŸ# $
.
ŸŸ$ %
Be
ŸŸ% '
(
ŸŸ' (
$num
ŸŸ( )
)
ŸŸ) *
;
ŸŸ* +
tests
⁄⁄ 
.
⁄⁄ 
First
⁄⁄ 
(
⁄⁄ 
)
⁄⁄ 
.
⁄⁄ 
Should
⁄⁄  
(
⁄⁄  !
)
⁄⁄! "
.
⁄⁄" #
Be
⁄⁄# %
(
⁄⁄% &
mockedTests
⁄⁄& 1
[
⁄⁄1 2
$num
⁄⁄2 3
]
⁄⁄3 4
)
⁄⁄4 5
;
⁄⁄5 6
tests
€€ 
.
€€ 
Last
€€ 
(
€€ 
)
€€ 
.
€€ 
Should
€€ 
(
€€  
)
€€  !
.
€€! "
Be
€€" $
(
€€$ %
mockedTests
€€% 0
[
€€0 1
$num
€€1 2
]
€€2 3
)
€€3 4
;
€€4 5
}
‹‹ 	
[
ﬁﬁ 	
Fact
ﬁﬁ	 
]
ﬁﬁ 
public
ﬂﬂ 
void
ﬂﬂ O
AReturnsFirstPageOrderedAscendingActivesGivenPageSize10AndTotal100
ﬂﬂ U
(
ﬂﬂU V
)
ﬂﬂV W
{
‡‡ 	
List
·· 
<
·· 
Test
·· 
>
·· 
mockedTests
·· "
=
··# $
	MockTests
··% .
(
··. /
$num
··/ 2
)
··2 3
;
··3 4
mockedTests
‚‚ 
.
‚‚ 
First
‚‚ 
(
‚‚ 
)
‚‚ 
.
‚‚  

Deactivate
‚‚  *
(
‚‚* +
)
‚‚+ ,
;
‚‚, -
mockedTests
„„ 
.
„„ 
Last
„„ 
(
„„ 
)
„„ 
.
„„ 

Deactivate
„„ )
(
„„) *
)
„„* +
;
„„+ ,
Mock
ÂÂ 
<
ÂÂ 
DbSet
ÂÂ 
<
ÂÂ 
Test
ÂÂ 
>
ÂÂ 
>
ÂÂ 
	mockDbSet
ÂÂ '
=
ÂÂ( )
new
ÂÂ* -
Mock
ÂÂ. 2
<
ÂÂ2 3
DbSet
ÂÂ3 8
<
ÂÂ8 9
Test
ÂÂ9 =
>
ÂÂ= >
>
ÂÂ> ?
(
ÂÂ? @
)
ÂÂ@ A
;
ÂÂA B
	mockDbSet
ÊÊ 
.
ÊÊ 
SetupAsQueryable
ÊÊ &
(
ÊÊ& '
mockedTests
ÊÊ' 2
)
ÊÊ2 3
;
ÊÊ3 4
Mock
ËË 
<
ËË "
IQueryableUnitOfWork
ËË %
>
ËË% &
mockUnitOfWork
ËË' 5
=
ËË6 7
new
ËË8 ;
Mock
ËË< @
<
ËË@ A"
IQueryableUnitOfWork
ËËA U
>
ËËU V
(
ËËV W
)
ËËW X
;
ËËX Y
mockUnitOfWork
ÈÈ 
.
ÈÈ 
Setup
ÈÈ  
(
ÈÈ  !
p
ÈÈ! "
=>
ÈÈ# %
p
ÈÈ& '
.
ÈÈ' (
Set
ÈÈ( +
<
ÈÈ+ ,
Test
ÈÈ, 0
>
ÈÈ0 1
(
ÈÈ1 2
)
ÈÈ2 3
)
ÈÈ3 4
.
ÈÈ4 5
Returns
ÈÈ5 <
(
ÈÈ< =
	mockDbSet
ÈÈ= F
.
ÈÈF G
Object
ÈÈG M
)
ÈÈM N
;
ÈÈN O
ISpecification
ÎÎ 
<
ÎÎ 
Test
ÎÎ 
>
ÎÎ  
spec
ÎÎ! %
=
ÎÎ& '
new
ÎÎ( +!
DirectSpecification
ÎÎ, ?
<
ÎÎ? @
Test
ÎÎ@ D
>
ÎÎD E
(
ÎÎE F
t
ÎÎF G
=>
ÎÎH J
t
ÎÎK L
.
ÎÎL M
Active
ÎÎM S
)
ÎÎS T
;
ÎÎT U
IPagination
ÏÏ 

pagination
ÏÏ "
=
ÏÏ# $
new
ÏÏ% (

Pagination
ÏÏ) 3
(
ÏÏ3 4
$num
ÏÏ4 5
,
ÏÏ5 6
$num
ÏÏ7 9
)
ÏÏ9 :
;
ÏÏ: ;
IRepository
ÌÌ 
<
ÌÌ 
Test
ÌÌ 
>
ÌÌ 
testRepository
ÌÌ ,
=
ÌÌ- .
new
ÌÌ/ 2#
GenericTestRepository
ÌÌ3 H
(
ÌÌH I
mockUnitOfWork
ÌÌI W
.
ÌÌW X
Object
ÌÌX ^
)
ÌÌ^ _
;
ÌÌ_ `

IPagedList
ÓÓ 
<
ÓÓ 
Test
ÓÓ 
>
ÓÓ 
tests
ÓÓ "
=
ÓÓ# $
testRepository
ÓÓ% 3
.
ÓÓ3 4
Find
ÓÓ4 8
(
ÓÓ8 9
spec
ÓÓ9 =
,
ÓÓ= >

pagination
ÓÓ? I
)
ÓÓI J
;
ÓÓJ K
mockUnitOfWork
 
.
 
Verify
 !
(
! "
x
" #
=>
$ &
x
' (
.
( )
Set
) ,
<
, -
Test
- 1
>
1 2
(
2 3
)
3 4
,
4 5
Times
6 ;
.
; <
Once
< @
)
@ A
;
A B
tests
ÒÒ 
.
ÒÒ 
Should
ÒÒ 
(
ÒÒ 
)
ÒÒ 
.
ÒÒ 
NotBeNullOrEmpty
ÒÒ +
(
ÒÒ+ ,
)
ÒÒ, -
.
ÒÒ- .
And
ÒÒ. 1
.
ÒÒ1 2
OnlyContain
ÒÒ2 =
(
ÒÒ= >
x
ÒÒ> ?
=>
ÒÒ@ B
x
ÒÒC D
.
ÒÒD E
Active
ÒÒE K
,
ÒÒK L
$str
ÒÒM e
)
ÒÒe f
.
ÒÒf g
And
ÒÒg j
.
ÒÒj k
	HaveCount
ÒÒk t
(
ÒÒt u
$num
ÒÒu w
)
ÒÒw x
;
ÒÒx y
tests
ÚÚ 
.
ÚÚ 

TotalCount
ÚÚ 
.
ÚÚ 
Should
ÚÚ #
(
ÚÚ# $
)
ÚÚ$ %
.
ÚÚ% &
Be
ÚÚ& (
(
ÚÚ( )
$num
ÚÚ) +
)
ÚÚ+ ,
;
ÚÚ, -
tests
ÛÛ 
.
ÛÛ 
	PageCount
ÛÛ 
.
ÛÛ 
Should
ÛÛ "
(
ÛÛ" #
)
ÛÛ# $
.
ÛÛ$ %
Be
ÛÛ% '
(
ÛÛ' (
$num
ÛÛ( *
)
ÛÛ* +
;
ÛÛ+ ,
tests
ÙÙ 
.
ÙÙ 
First
ÙÙ 
(
ÙÙ 
)
ÙÙ 
.
ÙÙ 
Should
ÙÙ  
(
ÙÙ  !
)
ÙÙ! "
.
ÙÙ" #
Be
ÙÙ# %
(
ÙÙ% &
mockedTests
ÙÙ& 1
[
ÙÙ1 2
$num
ÙÙ2 3
]
ÙÙ3 4
)
ÙÙ4 5
;
ÙÙ5 6
tests
ıı 
.
ıı 
Last
ıı 
(
ıı 
)
ıı 
.
ıı 
Should
ıı 
(
ıı  
)
ıı  !
.
ıı! "
Be
ıı" $
(
ıı$ %
mockedTests
ıı% 0
[
ıı0 1
$num
ıı1 3
]
ıı3 4
)
ıı4 5
;
ıı5 6
}
ˆˆ 	
[
¯¯ 	
Fact
¯¯	 
]
¯¯ 
public
˘˘ 
void
˘˘ T
FGivenDefaultPageThenReturnsFirstPageOrderedAscendingActivesAndTotal100
˘˘ Z
(
˘˘Z [
)
˘˘[ \
{
˙˙ 	
List
˚˚ 
<
˚˚ 
Test
˚˚ 
>
˚˚ 
mockedTests
˚˚ "
=
˚˚# $
	MockTests
˚˚% .
(
˚˚. /
$num
˚˚/ 2
)
˚˚2 3
;
˚˚3 4
mockedTests
¸¸ 
.
¸¸ 
First
¸¸ 
(
¸¸ 
)
¸¸ 
.
¸¸  

Deactivate
¸¸  *
(
¸¸* +
)
¸¸+ ,
;
¸¸, -
mockedTests
˝˝ 
.
˝˝ 
Last
˝˝ 
(
˝˝ 
)
˝˝ 
.
˝˝ 

Deactivate
˝˝ )
(
˝˝) *
)
˝˝* +
;
˝˝+ ,
Mock
ˇˇ 
<
ˇˇ 
DbSet
ˇˇ 
<
ˇˇ 
Test
ˇˇ 
>
ˇˇ 
>
ˇˇ 
	mockDbSet
ˇˇ '
=
ˇˇ( )
new
ˇˇ* -
Mock
ˇˇ. 2
<
ˇˇ2 3
DbSet
ˇˇ3 8
<
ˇˇ8 9
Test
ˇˇ9 =
>
ˇˇ= >
>
ˇˇ> ?
(
ˇˇ? @
)
ˇˇ@ A
;
ˇˇA B
	mockDbSet
ÄÄ 
.
ÄÄ 
SetupAsQueryable
ÄÄ &
(
ÄÄ& '
mockedTests
ÄÄ' 2
)
ÄÄ2 3
;
ÄÄ3 4
Mock
ÇÇ 
<
ÇÇ "
IQueryableUnitOfWork
ÇÇ %
>
ÇÇ% &
mockUnitOfWork
ÇÇ' 5
=
ÇÇ6 7
new
ÇÇ8 ;
Mock
ÇÇ< @
<
ÇÇ@ A"
IQueryableUnitOfWork
ÇÇA U
>
ÇÇU V
(
ÇÇV W
)
ÇÇW X
;
ÇÇX Y
mockUnitOfWork
ÉÉ 
.
ÉÉ 
Setup
ÉÉ  
(
ÉÉ  !
p
ÉÉ! "
=>
ÉÉ# %
p
ÉÉ& '
.
ÉÉ' (
Set
ÉÉ( +
<
ÉÉ+ ,
Test
ÉÉ, 0
>
ÉÉ0 1
(
ÉÉ1 2
)
ÉÉ2 3
)
ÉÉ3 4
.
ÉÉ4 5
Returns
ÉÉ5 <
(
ÉÉ< =
	mockDbSet
ÉÉ= F
.
ÉÉF G
Object
ÉÉG M
)
ÉÉM N
;
ÉÉN O
ISpecification
ÖÖ 
<
ÖÖ 
Test
ÖÖ 
>
ÖÖ  
spec
ÖÖ! %
=
ÖÖ& '
new
ÖÖ( +!
DirectSpecification
ÖÖ, ?
<
ÖÖ? @
Test
ÖÖ@ D
>
ÖÖD E
(
ÖÖE F
t
ÖÖF G
=>
ÖÖH J
t
ÖÖK L
.
ÖÖL M
Active
ÖÖM S
)
ÖÖS T
;
ÖÖT U
IPagination
ÜÜ 

pagination
ÜÜ "
=
ÜÜ# $
new
ÜÜ% (

Pagination
ÜÜ) 3
(
ÜÜ3 4
-
ÜÜ4 5
$num
ÜÜ5 6
,
ÜÜ6 7
-
ÜÜ8 9
$num
ÜÜ9 :
)
ÜÜ: ;
;
ÜÜ; <
IRepository
áá 
<
áá 
Test
áá 
>
áá 
testRepository
áá ,
=
áá- .
new
áá/ 2#
GenericTestRepository
áá3 H
(
ááH I
mockUnitOfWork
ááI W
.
ááW X
Object
ááX ^
)
áá^ _
;
áá_ `

IPagedList
àà 
<
àà 
Test
àà 
>
àà 
tests
àà "
=
àà# $
testRepository
àà% 3
.
àà3 4
Find
àà4 8
(
àà8 9
spec
àà9 =
,
àà= >

pagination
àà? I
)
ààI J
;
ààJ K
mockUnitOfWork
ää 
.
ää 
Verify
ää !
(
ää! "
x
ää" #
=>
ää$ &
x
ää' (
.
ää( )
Set
ää) ,
<
ää, -
Test
ää- 1
>
ää1 2
(
ää2 3
)
ää3 4
,
ää4 5
Times
ää6 ;
.
ää; <
Once
ää< @
)
ää@ A
;
ääA B
tests
ãã 
.
ãã 
Should
ãã 
(
ãã 
)
ãã 
.
ãã 
NotBeNullOrEmpty
ãã +
(
ãã+ ,
)
ãã, -
.
ãã- .
And
ãã. 1
.
ãã1 2
OnlyContain
ãã2 =
(
ãã= >
x
ãã> ?
=>
ãã@ B
x
ããC D
.
ããD E
Active
ããE K
,
ããK L
$str
ããM e
)
ããe f
.
ããf g
And
ããg j
.
ããj k
	HaveCount
ããk t
(
ããt u
$num
ããu w
)
ããw x
;
ããx y
tests
åå 
.
åå 

TotalCount
åå 
.
åå 
Should
åå #
(
åå# $
)
åå$ %
.
åå% &
Be
åå& (
(
åå( )
$num
åå) +
)
åå+ ,
;
åå, -
tests
çç 
.
çç 
	PageCount
çç 
.
çç 
Should
çç "
(
çç" #
)
çç# $
.
çç$ %
Be
çç% '
(
çç' (
$num
çç( *
)
çç* +
;
çç+ ,
tests
éé 
.
éé 
First
éé 
(
éé 
)
éé 
.
éé 
Should
éé  
(
éé  !
)
éé! "
.
éé" #
Be
éé# %
(
éé% &
mockedTests
éé& 1
[
éé1 2
$num
éé2 3
]
éé3 4
)
éé4 5
;
éé5 6
tests
èè 
.
èè 
Last
èè 
(
èè 
)
èè 
.
èè 
Should
èè 
(
èè  
)
èè  !
.
èè! "
Be
èè" $
(
èè$ %
mockedTests
èè% 0
[
èè0 1
$num
èè1 3
]
èè3 4
)
èè4 5
;
èè5 6
}
êê 	
[
íí 	
Fact
íí	 
]
íí 
public
ìì 
void
ìì L
>ThrowsArgumentNullExceptionGivenSpecificationAndNullPagination
ìì R
(
ììR S
)
ììS T
{
îî 	
Mock
ïï 
<
ïï "
IQueryableUnitOfWork
ïï %
>
ïï% &
mockUnitOfWork
ïï' 5
=
ïï6 7
new
ïï8 ;
Mock
ïï< @
<
ïï@ A"
IQueryableUnitOfWork
ïïA U
>
ïïU V
(
ïïV W
)
ïïW X
;
ïïX Y
Action
óó 
act
óó 
=
óó 
(
óó 
)
óó 
=>
óó 
{
òò 
ISpecification
ôô 
<
ôô 
Test
ôô #
>
ôô# $
spec
ôô% )
=
ôô* +
new
ôô, /!
DirectSpecification
ôô0 C
<
ôôC D
Test
ôôD H
>
ôôH I
(
ôôI J
t
ôôJ K
=>
ôôL N
t
ôôO P
.
ôôP Q
Active
ôôQ W
)
ôôW X
;
ôôX Y
IPagination
öö 

pagination
öö &
=
öö' (
null
öö) -
;
öö- .
IRepository
õõ 
<
õõ 
Test
õõ  
>
õõ  !
testRepository
õõ" 0
=
õõ1 2
new
õõ3 6#
GenericTestRepository
õõ7 L
(
õõL M
mockUnitOfWork
õõM [
.
õõ[ \
Object
õõ\ b
)
õõb c
;
õõc d
testRepository
úú 
.
úú 
Find
úú #
(
úú# $
spec
úú$ (
,
úú( )

pagination
úú* 4
)
úú4 5
;
úú5 6
}
ùù 
;
ùù 
act
üü 
.
üü 
Should
üü 
(
üü 
)
üü 
.
üü 
Throw
üü 
<
üü #
ArgumentNullException
üü 4
>
üü4 5
(
üü5 6
)
üü6 7
.
üü7 8
And
üü8 ;
.
üü; <
	ParamName
üü< E
.
üüE F
Should
üüF L
(
üüL M
)
üüM N
.
üüN O
Be
üüO Q
(
üüQ R
$str
üüR ^
)
üü^ _
;
üü_ `
}
†† 	
[
¢¢ 	
Fact
¢¢	 
]
¢¢ 
public
££ 
void
££ Q
CThrowsArgumentNullExceptionGivenSpecificationAndNullPaginationAsync
££ W
(
££W X
)
££X Y
{
§§ 	
Mock
•• 
<
•• "
IQueryableUnitOfWork
•• %
>
••% &
mockUnitOfWork
••' 5
=
••6 7
new
••8 ;
Mock
••< @
<
••@ A"
IQueryableUnitOfWork
••A U
>
••U V
(
••V W
)
••W X
;
••X Y
Action
ßß 
act
ßß 
=
ßß 
(
ßß 
)
ßß 
=>
ßß 
{
®® 
ISpecification
©© 
<
©© 
Test
©© #
>
©©# $
spec
©©% )
=
©©* +
new
©©, /!
DirectSpecification
©©0 C
<
©©C D
Test
©©D H
>
©©H I
(
©©I J
t
©©J K
=>
©©L N
t
©©O P
.
©©P Q
Active
©©Q W
)
©©W X
;
©©X Y
IPagination
™™ 

pagination
™™ &
=
™™' (
null
™™) -
;
™™- .
IRepository
´´ 
<
´´ 
Test
´´  
>
´´  !
testRepository
´´" 0
=
´´1 2
new
´´3 6#
GenericTestRepository
´´7 L
(
´´L M
mockUnitOfWork
´´M [
.
´´[ \
Object
´´\ b
)
´´b c
;
´´c d
testRepository
¨¨ 
.
¨¨ 
	FindAsync
¨¨ (
(
¨¨( )
spec
¨¨) -
,
¨¨- .

pagination
¨¨/ 9
)
¨¨9 :
.
¨¨: ;

GetAwaiter
¨¨; E
(
¨¨E F
)
¨¨F G
.
¨¨G H
	GetResult
¨¨H Q
(
¨¨Q R
)
¨¨R S
;
¨¨S T
}
≠≠ 
;
≠≠ 
act
ØØ 
.
ØØ 
Should
ØØ 
(
ØØ 
)
ØØ 
.
ØØ 
Throw
ØØ 
<
ØØ #
ArgumentNullException
ØØ 4
>
ØØ4 5
(
ØØ5 6
)
ØØ6 7
.
ØØ7 8
And
ØØ8 ;
.
ØØ; <
	ParamName
ØØ< E
.
ØØE F
Should
ØØF L
(
ØØL M
)
ØØM N
.
ØØN O
Be
ØØO Q
(
ØØQ R
$str
ØØR ^
)
ØØ^ _
;
ØØ_ `
}
∞∞ 	
[
≤≤ 	
Fact
≤≤	 
]
≤≤ 
public
≥≥ 
void
≥≥ L
>ThrowsArgumentNullExceptionGivenPaginationAndNullSpecification
≥≥ R
(
≥≥R S
)
≥≥S T
{
¥¥ 	
Mock
µµ 
<
µµ "
IQueryableUnitOfWork
µµ %
>
µµ% &
mockUnitOfWork
µµ' 5
=
µµ6 7
new
µµ8 ;
Mock
µµ< @
<
µµ@ A"
IQueryableUnitOfWork
µµA U
>
µµU V
(
µµV W
)
µµW X
;
µµX Y
Action
∑∑ 
act
∑∑ 
=
∑∑ 
(
∑∑ 
)
∑∑ 
=>
∑∑ 
{
∏∏ 
ISpecification
ππ 
<
ππ 
Test
ππ #
>
ππ# $
spec
ππ% )
=
ππ* +
null
ππ, 0
;
ππ0 1
IPagination
∫∫ 

pagination
∫∫ &
=
∫∫' (
new
∫∫) ,

Pagination
∫∫- 7
(
∫∫7 8
$num
∫∫8 9
,
∫∫9 :
$num
∫∫; =
)
∫∫= >
;
∫∫> ?
IRepository
ªª 
<
ªª 
Test
ªª  
>
ªª  !
testRepository
ªª" 0
=
ªª1 2
new
ªª3 6#
GenericTestRepository
ªª7 L
(
ªªL M
mockUnitOfWork
ªªM [
.
ªª[ \
Object
ªª\ b
)
ªªb c
;
ªªc d
testRepository
ºº 
.
ºº 
Find
ºº #
(
ºº# $
spec
ºº$ (
,
ºº( )

pagination
ºº* 4
)
ºº4 5
;
ºº5 6
}
ΩΩ 
;
ΩΩ 
act
øø 
.
øø 
Should
øø 
(
øø 
)
øø 
.
øø 
Throw
øø 
<
øø #
ArgumentNullException
øø 4
>
øø4 5
(
øø5 6
)
øø6 7
.
øø7 8
And
øø8 ;
.
øø; <
	ParamName
øø< E
.
øøE F
Should
øøF L
(
øøL M
)
øøM N
.
øøN O
Be
øøO Q
(
øøQ R
$str
øøR a
)
øøa b
;
øøb c
}
¿¿ 	
[
¬¬ 	
Fact
¬¬	 
]
¬¬ 
public
√√ 
void
√√ Q
CThrowsArgumentNullExceptionGivenPaginationAndNullSpecificationAsync
√√ W
(
√√W X
)
√√X Y
{
ƒƒ 	
Mock
≈≈ 
<
≈≈ "
IQueryableUnitOfWork
≈≈ %
>
≈≈% &
mockUnitOfWork
≈≈' 5
=
≈≈6 7
new
≈≈8 ;
Mock
≈≈< @
<
≈≈@ A"
IQueryableUnitOfWork
≈≈A U
>
≈≈U V
(
≈≈V W
)
≈≈W X
;
≈≈X Y
Action
«« 
act
«« 
=
«« 
(
«« 
)
«« 
=>
«« 
{
»» 
ISpecification
…… 
<
…… 
Test
…… #
>
……# $
spec
……% )
=
……* +
null
……, 0
;
……0 1
IPagination
   

pagination
   &
=
  ' (
new
  ) ,

Pagination
  - 7
(
  7 8
$num
  8 9
,
  9 :
$num
  ; =
)
  = >
;
  > ?
IRepository
ÀÀ 
<
ÀÀ 
Test
ÀÀ  
>
ÀÀ  !
testRepository
ÀÀ" 0
=
ÀÀ1 2
new
ÀÀ3 6#
GenericTestRepository
ÀÀ7 L
(
ÀÀL M
mockUnitOfWork
ÀÀM [
.
ÀÀ[ \
Object
ÀÀ\ b
)
ÀÀb c
;
ÀÀc d
testRepository
ÃÃ 
.
ÃÃ 
	FindAsync
ÃÃ (
(
ÃÃ( )
spec
ÃÃ) -
,
ÃÃ- .

pagination
ÃÃ/ 9
)
ÃÃ9 :
.
ÃÃ: ;

GetAwaiter
ÃÃ; E
(
ÃÃE F
)
ÃÃF G
.
ÃÃG H
	GetResult
ÃÃH Q
(
ÃÃQ R
)
ÃÃR S
;
ÃÃS T
}
ÕÕ 
;
ÕÕ 
act
œœ 
.
œœ 
Should
œœ 
(
œœ 
)
œœ 
.
œœ 
Throw
œœ 
<
œœ #
ArgumentNullException
œœ 4
>
œœ4 5
(
œœ5 6
)
œœ6 7
.
œœ7 8
And
œœ8 ;
.
œœ; <
	ParamName
œœ< E
.
œœE F
Should
œœF L
(
œœL M
)
œœM N
.
œœN O
Be
œœO Q
(
œœQ R
$str
œœR a
)
œœa b
;
œœb c
}
–– 	
[
““ 	
Fact
““	 
]
““ 
public
”” 
void
”” T
FReturnsFirstPageOrderedAscendingActivesGivenPageSize10AndTotal100Async
”” Z
(
””Z [
)
””[ \
{
‘‘ 	
List
’’ 
<
’’ 
Test
’’ 
>
’’ 
mockedTests
’’ "
=
’’# $
	MockTests
’’% .
(
’’. /
$num
’’/ 2
)
’’2 3
;
’’3 4
mockedTests
÷÷ 
.
÷÷ 
First
÷÷ 
(
÷÷ 
)
÷÷ 
.
÷÷  

Deactivate
÷÷  *
(
÷÷* +
)
÷÷+ ,
;
÷÷, -
mockedTests
◊◊ 
.
◊◊ 
Last
◊◊ 
(
◊◊ 
)
◊◊ 
.
◊◊ 

Deactivate
◊◊ )
(
◊◊) *
)
◊◊* +
;
◊◊+ ,
Mock
ŸŸ 
<
ŸŸ 
DbSet
ŸŸ 
<
ŸŸ 
Test
ŸŸ 
>
ŸŸ 
>
ŸŸ 
	mockDbSet
ŸŸ '
=
ŸŸ( )
new
ŸŸ* -
Mock
ŸŸ. 2
<
ŸŸ2 3
DbSet
ŸŸ3 8
<
ŸŸ8 9
Test
ŸŸ9 =
>
ŸŸ= >
>
ŸŸ> ?
(
ŸŸ? @
)
ŸŸ@ A
;
ŸŸA B
	mockDbSet
⁄⁄ 
.
⁄⁄ #
SetupAsQueryableAsync
⁄⁄ +
(
⁄⁄+ ,
mockedTests
⁄⁄, 7
)
⁄⁄7 8
;
⁄⁄8 9
Mock
‹‹ 
<
‹‹ "
IQueryableUnitOfWork
‹‹ %
>
‹‹% &
mockUnitOfWork
‹‹' 5
=
‹‹6 7
new
‹‹8 ;
Mock
‹‹< @
<
‹‹@ A"
IQueryableUnitOfWork
‹‹A U
>
‹‹U V
(
‹‹V W
)
‹‹W X
;
‹‹X Y
mockUnitOfWork
›› 
.
›› 
Setup
››  
(
››  !
p
››! "
=>
››# %
p
››& '
.
››' (
Set
››( +
<
››+ ,
Test
››, 0
>
››0 1
(
››1 2
)
››2 3
)
››3 4
.
››4 5
Returns
››5 <
(
››< =
	mockDbSet
››= F
.
››F G
Object
››G M
)
››M N
;
››N O
ISpecification
ﬂﬂ 
<
ﬂﬂ 
Test
ﬂﬂ 
>
ﬂﬂ  
spec
ﬂﬂ! %
=
ﬂﬂ& '
new
ﬂﬂ( +!
DirectSpecification
ﬂﬂ, ?
<
ﬂﬂ? @
Test
ﬂﬂ@ D
>
ﬂﬂD E
(
ﬂﬂE F
t
ﬂﬂF G
=>
ﬂﬂH J
t
ﬂﬂK L
.
ﬂﬂL M
Active
ﬂﬂM S
)
ﬂﬂS T
;
ﬂﬂT U
IPagination
‡‡ 

pagination
‡‡ "
=
‡‡# $
new
‡‡% (

Pagination
‡‡) 3
(
‡‡3 4
$num
‡‡4 5
,
‡‡5 6
$num
‡‡7 9
)
‡‡9 :
;
‡‡: ;
IRepository
·· 
<
·· 
Test
·· 
>
·· 
testRepository
·· ,
=
··- .
new
··/ 2#
GenericTestRepository
··3 H
(
··H I
mockUnitOfWork
··I W
.
··W X
Object
··X ^
)
··^ _
;
··_ `

IPagedList
‚‚ 
<
‚‚ 
Test
‚‚ 
>
‚‚ 
tests
‚‚ "
=
‚‚# $
testRepository
‚‚% 3
.
‚‚3 4
	FindAsync
‚‚4 =
(
‚‚= >
spec
‚‚> B
,
‚‚B C

pagination
‚‚D N
)
‚‚N O
.
‚‚O P

GetAwaiter
‚‚P Z
(
‚‚Z [
)
‚‚[ \
.
‚‚\ ]
	GetResult
‚‚] f
(
‚‚f g
)
‚‚g h
;
‚‚h i
mockUnitOfWork
‰‰ 
.
‰‰ 
Verify
‰‰ !
(
‰‰! "
x
‰‰" #
=>
‰‰$ &
x
‰‰' (
.
‰‰( )
Set
‰‰) ,
<
‰‰, -
Test
‰‰- 1
>
‰‰1 2
(
‰‰2 3
)
‰‰3 4
,
‰‰4 5
Times
‰‰6 ;
.
‰‰; <
Once
‰‰< @
)
‰‰@ A
;
‰‰A B
tests
ÂÂ 
.
ÂÂ 
Should
ÂÂ 
(
ÂÂ 
)
ÂÂ 
.
ÂÂ 
NotBeNullOrEmpty
ÂÂ +
(
ÂÂ+ ,
)
ÂÂ, -
.
ÂÂ- .
And
ÂÂ. 1
.
ÂÂ1 2
OnlyContain
ÂÂ2 =
(
ÂÂ= >
x
ÂÂ> ?
=>
ÂÂ@ B
x
ÂÂC D
.
ÂÂD E
Active
ÂÂE K
,
ÂÂK L
$str
ÂÂM e
)
ÂÂe f
.
ÂÂf g
And
ÂÂg j
.
ÂÂj k
	HaveCount
ÂÂk t
(
ÂÂt u
$num
ÂÂu w
)
ÂÂw x
;
ÂÂx y
tests
ÊÊ 
.
ÊÊ 

TotalCount
ÊÊ 
.
ÊÊ 
Should
ÊÊ #
(
ÊÊ# $
)
ÊÊ$ %
.
ÊÊ% &
Be
ÊÊ& (
(
ÊÊ( )
$num
ÊÊ) +
)
ÊÊ+ ,
;
ÊÊ, -
tests
ÁÁ 
.
ÁÁ 
	PageCount
ÁÁ 
.
ÁÁ 
Should
ÁÁ "
(
ÁÁ" #
)
ÁÁ# $
.
ÁÁ$ %
Be
ÁÁ% '
(
ÁÁ' (
$num
ÁÁ( *
)
ÁÁ* +
;
ÁÁ+ ,
tests
ËË 
.
ËË 
First
ËË 
(
ËË 
)
ËË 
.
ËË 
Should
ËË  
(
ËË  !
)
ËË! "
.
ËË" #
Be
ËË# %
(
ËË% &
mockedTests
ËË& 1
[
ËË1 2
$num
ËË2 3
]
ËË3 4
)
ËË4 5
;
ËË5 6
tests
ÈÈ 
.
ÈÈ 
Last
ÈÈ 
(
ÈÈ 
)
ÈÈ 
.
ÈÈ 
Should
ÈÈ 
(
ÈÈ  
)
ÈÈ  !
.
ÈÈ! "
Be
ÈÈ" $
(
ÈÈ$ %
mockedTests
ÈÈ% 0
[
ÈÈ0 1
$num
ÈÈ1 3
]
ÈÈ3 4
)
ÈÈ4 5
;
ÈÈ5 6
}
ÍÍ 	
[
ÏÏ 	
Fact
ÏÏ	 
]
ÏÏ 
public
ÌÌ 
void
ÌÌ P
BReturnsFirstPageOrderedDescendingActivesGivenPageSize10AndTotal100
ÌÌ V
(
ÌÌV W
)
ÌÌW X
{
ÓÓ 	
List
ÔÔ 
<
ÔÔ 
Test
ÔÔ 
>
ÔÔ 
mockedTests
ÔÔ "
=
ÔÔ# $
	MockTests
ÔÔ% .
(
ÔÔ. /
$num
ÔÔ/ 2
)
ÔÔ2 3
;
ÔÔ3 4
mockedTests
 
.
 
First
 
(
 
)
 
.
  

Deactivate
  *
(
* +
)
+ ,
;
, -
mockedTests
ÒÒ 
.
ÒÒ 
Last
ÒÒ 
(
ÒÒ 
)
ÒÒ 
.
ÒÒ 

Deactivate
ÒÒ )
(
ÒÒ) *
)
ÒÒ* +
;
ÒÒ+ ,
Mock
ÛÛ 
<
ÛÛ 
DbSet
ÛÛ 
<
ÛÛ 
Test
ÛÛ 
>
ÛÛ 
>
ÛÛ 
	mockDbSet
ÛÛ '
=
ÛÛ( )
new
ÛÛ* -
Mock
ÛÛ. 2
<
ÛÛ2 3
DbSet
ÛÛ3 8
<
ÛÛ8 9
Test
ÛÛ9 =
>
ÛÛ= >
>
ÛÛ> ?
(
ÛÛ? @
)
ÛÛ@ A
;
ÛÛA B
	mockDbSet
ÙÙ 
.
ÙÙ 
SetupAsQueryable
ÙÙ &
(
ÙÙ& '
mockedTests
ÙÙ' 2
)
ÙÙ2 3
;
ÙÙ3 4
Mock
ˆˆ 
<
ˆˆ "
IQueryableUnitOfWork
ˆˆ %
>
ˆˆ% &
mockUnitOfWork
ˆˆ' 5
=
ˆˆ6 7
new
ˆˆ8 ;
Mock
ˆˆ< @
<
ˆˆ@ A"
IQueryableUnitOfWork
ˆˆA U
>
ˆˆU V
(
ˆˆV W
)
ˆˆW X
;
ˆˆX Y
mockUnitOfWork
˜˜ 
.
˜˜ 
Setup
˜˜  
(
˜˜  !
p
˜˜! "
=>
˜˜# %
p
˜˜& '
.
˜˜' (
Set
˜˜( +
<
˜˜+ ,
Test
˜˜, 0
>
˜˜0 1
(
˜˜1 2
)
˜˜2 3
)
˜˜3 4
.
˜˜4 5
Returns
˜˜5 <
(
˜˜< =
	mockDbSet
˜˜= F
.
˜˜F G
Object
˜˜G M
)
˜˜M N
;
˜˜N O
ISpecification
˘˘ 
<
˘˘ 
Test
˘˘ 
>
˘˘  
spec
˘˘! %
=
˘˘& '
new
˘˘( +!
DirectSpecification
˘˘, ?
<
˘˘? @
Test
˘˘@ D
>
˘˘D E
(
˘˘E F
t
˘˘F G
=>
˘˘H J
t
˘˘K L
.
˘˘L M
Active
˘˘M S
)
˘˘S T
;
˘˘T U
IPagination
˙˙ 

pagination
˙˙ "
=
˙˙# $
new
˙˙% (

Pagination
˙˙) 3
(
˙˙3 4
$num
˙˙4 5
,
˙˙5 6
$num
˙˙7 9
,
˙˙9 :
$str
˙˙; ?
,
˙˙? @
false
˙˙A F
)
˙˙F G
;
˙˙G H
IRepository
˚˚ 
<
˚˚ 
Test
˚˚ 
>
˚˚ 
testRepository
˚˚ ,
=
˚˚- .
new
˚˚/ 2#
GenericTestRepository
˚˚3 H
(
˚˚H I
mockUnitOfWork
˚˚I W
.
˚˚W X
Object
˚˚X ^
)
˚˚^ _
;
˚˚_ `

IPagedList
¸¸ 
<
¸¸ 
Test
¸¸ 
>
¸¸ 
tests
¸¸ "
=
¸¸# $
testRepository
¸¸% 3
.
¸¸3 4
Find
¸¸4 8
(
¸¸8 9
spec
¸¸9 =
,
¸¸= >

pagination
¸¸? I
)
¸¸I J
;
¸¸J K
mockUnitOfWork
˛˛ 
.
˛˛ 
Verify
˛˛ !
(
˛˛! "
x
˛˛" #
=>
˛˛$ &
x
˛˛' (
.
˛˛( )
Set
˛˛) ,
<
˛˛, -
Test
˛˛- 1
>
˛˛1 2
(
˛˛2 3
)
˛˛3 4
,
˛˛4 5
Times
˛˛6 ;
.
˛˛; <
Once
˛˛< @
)
˛˛@ A
;
˛˛A B
tests
ˇˇ 
.
ˇˇ 
Should
ˇˇ 
(
ˇˇ 
)
ˇˇ 
.
ˇˇ 
NotBeNullOrEmpty
ˇˇ +
(
ˇˇ+ ,
)
ˇˇ, -
.
ˇˇ- .
And
ˇˇ. 1
.
ˇˇ1 2
OnlyContain
ˇˇ2 =
(
ˇˇ= >
x
ˇˇ> ?
=>
ˇˇ@ B
x
ˇˇC D
.
ˇˇD E
Active
ˇˇE K
,
ˇˇK L
$str
ˇˇM e
)
ˇˇe f
.
ˇˇf g
And
ˇˇg j
.
ˇˇj k
	HaveCount
ˇˇk t
(
ˇˇt u
$num
ˇˇu w
)
ˇˇw x
;
ˇˇx y
tests
ÄÄ 
.
ÄÄ 

TotalCount
ÄÄ 
.
ÄÄ 
Should
ÄÄ #
(
ÄÄ# $
)
ÄÄ$ %
.
ÄÄ% &
Be
ÄÄ& (
(
ÄÄ( )
$num
ÄÄ) +
)
ÄÄ+ ,
;
ÄÄ, -
tests
ÅÅ 
.
ÅÅ 
	PageCount
ÅÅ 
.
ÅÅ 
Should
ÅÅ "
(
ÅÅ" #
)
ÅÅ# $
.
ÅÅ$ %
Be
ÅÅ% '
(
ÅÅ' (
$num
ÅÅ( *
)
ÅÅ* +
;
ÅÅ+ ,
tests
ÇÇ 
.
ÇÇ 
First
ÇÇ 
(
ÇÇ 
)
ÇÇ 
.
ÇÇ 
Should
ÇÇ  
(
ÇÇ  !
)
ÇÇ! "
.
ÇÇ" #
Be
ÇÇ# %
(
ÇÇ% &
mockedTests
ÇÇ& 1
[
ÇÇ1 2
$num
ÇÇ2 4
]
ÇÇ4 5
)
ÇÇ5 6
;
ÇÇ6 7
tests
ÉÉ 
.
ÉÉ 
Last
ÉÉ 
(
ÉÉ 
)
ÉÉ 
.
ÉÉ 
Should
ÉÉ 
(
ÉÉ  
)
ÉÉ  !
.
ÉÉ! "
Be
ÉÉ" $
(
ÉÉ$ %
mockedTests
ÉÉ% 0
[
ÉÉ0 1
$num
ÉÉ1 3
]
ÉÉ3 4
)
ÉÉ4 5
;
ÉÉ5 6
}
ÑÑ 	
[
ÜÜ 	
Fact
ÜÜ	 
]
ÜÜ 
public
áá 
void
áá U
GReturnsFirstPageOrderedDescendingActivesGivenPageSize10AndTotal100Async
áá [
(
áá[ \
)
áá\ ]
{
àà 	
List
ââ 
<
ââ 
Test
ââ 
>
ââ 
mockedTests
ââ "
=
ââ# $
	MockTests
ââ% .
(
ââ. /
$num
ââ/ 2
)
ââ2 3
;
ââ3 4
mockedTests
ää 
.
ää 
First
ää 
(
ää 
)
ää 
.
ää  

Deactivate
ää  *
(
ää* +
)
ää+ ,
;
ää, -
mockedTests
ãã 
.
ãã 
Last
ãã 
(
ãã 
)
ãã 
.
ãã 

Deactivate
ãã )
(
ãã) *
)
ãã* +
;
ãã+ ,
Mock
çç 
<
çç 
DbSet
çç 
<
çç 
Test
çç 
>
çç 
>
çç 
	mockDbSet
çç '
=
çç( )
new
çç* -
Mock
çç. 2
<
çç2 3
DbSet
çç3 8
<
çç8 9
Test
çç9 =
>
çç= >
>
çç> ?
(
çç? @
)
çç@ A
;
ççA B
	mockDbSet
éé 
.
éé #
SetupAsQueryableAsync
éé +
(
éé+ ,
mockedTests
éé, 7
)
éé7 8
;
éé8 9
Mock
êê 
<
êê "
IQueryableUnitOfWork
êê %
>
êê% &
mockUnitOfWork
êê' 5
=
êê6 7
new
êê8 ;
Mock
êê< @
<
êê@ A"
IQueryableUnitOfWork
êêA U
>
êêU V
(
êêV W
)
êêW X
;
êêX Y
mockUnitOfWork
ëë 
.
ëë 
Setup
ëë  
(
ëë  !
p
ëë! "
=>
ëë# %
p
ëë& '
.
ëë' (
Set
ëë( +
<
ëë+ ,
Test
ëë, 0
>
ëë0 1
(
ëë1 2
)
ëë2 3
)
ëë3 4
.
ëë4 5
Returns
ëë5 <
(
ëë< =
	mockDbSet
ëë= F
.
ëëF G
Object
ëëG M
)
ëëM N
;
ëëN O
ISpecification
ìì 
<
ìì 
Test
ìì 
>
ìì  
spec
ìì! %
=
ìì& '
new
ìì( +!
DirectSpecification
ìì, ?
<
ìì? @
Test
ìì@ D
>
ììD E
(
ììE F
t
ììF G
=>
ììH J
t
ììK L
.
ììL M
Active
ììM S
)
ììS T
;
ììT U
IPagination
îî 

pagination
îî "
=
îî# $
new
îî% (

Pagination
îî) 3
(
îî3 4
$num
îî4 5
,
îî5 6
$num
îî7 9
,
îî9 :
$str
îî; ?
,
îî? @
false
îîA F
)
îîF G
;
îîG H
IRepository
ïï 
<
ïï 
Test
ïï 
>
ïï 
testRepository
ïï ,
=
ïï- .
new
ïï/ 2#
GenericTestRepository
ïï3 H
(
ïïH I
mockUnitOfWork
ïïI W
.
ïïW X
Object
ïïX ^
)
ïï^ _
;
ïï_ `

IPagedList
ññ 
<
ññ 
Test
ññ 
>
ññ 
tests
ññ "
=
ññ# $
testRepository
ññ% 3
.
ññ3 4
	FindAsync
ññ4 =
(
ññ= >
spec
ññ> B
,
ññB C

pagination
ññD N
)
ññN O
.
ññO P

GetAwaiter
ññP Z
(
ññZ [
)
ññ[ \
.
ññ\ ]
	GetResult
ññ] f
(
ññf g
)
ññg h
;
ññh i
mockUnitOfWork
òò 
.
òò 
Verify
òò !
(
òò! "
x
òò" #
=>
òò$ &
x
òò' (
.
òò( )
Set
òò) ,
<
òò, -
Test
òò- 1
>
òò1 2
(
òò2 3
)
òò3 4
,
òò4 5
Times
òò6 ;
.
òò; <
Once
òò< @
)
òò@ A
;
òòA B
tests
ôô 
.
ôô 
Should
ôô 
(
ôô 
)
ôô 
.
ôô 
NotBeNullOrEmpty
ôô +
(
ôô+ ,
)
ôô, -
.
ôô- .
And
ôô. 1
.
ôô1 2
OnlyContain
ôô2 =
(
ôô= >
x
ôô> ?
=>
ôô@ B
x
ôôC D
.
ôôD E
Active
ôôE K
,
ôôK L
$str
ôôM e
)
ôôe f
.
ôôf g
And
ôôg j
.
ôôj k
	HaveCount
ôôk t
(
ôôt u
$num
ôôu w
)
ôôw x
;
ôôx y
tests
öö 
.
öö 

TotalCount
öö 
.
öö 
Should
öö #
(
öö# $
)
öö$ %
.
öö% &
Be
öö& (
(
öö( )
$num
öö) +
)
öö+ ,
;
öö, -
tests
õõ 
.
õõ 
	PageCount
õõ 
.
õõ 
Should
õõ "
(
õõ" #
)
õõ# $
.
õõ$ %
Be
õõ% '
(
õõ' (
$num
õõ( *
)
õõ* +
;
õõ+ ,
tests
úú 
.
úú 
First
úú 
(
úú 
)
úú 
.
úú 
Should
úú  
(
úú  !
)
úú! "
.
úú" #
Be
úú# %
(
úú% &
mockedTests
úú& 1
[
úú1 2
$num
úú2 4
]
úú4 5
)
úú5 6
;
úú6 7
tests
ùù 
.
ùù 
Last
ùù 
(
ùù 
)
ùù 
.
ùù 
Should
ùù 
(
ùù  
)
ùù  !
.
ùù! "
Be
ùù" $
(
ùù$ %
mockedTests
ùù% 0
[
ùù0 1
$num
ùù1 3
]
ùù3 4
)
ùù4 5
;
ùù5 6
}
ûû 	
[
†† 	
Fact
††	 
]
†† 
public
°° 
void
°° N
@ReturnsLastPageOrderedAscendingActivesGivenPageSize10AndTotal100
°° T
(
°°T U
)
°°U V
{
¢¢ 	
List
££ 
<
££ 
Test
££ 
>
££ 
mockedTests
££ "
=
££# $
	MockTests
££% .
(
££. /
$num
££/ 2
)
££2 3
;
££3 4
mockedTests
§§ 
.
§§ 
First
§§ 
(
§§ 
)
§§ 
.
§§  

Deactivate
§§  *
(
§§* +
)
§§+ ,
;
§§, -
mockedTests
•• 
.
•• 
Last
•• 
(
•• 
)
•• 
.
•• 

Deactivate
•• )
(
••) *
)
••* +
;
••+ ,
Mock
ßß 
<
ßß 
DbSet
ßß 
<
ßß 
Test
ßß 
>
ßß 
>
ßß 
	mockDbSet
ßß '
=
ßß( )
new
ßß* -
Mock
ßß. 2
<
ßß2 3
DbSet
ßß3 8
<
ßß8 9
Test
ßß9 =
>
ßß= >
>
ßß> ?
(
ßß? @
)
ßß@ A
;
ßßA B
	mockDbSet
®® 
.
®® 
SetupAsQueryable
®® &
(
®®& '
mockedTests
®®' 2
)
®®2 3
;
®®3 4
Mock
™™ 
<
™™ "
IQueryableUnitOfWork
™™ %
>
™™% &
mockUnitOfWork
™™' 5
=
™™6 7
new
™™8 ;
Mock
™™< @
<
™™@ A"
IQueryableUnitOfWork
™™A U
>
™™U V
(
™™V W
)
™™W X
;
™™X Y
mockUnitOfWork
´´ 
.
´´ 
Setup
´´  
(
´´  !
p
´´! "
=>
´´# %
p
´´& '
.
´´' (
Set
´´( +
<
´´+ ,
Test
´´, 0
>
´´0 1
(
´´1 2
)
´´2 3
)
´´3 4
.
´´4 5
Returns
´´5 <
(
´´< =
	mockDbSet
´´= F
.
´´F G
Object
´´G M
)
´´M N
;
´´N O
ISpecification
≠≠ 
<
≠≠ 
Test
≠≠ 
>
≠≠  
spec
≠≠! %
=
≠≠& '
new
≠≠( +!
DirectSpecification
≠≠, ?
<
≠≠? @
Test
≠≠@ D
>
≠≠D E
(
≠≠E F
t
≠≠F G
=>
≠≠H J
t
≠≠K L
.
≠≠L M
Active
≠≠M S
)
≠≠S T
;
≠≠T U
IPagination
ÆÆ 

pagination
ÆÆ "
=
ÆÆ# $
new
ÆÆ% (

Pagination
ÆÆ) 3
(
ÆÆ3 4
$num
ÆÆ4 5
,
ÆÆ5 6
$num
ÆÆ7 9
)
ÆÆ9 :
;
ÆÆ: ;
IRepository
ØØ 
<
ØØ 
Test
ØØ 
>
ØØ 
testRepository
ØØ ,
=
ØØ- .
new
ØØ/ 2#
GenericTestRepository
ØØ3 H
(
ØØH I
mockUnitOfWork
ØØI W
.
ØØW X
Object
ØØX ^
)
ØØ^ _
;
ØØ_ `

IPagedList
∞∞ 
<
∞∞ 
Test
∞∞ 
>
∞∞ 
tests
∞∞ "
=
∞∞# $
testRepository
∞∞% 3
.
∞∞3 4
Find
∞∞4 8
(
∞∞8 9
spec
∞∞9 =
,
∞∞= >

pagination
∞∞? I
)
∞∞I J
;
∞∞J K
mockUnitOfWork
≤≤ 
.
≤≤ 
Verify
≤≤ !
(
≤≤! "
x
≤≤" #
=>
≤≤$ &
x
≤≤' (
.
≤≤( )
Set
≤≤) ,
<
≤≤, -
Test
≤≤- 1
>
≤≤1 2
(
≤≤2 3
)
≤≤3 4
,
≤≤4 5
Times
≤≤6 ;
.
≤≤; <
Once
≤≤< @
)
≤≤@ A
;
≤≤A B
tests
≥≥ 
.
≥≥ 
Should
≥≥ 
(
≥≥ 
)
≥≥ 
.
≥≥ 
NotBeNullOrEmpty
≥≥ +
(
≥≥+ ,
)
≥≥, -
.
≥≥- .
And
≥≥. 1
.
≥≥1 2
OnlyContain
≥≥2 =
(
≥≥= >
x
≥≥> ?
=>
≥≥@ B
x
≥≥C D
.
≥≥D E
Active
≥≥E K
,
≥≥K L
$str
≥≥M e
)
≥≥e f
.
≥≥f g
And
≥≥g j
.
≥≥j k
	HaveCount
≥≥k t
(
≥≥t u
$num
≥≥u v
)
≥≥v w
;
≥≥w x
tests
¥¥ 
.
¥¥ 

TotalCount
¥¥ 
.
¥¥ 
Should
¥¥ #
(
¥¥# $
)
¥¥$ %
.
¥¥% &
Be
¥¥& (
(
¥¥( )
$num
¥¥) +
)
¥¥+ ,
;
¥¥, -
tests
µµ 
.
µµ 
	PageCount
µµ 
.
µµ 
Should
µµ "
(
µµ" #
)
µµ# $
.
µµ$ %
Be
µµ% '
(
µµ' (
$num
µµ( *
)
µµ* +
;
µµ+ ,
tests
∂∂ 
.
∂∂ 
First
∂∂ 
(
∂∂ 
)
∂∂ 
.
∂∂ 
Should
∂∂  
(
∂∂  !
)
∂∂! "
.
∂∂" #
Be
∂∂# %
(
∂∂% &
mockedTests
∂∂& 1
[
∂∂1 2
$num
∂∂2 4
]
∂∂4 5
)
∂∂5 6
;
∂∂6 7
tests
∑∑ 
.
∑∑ 
Last
∑∑ 
(
∑∑ 
)
∑∑ 
.
∑∑ 
Should
∑∑ 
(
∑∑  
)
∑∑  !
.
∑∑! "
Be
∑∑" $
(
∑∑$ %
mockedTests
∑∑% 0
[
∑∑0 1
$num
∑∑1 3
]
∑∑3 4
)
∑∑4 5
;
∑∑5 6
}
∏∏ 	
[
∫∫ 	
Fact
∫∫	 
]
∫∫ 
public
ªª 
void
ªª S
EReturnsLastPageOrderedAscendingActivesGivenPageSize10AndTotal100Async
ªª Y
(
ªªY Z
)
ªªZ [
{
ºº 	
List
ΩΩ 
<
ΩΩ 
Test
ΩΩ 
>
ΩΩ 
mockedTests
ΩΩ "
=
ΩΩ# $
	MockTests
ΩΩ% .
(
ΩΩ. /
$num
ΩΩ/ 2
)
ΩΩ2 3
;
ΩΩ3 4
mockedTests
ææ 
.
ææ 
First
ææ 
(
ææ 
)
ææ 
.
ææ  

Deactivate
ææ  *
(
ææ* +
)
ææ+ ,
;
ææ, -
mockedTests
øø 
.
øø 
Last
øø 
(
øø 
)
øø 
.
øø 

Deactivate
øø )
(
øø) *
)
øø* +
;
øø+ ,
Mock
¡¡ 
<
¡¡ 
DbSet
¡¡ 
<
¡¡ 
Test
¡¡ 
>
¡¡ 
>
¡¡ 
	mockDbSet
¡¡ '
=
¡¡( )
new
¡¡* -
Mock
¡¡. 2
<
¡¡2 3
DbSet
¡¡3 8
<
¡¡8 9
Test
¡¡9 =
>
¡¡= >
>
¡¡> ?
(
¡¡? @
)
¡¡@ A
;
¡¡A B
	mockDbSet
¬¬ 
.
¬¬ #
SetupAsQueryableAsync
¬¬ +
(
¬¬+ ,
mockedTests
¬¬, 7
)
¬¬7 8
;
¬¬8 9
Mock
ƒƒ 
<
ƒƒ "
IQueryableUnitOfWork
ƒƒ %
>
ƒƒ% &
mockUnitOfWork
ƒƒ' 5
=
ƒƒ6 7
new
ƒƒ8 ;
Mock
ƒƒ< @
<
ƒƒ@ A"
IQueryableUnitOfWork
ƒƒA U
>
ƒƒU V
(
ƒƒV W
)
ƒƒW X
;
ƒƒX Y
mockUnitOfWork
≈≈ 
.
≈≈ 
Setup
≈≈  
(
≈≈  !
p
≈≈! "
=>
≈≈# %
p
≈≈& '
.
≈≈' (
Set
≈≈( +
<
≈≈+ ,
Test
≈≈, 0
>
≈≈0 1
(
≈≈1 2
)
≈≈2 3
)
≈≈3 4
.
≈≈4 5
Returns
≈≈5 <
(
≈≈< =
	mockDbSet
≈≈= F
.
≈≈F G
Object
≈≈G M
)
≈≈M N
;
≈≈N O
ISpecification
«« 
<
«« 
Test
«« 
>
««  
spec
««! %
=
««& '
new
««( +!
DirectSpecification
««, ?
<
««? @
Test
««@ D
>
««D E
(
««E F
t
««F G
=>
««H J
t
««K L
.
««L M
Active
««M S
)
««S T
;
««T U
IPagination
»» 

pagination
»» "
=
»»# $
new
»»% (

Pagination
»») 3
(
»»3 4
$num
»»4 5
,
»»5 6
$num
»»7 9
)
»»9 :
;
»»: ;
IRepository
…… 
<
…… 
Test
…… 
>
…… 
testRepository
…… ,
=
……- .
new
……/ 2#
GenericTestRepository
……3 H
(
……H I
mockUnitOfWork
……I W
.
……W X
Object
……X ^
)
……^ _
;
……_ `

IPagedList
   
<
   
Test
   
>
   
tests
   "
=
  # $
testRepository
  % 3
.
  3 4
	FindAsync
  4 =
(
  = >
spec
  > B
,
  B C

pagination
  D N
)
  N O
.
  O P

GetAwaiter
  P Z
(
  Z [
)
  [ \
.
  \ ]
	GetResult
  ] f
(
  f g
)
  g h
;
  h i
mockUnitOfWork
ÃÃ 
.
ÃÃ 
Verify
ÃÃ !
(
ÃÃ! "
x
ÃÃ" #
=>
ÃÃ$ &
x
ÃÃ' (
.
ÃÃ( )
Set
ÃÃ) ,
<
ÃÃ, -
Test
ÃÃ- 1
>
ÃÃ1 2
(
ÃÃ2 3
)
ÃÃ3 4
,
ÃÃ4 5
Times
ÃÃ6 ;
.
ÃÃ; <
Once
ÃÃ< @
)
ÃÃ@ A
;
ÃÃA B
tests
ÕÕ 
.
ÕÕ 
Should
ÕÕ 
(
ÕÕ 
)
ÕÕ 
.
ÕÕ 
NotBeNullOrEmpty
ÕÕ +
(
ÕÕ+ ,
)
ÕÕ, -
.
ÕÕ- .
And
ÕÕ. 1
.
ÕÕ1 2
OnlyContain
ÕÕ2 =
(
ÕÕ= >
x
ÕÕ> ?
=>
ÕÕ@ B
x
ÕÕC D
.
ÕÕD E
Active
ÕÕE K
,
ÕÕK L
$str
ÕÕM e
)
ÕÕe f
.
ÕÕf g
And
ÕÕg j
.
ÕÕj k
	HaveCount
ÕÕk t
(
ÕÕt u
$num
ÕÕu v
)
ÕÕv w
;
ÕÕw x
tests
ŒŒ 
.
ŒŒ 

TotalCount
ŒŒ 
.
ŒŒ 
Should
ŒŒ #
(
ŒŒ# $
)
ŒŒ$ %
.
ŒŒ% &
Be
ŒŒ& (
(
ŒŒ( )
$num
ŒŒ) +
)
ŒŒ+ ,
;
ŒŒ, -
tests
œœ 
.
œœ 
	PageCount
œœ 
.
œœ 
Should
œœ "
(
œœ" #
)
œœ# $
.
œœ$ %
Be
œœ% '
(
œœ' (
$num
œœ( *
)
œœ* +
;
œœ+ ,
tests
–– 
.
–– 
First
–– 
(
–– 
)
–– 
.
–– 
Should
––  
(
––  !
)
––! "
.
––" #
Be
––# %
(
––% &
mockedTests
––& 1
[
––1 2
$num
––2 4
]
––4 5
)
––5 6
;
––6 7
tests
—— 
.
—— 
Last
—— 
(
—— 
)
—— 
.
—— 
Should
—— 
(
——  
)
——  !
.
——! "
Be
——" $
(
——$ %
mockedTests
——% 0
[
——0 1
$num
——1 3
]
——3 4
)
——4 5
;
——5 6
}
““ 	
private
‘‘ 
static
‘‘ 
List
‘‘ 
<
‘‘ 
Test
‘‘  
>
‘‘  !
	MockTests
‘‘" +
(
‘‘+ ,
int
‘‘, /
count
‘‘0 5
)
‘‘5 6
{
’’ 	
List
÷÷ 
<
÷÷ 
Test
÷÷ 
>
÷÷ 
tests
÷÷ 
=
÷÷ 
new
÷÷ "
List
÷÷# '
<
÷÷' (
Test
÷÷( ,
>
÷÷, -
(
÷÷- .
)
÷÷. /
;
÷÷/ 0
for
ÿÿ 
(
ÿÿ 
int
ÿÿ 
i
ÿÿ 
=
ÿÿ 
$num
ÿÿ 
;
ÿÿ 
i
ÿÿ 
<=
ÿÿ  
count
ÿÿ! &
;
ÿÿ& '
i
ÿÿ( )
++
ÿÿ) +
)
ÿÿ+ ,
{
ŸŸ 
tests
⁄⁄ 
.
⁄⁄ 
Add
⁄⁄ 
(
⁄⁄ 
new
⁄⁄ 
Test
⁄⁄ "
(
⁄⁄" #
i
⁄⁄# $
)
⁄⁄$ %
)
⁄⁄% &
;
⁄⁄& '
}
€€ 
return
›› 
tests
›› 
;
›› 
}
ﬁﬁ 	
private
‡‡ 
static
‡‡ 
List
‡‡ 
<
‡‡ 
Test
‡‡  
>
‡‡  !
	MockTests
‡‡" +
(
‡‡+ ,
)
‡‡, -
{
·· 	
return
‚‚ 
	MockTests
‚‚ 
(
‚‚ 
$num
‚‚ 
)
‚‚ 
;
‚‚  
}
„„ 	
}
‰‰ 
}ÂÂ øZ
`C:\Projects\anderson.souza\Ritter\tests\Infra.Data.Seedwork.Tests\Repositories\Repository_Get.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Data 
. 
Tests !
.! "
Repositories" .
{ 
public 

class 
Repository_Get 
{ 
[ 	
Fact	 
] 
public 
void "
ReturnsAnEntityGivenId *
(* +
)+ ,
{ 	
List 
< 
Test 
> 
tests 
= 
	MockTests (
(( )
)) *
;* +
Mock 
< 
DbSet 
< 
Test 
> 
> 
	mockDbSet '
=( )
new* -
Mock. 2
<2 3
DbSet3 8
<8 9
Test9 =
>= >
>> ?
(? @
)@ A
;A B
	mockDbSet 
. 
SetupAsQueryable &
(& '
tests' ,
), -
;- .
Mock 
<  
IQueryableUnitOfWork %
>% &
mockUnitOfWork' 5
=6 7
new8 ;
Mock< @
<@ A 
IQueryableUnitOfWorkA U
>U V
(V W
)W X
;X Y
mockUnitOfWork 
. 
Setup  
(  !
p! "
=># %
p& '
.' (
Set( +
<+ ,
Test, 0
>0 1
(1 2
)2 3
)3 4
.4 5
Returns5 <
(< =
	mockDbSet= F
.F G
ObjectG M
)M N
;N O
IRepository 
< 
Test 
> 
testRepository ,
=- .
new/ 2!
GenericTestRepository3 H
(H I
mockUnitOfWorkI W
.W X
ObjectX ^
)^ _
;_ `
Test 
test 
= 
testRepository &
.& '
Get' *
(* +
$num+ ,
), -
;- .
mockUnitOfWork 
. 
Verify !
(! "
x" #
=>$ &
x' (
.( )
Set) ,
<, -
Test- 1
>1 2
(2 3
)3 4
,4 5
Times6 ;
.; <
Once< @
)@ A
;A B
test 
. 
Should 
( 
) 
. 
	NotBeNull #
(# $
)$ %
;% &
test 
. 
Id 
. 
Should 
( 
) 
. 
Be 
(  
$num  !
)! "
;" #
}   	
["" 	
Fact""	 
]"" 
public## 
void## 
ReturnsNullGivenId## &
(##& '
)##' (
{$$ 	
List%% 
<%% 
Test%% 
>%% 
tests%% 
=%% 
	MockTests%% (
(%%( )
)%%) *
;%%* +
Mock'' 
<'' 
DbSet'' 
<'' 
Test'' 
>'' 
>'' 
	mockDbSet'' '
=''( )
new''* -
Mock''. 2
<''2 3
DbSet''3 8
<''8 9
Test''9 =
>''= >
>''> ?
(''? @
)''@ A
;''A B
Mock(( 
<((  
IQueryableUnitOfWork(( %
>((% &
mockUnitOfWork((' 5
=((6 7
new((8 ;
Mock((< @
<((@ A 
IQueryableUnitOfWork((A U
>((U V
(((V W
)((W X
;((X Y
	mockDbSet** 
.** 
SetupAsQueryable** &
(**& '
tests**' ,
)**, -
;**- .
mockUnitOfWork++ 
.++ 
Setup++  
(++  !
p++! "
=>++# %
p++& '
.++' (
Set++( +
<+++ ,
Test++, 0
>++0 1
(++1 2
)++2 3
)++3 4
.++4 5
Returns++5 <
(++< =
	mockDbSet++= F
.++F G
Object++G M
)++M N
;++N O
IRepository-- 
<-- 
Test-- 
>-- 
testRepository-- ,
=--- .
new--/ 2!
GenericTestRepository--3 H
(--H I
mockUnitOfWork--I W
.--W X
Object--X ^
)--^ _
;--_ `
Test.. 
test.. 
=.. 
testRepository.. &
...& '
Get..' *
(..* +
$num..+ ,
).., -
;..- .
mockUnitOfWork00 
.00 
Verify00 !
(00! "
x00" #
=>00$ &
x00' (
.00( )
Set00) ,
<00, -
Test00- 1
>001 2
(002 3
)003 4
,004 5
Times006 ;
.00; <
Once00< @
)00@ A
;00A B
test11 
.11 
Should11 
(11 
)11 
.11 
BeNull11  
(11  !
)11! "
;11" #
}22 	
[44 	
Fact44	 
]44 
public55 
void55 '
ReturnsAnEntityGivenIdAsync55 /
(55/ 0
)550 1
{66 	
List77 
<77 
Test77 
>77 
tests77 
=77 
	MockTests77 (
(77( )
)77) *
;77* +
Mock99 
<99 
DbSet99 
<99 
Test99 
>99 
>99 
	mockDbSet99 '
=99( )
new99* -
Mock99. 2
<992 3
DbSet993 8
<998 9
Test999 =
>99= >
>99> ?
(99? @
)99@ A
;99A B
Mock:: 
<::  
IQueryableUnitOfWork:: %
>::% &
mockUnitOfWork::' 5
=::6 7
new::8 ;
Mock::< @
<::@ A 
IQueryableUnitOfWork::A U
>::U V
(::V W
)::W X
;::X Y
	mockDbSet<< 
.<< !
SetupAsQueryableAsync<< +
(<<+ ,
tests<<, 1
)<<1 2
;<<2 3
mockUnitOfWork== 
.== 
Setup==  
(==  !
p==! "
=>==# %
p==& '
.==' (
Set==( +
<==+ ,
Test==, 0
>==0 1
(==1 2
)==2 3
)==3 4
.==4 5
Returns==5 <
(==< =
	mockDbSet=== F
.==F G
Object==G M
)==M N
;==N O
IRepository?? 
<?? 
Test?? 
>?? 
testRepository?? ,
=??- .
new??/ 2!
GenericTestRepository??3 H
(??H I
mockUnitOfWork??I W
.??W X
Object??X ^
)??^ _
;??_ `
Test@@ 
test@@ 
=@@ 
testRepository@@ &
.@@& '
GetAsync@@' /
(@@/ 0
$num@@0 1
)@@1 2
.@@2 3

GetAwaiter@@3 =
(@@= >
)@@> ?
.@@? @
	GetResult@@@ I
(@@I J
)@@J K
;@@K L
mockUnitOfWorkBB 
.BB 
VerifyBB !
(BB! "
xBB" #
=>BB$ &
xBB' (
.BB( )
SetBB) ,
<BB, -
TestBB- 1
>BB1 2
(BB2 3
)BB3 4
,BB4 5
TimesBB6 ;
.BB; <
OnceBB< @
)BB@ A
;BBA B
testCC 
.CC 
ShouldCC 
(CC 
)CC 
.CC 
	NotBeNullCC #
(CC# $
)CC$ %
;CC% &
testDD 
.DD 
IdDD 
.DD 
ShouldDD 
(DD 
)DD 
.DD 
BeDD 
(DD  
$numDD  !
)DD! "
;DD" #
}EE 	
[GG 	
FactGG	 
]GG 
publicHH 
voidHH #
ReturnsNullGivenIdAsyncHH +
(HH+ ,
)HH, -
{II 	
ListJJ 
<JJ 
TestJJ 
>JJ 
testsJJ 
=JJ 
	MockTestsJJ (
(JJ( )
)JJ) *
;JJ* +
MockLL 
<LL 
DbSetLL 
<LL 
TestLL 
>LL 
>LL 
	mockDbSetLL '
=LL( )
newLL* -
MockLL. 2
<LL2 3
DbSetLL3 8
<LL8 9
TestLL9 =
>LL= >
>LL> ?
(LL? @
)LL@ A
;LLA B
MockMM 
<MM  
IQueryableUnitOfWorkMM %
>MM% &
mockUnitOfWorkMM' 5
=MM6 7
newMM8 ;
MockMM< @
<MM@ A 
IQueryableUnitOfWorkMMA U
>MMU V
(MMV W
)MMW X
;MMX Y
	mockDbSetOO 
.OO !
SetupAsQueryableAsyncOO +
(OO+ ,
testsOO, 1
)OO1 2
;OO2 3
mockUnitOfWorkPP 
.PP 
SetupPP  
(PP  !
pPP! "
=>PP# %
pPP& '
.PP' (
SetPP( +
<PP+ ,
TestPP, 0
>PP0 1
(PP1 2
)PP2 3
)PP3 4
.PP4 5
ReturnsPP5 <
(PP< =
	mockDbSetPP= F
.PPF G
ObjectPPG M
)PPM N
;PPN O
IRepositoryRR 
<RR 
TestRR 
>RR 
testRepositoryRR ,
=RR- .
newRR/ 2!
GenericTestRepositoryRR3 H
(RRH I
mockUnitOfWorkRRI W
.RRW X
ObjectRRX ^
)RR^ _
;RR_ `
TestSS 
testSS 
=SS 
testRepositorySS &
.SS& '
GetAsyncSS' /
(SS/ 0
$numSS0 1
)SS1 2
.SS2 3

GetAwaiterSS3 =
(SS= >
)SS> ?
.SS? @
	GetResultSS@ I
(SSI J
)SSJ K
;SSK L
mockUnitOfWorkUU 
.UU 
VerifyUU !
(UU! "
xUU" #
=>UU$ &
xUU' (
.UU( )
SetUU) ,
<UU, -
TestUU- 1
>UU1 2
(UU2 3
)UU3 4
,UU4 5
TimesUU6 ;
.UU; <
OnceUU< @
)UU@ A
;UUA B
testVV 
.VV 
ShouldVV 
(VV 
)VV 
.VV 
BeNullVV  
(VV  !
)VV! "
;VV" #
}WW 	
privateYY 
staticYY 
ListYY 
<YY 
TestYY  
>YY  !
	MockTestsYY" +
(YY+ ,
)YY, -
{ZZ 	
return[[ 
new[[ 
List[[ 
<[[ 
Test[[  
>[[  !
{\\ 
new]] 
Test]] 
(]] 
$num]] 
)]] 
,]] 
new^^ 
Test^^ 
(^^ 
$num^^ 
)^^ 
,^^ 
new__ 
Test__ 
(__ 
$num__ 
)__ 
,__ 
new`` 
Test`` 
(`` 
$num`` 
)`` 
,`` 
newaa 
Testaa 
(aa 
$numaa 
)aa 
}bb 
;bb 
}cc 	
}dd 
}ee ’˝
cC:\Projects\anderson.souza\Ritter\tests\Infra.Data.Seedwork.Tests\Repositories\Repository_Remove.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Data 
. 
Tests !
.! "
Repositories" .
{ 
public 

class 
Repository_Remove "
{ 
[ 	
Fact	 
] 
public 
void 5
)CallSaveChangesSuccessfullyGivenOneEntity =
(= >
)> ?
{ 	
List 
< 
Test 
> 
mockedTests "
=# $
new% (
List) -
<- .
Test. 2
>2 3
(3 4
)4 5
;5 6
Mock 
< 
DbSet 
< 
Test 
> 
> 
	mockDbSet '
=( )
new* -
Mock. 2
<2 3
DbSet3 8
<8 9
Test9 =
>= >
>> ?
(? @
)@ A
;A B
	mockDbSet 
. 
SetupAsQueryable &
(& '
mockedTests' 2
)2 3
;3 4
Mock 
<  
IQueryableUnitOfWork %
>% &
mockUnitOfWork' 5
=6 7
new8 ;
Mock< @
<@ A 
IQueryableUnitOfWorkA U
>U V
(V W
)W X
;X Y
mockUnitOfWork 
. 
Setup  
(  !
p! "
=># %
p& '
.' (
Set( +
<+ ,
Test, 0
>0 1
(1 2
)2 3
)3 4
.4 5
Returns5 <
(< =
	mockDbSet= F
.F G
ObjectG M
)M N
;N O
mockUnitOfWork 
. 
Setup  
(  !
p! "
=># %
p& '
.' (
SaveChanges( 3
(3 4
)4 5
)5 6
;6 7
IRepository 
< 
Test 
> 
testRepository ,
=- .
new/ 2!
GenericTestRepository3 H
(H I
mockUnitOfWorkI W
.W X
ObjectX ^
)^ _
;_ `
Test 
test 
= 
new 
Test  
(  !
)! "
;" #
testRepository   
.   
Remove   !
(  ! "
test  " &
)  & '
;  ' (
mockUnitOfWork"" 
."" 
Verify"" !
(""! "
x""" #
=>""$ &
x""' (
.""( )
Set"") ,
<"", -
Test""- 1
>""1 2
(""2 3
)""3 4
,""4 5
Times""6 ;
.""; <
Once""< @
)""@ A
;""A B
mockUnitOfWork## 
.## 
Verify## !
(##! "
x##" #
=>##$ &
x##' (
.##( )
SaveChanges##) 4
(##4 5
)##5 6
,##6 7
Times##8 =
.##= >
Once##> B
)##B C
;##C D
}$$ 	
[&& 	
Fact&&	 
]&& 
public'' 
void'' :
.CallSaveChangesSuccessfullyGivenOneEntityAsync'' B
(''B C
)''C D
{(( 	
List)) 
<)) 
Test)) 
>)) 
mockedTests)) "
=))# $
new))% (
List))) -
<))- .
Test)). 2
>))2 3
())3 4
)))4 5
;))5 6
Mock++ 
<++ 
DbSet++ 
<++ 
Test++ 
>++ 
>++ 
	mockDbSet++ '
=++( )
new++* -
Mock++. 2
<++2 3
DbSet++3 8
<++8 9
Test++9 =
>++= >
>++> ?
(++? @
)++@ A
;++A B
	mockDbSet,, 
.,, !
SetupAsQueryableAsync,, +
(,,+ ,
mockedTests,,, 7
),,7 8
;,,8 9
Mock.. 
<..  
IQueryableUnitOfWork.. %
>..% &
mockUnitOfWork..' 5
=..6 7
new..8 ;
Mock..< @
<..@ A 
IQueryableUnitOfWork..A U
>..U V
(..V W
)..W X
;..X Y
mockUnitOfWork// 
.// 
Setup//  
(//  !
p//! "
=>//# %
p//& '
.//' (
Set//( +
<//+ ,
Test//, 0
>//0 1
(//1 2
)//2 3
)//3 4
.//4 5
Returns//5 <
(//< =
	mockDbSet//= F
.//F G
Object//G M
)//M N
;//N O
mockUnitOfWork00 
.00 
Setup00  
(00  !
p00! "
=>00# %
p00& '
.00' (
SaveChangesAsync00( 8
(008 9
)009 :
)00: ;
.00; <
Returns00< C
(00C D
Task00D H
.00H I

FromResult00I S
(00S T
It00T V
.00V W
IsAny00W \
<00\ ]
int00] `
>00` a
(00a b
)00b c
)00c d
)00d e
;00e f
IRepository22 
<22 
Test22 
>22 
testRepository22 ,
=22- .
new22/ 2!
GenericTestRepository223 H
(22H I
mockUnitOfWork22I W
.22W X
Object22X ^
)22^ _
;22_ `
Test33 
test33 
=33 
new33 
Test33  
(33  !
)33! "
;33" #
testRepository44 
.44 
RemoveAsync44 &
(44& '
test44' +
)44+ ,
.44, -

GetAwaiter44- 7
(447 8
)448 9
.449 :
	GetResult44: C
(44C D
)44D E
;44E F
mockUnitOfWork66 
.66 
Verify66 !
(66! "
x66" #
=>66$ &
x66' (
.66( )
Set66) ,
<66, -
Test66- 1
>661 2
(662 3
)663 4
,664 5
Times666 ;
.66; <
Once66< @
)66@ A
;66A B
mockUnitOfWork77 
.77 
Verify77 !
(77! "
x77" #
=>77$ &
x77' (
.77( )
SaveChangesAsync77) 9
(779 :
)77: ;
,77; <
Times77= B
.77B C
Once77C G
)77G H
;77H I
}88 	
[:: 	
Fact::	 
]:: 
public;; 
void;; 6
*ThrowsArgumentNullExceptionGivenNullEntity;; >
(;;> ?
);;? @
{<< 	
Mock== 
<==  
IQueryableUnitOfWork== %
>==% &
mockUnitOfWork==' 5
===6 7
new==8 ;
Mock==< @
<==@ A 
IQueryableUnitOfWork==A U
>==U V
(==V W
)==W X
;==X Y
Action?? 
act?? 
=?? 
(?? 
)?? 
=>?? 
{@@ 
IRepositoryAA 
<AA 
TestAA  
>AA  !
testRepositoryAA" 0
=AA1 2
newAA3 6!
GenericTestRepositoryAA7 L
(AAL M
mockUnitOfWorkAAM [
.AA[ \
ObjectAA\ b
)AAb c
;AAc d
testRepositoryBB 
.BB 
RemoveBB %
(BB% &
(BB& '
TestBB' +
)BB+ ,
nullBB- 1
)BB1 2
;BB2 3
}CC 
;CC 
actEE 
.EE 
ShouldEE 
(EE 
)EE 
.EE 
ThrowEE 
<EE !
ArgumentNullExceptionEE 4
>EE4 5
(EE5 6
)EE6 7
.EE7 8
AndEE8 ;
.EE; <
	ParamNameEE< E
.EEE F
ShouldEEF L
(EEL M
)EEM N
.EEN O
BeEEO Q
(EEQ R
$strEER Z
)EEZ [
;EE[ \
}FF 	
[HH 	
FactHH	 
]HH 
publicII 
voidII ;
/ThrowsArgumentNullExceptionGivenNullEntityAsyncII C
(IIC D
)IID E
{JJ 	
MockKK 
<KK  
IQueryableUnitOfWorkKK %
>KK% &
mockUnitOfWorkKK' 5
=KK6 7
newKK8 ;
MockKK< @
<KK@ A 
IQueryableUnitOfWorkKKA U
>KKU V
(KKV W
)KKW X
;KKX Y
ActionMM 
actMM 
=MM 
(MM 
)MM 
=>MM 
{NN 
IRepositoryOO 
<OO 
TestOO  
>OO  !
testRepositoryOO" 0
=OO1 2
newOO3 6!
GenericTestRepositoryOO7 L
(OOL M
mockUnitOfWorkOOM [
.OO[ \
ObjectOO\ b
)OOb c
;OOc d
testRepositoryPP 
.PP 
RemoveAsyncPP *
(PP* +
(PP+ ,
TestPP, 0
)PP0 1
nullPP2 6
)PP6 7
.PP7 8

GetAwaiterPP8 B
(PPB C
)PPC D
.PPD E
	GetResultPPE N
(PPN O
)PPO P
;PPP Q
}QQ 
;QQ 
actSS 
.SS 
ShouldSS 
(SS 
)SS 
.SS 
ThrowSS 
<SS !
ArgumentNullExceptionSS 4
>SS4 5
(SS5 6
)SS6 7
.SS7 8
AndSS8 ;
.SS; <
	ParamNameSS< E
.SSE F
ShouldSSF L
(SSL M
)SSM N
.SSN O
BeSSO Q
(SSQ R
$strSSR Z
)SSZ [
;SS[ \
}TT 	
[VV 	
FactVV	 
]VV 
publicWW 
voidWW 8
,CallSaveChangesSuccessfullyGivenManyEntitiesWW @
(WW@ A
)WWA B
{XX 	
ListYY 
<YY 
TestYY 
>YY 
mockedTestsYY "
=YY# $
newYY% (
ListYY) -
<YY- .
TestYY. 2
>YY2 3
(YY3 4
)YY4 5
;YY5 6
Mock[[ 
<[[ 
DbSet[[ 
<[[ 
Test[[ 
>[[ 
>[[ 
	mockDbSet[[ '
=[[( )
new[[* -
Mock[[. 2
<[[2 3
DbSet[[3 8
<[[8 9
Test[[9 =
>[[= >
>[[> ?
([[? @
)[[@ A
;[[A B
	mockDbSet\\ 
.\\ 
SetupAsQueryable\\ &
(\\& '
mockedTests\\' 2
)\\2 3
;\\3 4
Mock^^ 
<^^  
IQueryableUnitOfWork^^ %
>^^% &
mockUnitOfWork^^' 5
=^^6 7
new^^8 ;
Mock^^< @
<^^@ A 
IQueryableUnitOfWork^^A U
>^^U V
(^^V W
)^^W X
;^^X Y
mockUnitOfWork__ 
.__ 
Setup__  
(__  !
p__! "
=>__# %
p__& '
.__' (
Set__( +
<__+ ,
Test__, 0
>__0 1
(__1 2
)__2 3
)__3 4
.__4 5
Returns__5 <
(__< =
	mockDbSet__= F
.__F G
Object__G M
)__M N
;__N O
mockUnitOfWork`` 
.`` 
Setup``  
(``  !
p``! "
=>``# %
p``& '
.``' (
SaveChanges``( 3
(``3 4
)``4 5
)``5 6
;``6 7
IRepositorybb 
<bb 
Testbb 
>bb 
testRepositorybb ,
=bb- .
newbb/ 2!
GenericTestRepositorybb3 H
(bbH I
mockUnitOfWorkbbI W
.bbW X
ObjectbbX ^
)bb^ _
;bb_ `
Listcc 
<cc 
Testcc 
>cc 
testscc 
=cc 
	MockTestscc (
(cc( )
)cc) *
;cc* +
testRepositorydd 
.dd 
Removedd !
(dd! "
testsdd" '
)dd' (
;dd( )
mockUnitOfWorkff 
.ff 
Verifyff !
(ff! "
xff" #
=>ff$ &
xff' (
.ff( )
Setff) ,
<ff, -
Testff- 1
>ff1 2
(ff2 3
)ff3 4
,ff4 5
Timesff6 ;
.ff; <
Onceff< @
)ff@ A
;ffA B
mockUnitOfWorkgg 
.gg 
Verifygg !
(gg! "
xgg" #
=>gg$ &
xgg' (
.gg( )
SaveChangesgg) 4
(gg4 5
)gg5 6
,gg6 7
Timesgg8 =
.gg= >
Oncegg> B
)ggB C
;ggC D
}hh 	
[jj 	
Factjj	 
]jj 
publickk 
voidkk =
1CallSaveChangesSuccessfullyGivenManyEntitiesAsynckk E
(kkE F
)kkF G
{ll 	
Listmm 
<mm 
Testmm 
>mm 
mockedTestsmm "
=mm# $
newmm% (
Listmm) -
<mm- .
Testmm. 2
>mm2 3
(mm3 4
)mm4 5
;mm5 6
Mockoo 
<oo 
DbSetoo 
<oo 
Testoo 
>oo 
>oo 
	mockDbSetoo '
=oo( )
newoo* -
Mockoo. 2
<oo2 3
DbSetoo3 8
<oo8 9
Testoo9 =
>oo= >
>oo> ?
(oo? @
)oo@ A
;ooA B
	mockDbSetpp 
.pp 
SetupAsQueryablepp &
(pp& '
mockedTestspp' 2
)pp2 3
;pp3 4
Mockrr 
<rr  
IQueryableUnitOfWorkrr %
>rr% &
mockUnitOfWorkrr' 5
=rr6 7
newrr8 ;
Mockrr< @
<rr@ A 
IQueryableUnitOfWorkrrA U
>rrU V
(rrV W
)rrW X
;rrX Y
mockUnitOfWorkss 
.ss 
Setupss  
(ss  !
pss! "
=>ss# %
pss& '
.ss' (
Setss( +
<ss+ ,
Testss, 0
>ss0 1
(ss1 2
)ss2 3
)ss3 4
.ss4 5
Returnsss5 <
(ss< =
	mockDbSetss= F
.ssF G
ObjectssG M
)ssM N
;ssN O
mockUnitOfWorktt 
.tt 
Setuptt  
(tt  !
ptt! "
=>tt# %
ptt& '
.tt' (
SaveChangesAsynctt( 8
(tt8 9
)tt9 :
)tt: ;
.tt; <
Returnstt< C
(ttC D
TaskttD H
.ttH I

FromResultttI S
(ttS T
ItttT V
.ttV W
IsAnyttW \
<tt\ ]
inttt] `
>tt` a
(tta b
)ttb c
)ttc d
)ttd e
;tte f
IRepositoryvv 
<vv 
Testvv 
>vv 
testRepositoryvv ,
=vv- .
newvv/ 2!
GenericTestRepositoryvv3 H
(vvH I
mockUnitOfWorkvvI W
.vvW X
ObjectvvX ^
)vv^ _
;vv_ `
Listww 
<ww 
Testww 
>ww 
testsww 
=ww 
	MockTestsww (
(ww( )
)ww) *
;ww* +
testRepositoryxx 
.xx 
RemoveAsyncxx &
(xx& '
testsxx' ,
)xx, -
.xx- .

GetAwaiterxx. 8
(xx8 9
)xx9 :
.xx: ;
	GetResultxx; D
(xxD E
)xxE F
;xxF G
mockUnitOfWorkzz 
.zz 
Verifyzz !
(zz! "
xzz" #
=>zz$ &
xzz' (
.zz( )
Setzz) ,
<zz, -
Testzz- 1
>zz1 2
(zz2 3
)zz3 4
,zz4 5
Timeszz6 ;
.zz; <
Oncezz< @
)zz@ A
;zzA B
mockUnitOfWork{{ 
.{{ 
Verify{{ !
({{! "
x{{" #
=>{{$ &
x{{' (
.{{( )
SaveChangesAsync{{) 9
({{9 :
){{: ;
,{{; <
Times{{= B
.{{B C
Once{{C G
){{G H
;{{H I
}|| 	
[~~ 	
Fact~~	 
]~~ 
public 
void @
4ThrowsArgumentNullExceptionGivenNullEntityEnumerable H
(H I
)I J
{
ÄÄ 	
Mock
ÅÅ 
<
ÅÅ "
IQueryableUnitOfWork
ÅÅ %
>
ÅÅ% &
mockUnitOfWork
ÅÅ' 5
=
ÅÅ6 7
new
ÅÅ8 ;
Mock
ÅÅ< @
<
ÅÅ@ A"
IQueryableUnitOfWork
ÅÅA U
>
ÅÅU V
(
ÅÅV W
)
ÅÅW X
;
ÅÅX Y
Action
ÉÉ 
act
ÉÉ 
=
ÉÉ 
(
ÉÉ 
)
ÉÉ 
=>
ÉÉ 
{
ÑÑ 
IRepository
ÖÖ 
<
ÖÖ 
Test
ÖÖ  
>
ÖÖ  !
testRepository
ÖÖ" 0
=
ÖÖ1 2
new
ÖÖ3 6#
GenericTestRepository
ÖÖ7 L
(
ÖÖL M
mockUnitOfWork
ÖÖM [
.
ÖÖ[ \
Object
ÖÖ\ b
)
ÖÖb c
;
ÖÖc d
testRepository
ÜÜ 
.
ÜÜ 
Remove
ÜÜ %
(
ÜÜ% &
(
ÜÜ& '
IEnumerable
ÜÜ' 2
<
ÜÜ2 3
Test
ÜÜ3 7
>
ÜÜ7 8
)
ÜÜ8 9
null
ÜÜ: >
)
ÜÜ> ?
;
ÜÜ? @
}
áá 
;
áá 
act
ââ 
.
ââ 
Should
ââ 
(
ââ 
)
ââ 
.
ââ 
Throw
ââ 
<
ââ #
ArgumentNullException
ââ 4
>
ââ4 5
(
ââ5 6
)
ââ6 7
.
ââ7 8
And
ââ8 ;
.
ââ; <
	ParamName
ââ< E
.
ââE F
Should
ââF L
(
ââL M
)
ââM N
.
ââN O
Be
ââO Q
(
ââQ R
$str
ââR \
)
ââ\ ]
;
ââ] ^
}
ää 	
[
åå 	
Fact
åå	 
]
åå 
public
çç 
void
çç G
9ThrowsArgumentNullExceptionGivenNullEntityEnumerableAsync
çç M
(
ççM N
)
ççN O
{
éé 	
Mock
èè 
<
èè "
IQueryableUnitOfWork
èè %
>
èè% &
mockUnitOfWork
èè' 5
=
èè6 7
new
èè8 ;
Mock
èè< @
<
èè@ A"
IQueryableUnitOfWork
èèA U
>
èèU V
(
èèV W
)
èèW X
;
èèX Y
Action
ëë 
act
ëë 
=
ëë 
(
ëë 
)
ëë 
=>
ëë 
{
íí 
IRepository
ìì 
<
ìì 
Test
ìì  
>
ìì  !
testRepository
ìì" 0
=
ìì1 2
new
ìì3 6#
GenericTestRepository
ìì7 L
(
ììL M
mockUnitOfWork
ììM [
.
ìì[ \
Object
ìì\ b
)
ììb c
;
ììc d
testRepository
îî 
.
îî 
RemoveAsync
îî *
(
îî* +
(
îî+ ,
IEnumerable
îî, 7
<
îî7 8
Test
îî8 <
>
îî< =
)
îî= >
null
îî? C
)
îîC D
.
îîD E

GetAwaiter
îîE O
(
îîO P
)
îîP Q
.
îîQ R
	GetResult
îîR [
(
îî[ \
)
îî\ ]
;
îî] ^
}
ïï 
;
ïï 
act
óó 
.
óó 
Should
óó 
(
óó 
)
óó 
.
óó 
Throw
óó 
<
óó #
ArgumentNullException
óó 4
>
óó4 5
(
óó5 6
)
óó6 7
.
óó7 8
And
óó8 ;
.
óó; <
	ParamName
óó< E
.
óóE F
Should
óóF L
(
óóL M
)
óóM N
.
óóN O
Be
óóO Q
(
óóQ R
$str
óóR \
)
óó\ ]
;
óó] ^
}
òò 	
[
öö 	
Fact
öö	 
]
öö 
public
õõ 
void
õõ ;
-CallSaveChangesSuccessfullyGivenSpecification
õõ A
(
õõA B
)
õõB C
{
úú 	
List
ùù 
<
ùù 
Test
ùù 
>
ùù 
mockedTests
ùù "
=
ùù# $
	MockTests
ùù% .
(
ùù. /
)
ùù/ 0
;
ùù0 1
Mock
üü 
<
üü 
DbSet
üü 
<
üü 
Test
üü 
>
üü 
>
üü 
	mockDbSet
üü '
=
üü( )
new
üü* -
Mock
üü. 2
<
üü2 3
DbSet
üü3 8
<
üü8 9
Test
üü9 =
>
üü= >
>
üü> ?
(
üü? @
)
üü@ A
;
üüA B
	mockDbSet
†† 
.
†† 
SetupAsQueryable
†† &
(
††& '
mockedTests
††' 2
)
††2 3
;
††3 4
Mock
¢¢ 
<
¢¢ "
IQueryableUnitOfWork
¢¢ %
>
¢¢% &
mockUnitOfWork
¢¢' 5
=
¢¢6 7
new
¢¢8 ;
Mock
¢¢< @
<
¢¢@ A"
IQueryableUnitOfWork
¢¢A U
>
¢¢U V
(
¢¢V W
)
¢¢W X
;
¢¢X Y
mockUnitOfWork
££ 
.
££ 
Setup
££  
(
££  !
p
££! "
=>
££# %
p
££& '
.
££' (
Set
££( +
<
££+ ,
Test
££, 0
>
££0 1
(
££1 2
)
££2 3
)
££3 4
.
££4 5
Returns
££5 <
(
££< =
	mockDbSet
££= F
.
££F G
Object
££G M
)
££M N
;
££N O
mockUnitOfWork
§§ 
.
§§ 
Setup
§§  
(
§§  !
p
§§! "
=>
§§# %
p
§§& '
.
§§' (
SaveChanges
§§( 3
(
§§3 4
)
§§4 5
)
§§5 6
;
§§6 7
ISpecification
¶¶ 
<
¶¶ 
Test
¶¶ 
>
¶¶  
spec
¶¶! %
=
¶¶& '
new
¶¶( +!
DirectSpecification
¶¶, ?
<
¶¶? @
Test
¶¶@ D
>
¶¶D E
(
¶¶E F
p
¶¶F G
=>
¶¶H J
p
¶¶K L
.
¶¶L M
Id
¶¶M O
==
¶¶P R
$num
¶¶S T
)
¶¶T U
;
¶¶U V
IRepository
ßß 
<
ßß 
Test
ßß 
>
ßß 
testRepository
ßß ,
=
ßß- .
new
ßß/ 2#
GenericTestRepository
ßß3 H
(
ßßH I
mockUnitOfWork
ßßI W
.
ßßW X
Object
ßßX ^
)
ßß^ _
;
ßß_ `
testRepository
©© 
.
©© 
Remove
©© !
(
©©! "
spec
©©" &
)
©©& '
;
©©' (
mockUnitOfWork
´´ 
.
´´ 
Verify
´´ !
(
´´! "
x
´´" #
=>
´´$ &
x
´´' (
.
´´( )
Set
´´) ,
<
´´, -
Test
´´- 1
>
´´1 2
(
´´2 3
)
´´3 4
,
´´4 5
Times
´´6 ;
.
´´; <
Exactly
´´< C
(
´´C D
$num
´´D E
)
´´E F
)
´´F G
;
´´G H
mockUnitOfWork
¨¨ 
.
¨¨ 
Verify
¨¨ !
(
¨¨! "
x
¨¨" #
=>
¨¨$ &
x
¨¨' (
.
¨¨( )
SaveChanges
¨¨) 4
(
¨¨4 5
)
¨¨5 6
,
¨¨6 7
Times
¨¨8 =
.
¨¨= >
Once
¨¨> B
)
¨¨B C
;
¨¨C D
}
≠≠ 	
[
ØØ 	
Fact
ØØ	 
]
ØØ 
public
∞∞ 
void
∞∞ @
2CallSaveChangesSuccessfullyGivenSpecificationAsync
∞∞ F
(
∞∞F G
)
∞∞G H
{
±± 	
List
≤≤ 
<
≤≤ 
Test
≤≤ 
>
≤≤ 
mockedTests
≤≤ "
=
≤≤# $
	MockTests
≤≤% .
(
≤≤. /
)
≤≤/ 0
;
≤≤0 1
Mock
¥¥ 
<
¥¥ 
DbSet
¥¥ 
<
¥¥ 
Test
¥¥ 
>
¥¥ 
>
¥¥ 
	mockDbSet
¥¥ '
=
¥¥( )
new
¥¥* -
Mock
¥¥. 2
<
¥¥2 3
DbSet
¥¥3 8
<
¥¥8 9
Test
¥¥9 =
>
¥¥= >
>
¥¥> ?
(
¥¥? @
)
¥¥@ A
;
¥¥A B
	mockDbSet
µµ 
.
µµ #
SetupAsQueryableAsync
µµ +
(
µµ+ ,
mockedTests
µµ, 7
)
µµ7 8
;
µµ8 9
Mock
∑∑ 
<
∑∑ "
IQueryableUnitOfWork
∑∑ %
>
∑∑% &
mockUnitOfWork
∑∑' 5
=
∑∑6 7
new
∑∑8 ;
Mock
∑∑< @
<
∑∑@ A"
IQueryableUnitOfWork
∑∑A U
>
∑∑U V
(
∑∑V W
)
∑∑W X
;
∑∑X Y
mockUnitOfWork
∏∏ 
.
∏∏ 
Setup
∏∏  
(
∏∏  !
p
∏∏! "
=>
∏∏# %
p
∏∏& '
.
∏∏' (
Set
∏∏( +
<
∏∏+ ,
Test
∏∏, 0
>
∏∏0 1
(
∏∏1 2
)
∏∏2 3
)
∏∏3 4
.
∏∏4 5
Returns
∏∏5 <
(
∏∏< =
	mockDbSet
∏∏= F
.
∏∏F G
Object
∏∏G M
)
∏∏M N
;
∏∏N O
mockUnitOfWork
ππ 
.
ππ 
Setup
ππ  
(
ππ  !
p
ππ! "
=>
ππ# %
p
ππ& '
.
ππ' (
SaveChangesAsync
ππ( 8
(
ππ8 9
)
ππ9 :
)
ππ: ;
.
ππ; <
Returns
ππ< C
(
ππC D
Task
ππD H
.
ππH I

FromResult
ππI S
(
ππS T
It
ππT V
.
ππV W
IsAny
ππW \
<
ππ\ ]
int
ππ] `
>
ππ` a
(
ππa b
)
ππb c
)
ππc d
)
ππd e
;
ππe f
ISpecification
ªª 
<
ªª 
Test
ªª 
>
ªª  
spec
ªª! %
=
ªª& '
new
ªª( +!
DirectSpecification
ªª, ?
<
ªª? @
Test
ªª@ D
>
ªªD E
(
ªªE F
p
ªªF G
=>
ªªH J
p
ªªK L
.
ªªL M
Id
ªªM O
==
ªªP R
$num
ªªS T
)
ªªT U
;
ªªU V
IRepository
ºº 
<
ºº 
Test
ºº 
>
ºº 
testRepository
ºº ,
=
ºº- .
new
ºº/ 2#
GenericTestRepository
ºº3 H
(
ººH I
mockUnitOfWork
ººI W
.
ººW X
Object
ººX ^
)
ºº^ _
;
ºº_ `
testRepository
ææ 
.
ææ 
RemoveAsync
ææ &
(
ææ& '
spec
ææ' +
)
ææ+ ,
.
ææ, -

GetAwaiter
ææ- 7
(
ææ7 8
)
ææ8 9
.
ææ9 :
	GetResult
ææ: C
(
ææC D
)
ææD E
;
ææE F
mockUnitOfWork
¿¿ 
.
¿¿ 
Verify
¿¿ !
(
¿¿! "
x
¿¿" #
=>
¿¿$ &
x
¿¿' (
.
¿¿( )
Set
¿¿) ,
<
¿¿, -
Test
¿¿- 1
>
¿¿1 2
(
¿¿2 3
)
¿¿3 4
,
¿¿4 5
Times
¿¿6 ;
.
¿¿; <
Exactly
¿¿< C
(
¿¿C D
$num
¿¿D E
)
¿¿E F
)
¿¿F G
;
¿¿G H
mockUnitOfWork
¡¡ 
.
¡¡ 
Verify
¡¡ !
(
¡¡! "
x
¡¡" #
=>
¡¡$ &
x
¡¡' (
.
¡¡( )
SaveChangesAsync
¡¡) 9
(
¡¡9 :
)
¡¡: ;
,
¡¡; <
Times
¡¡= B
.
¡¡B C
Once
¡¡C G
)
¡¡G H
;
¡¡H I
}
¬¬ 	
[
ƒƒ 	
Fact
ƒƒ	 
]
ƒƒ 
public
≈≈ 
void
≈≈ ?
1ThrowsArgumentNullExceptionGivenNullSpecification
≈≈ E
(
≈≈E F
)
≈≈F G
{
∆∆ 	
Mock
«« 
<
«« "
IQueryableUnitOfWork
«« %
>
««% &
mockUnitOfWork
««' 5
=
««6 7
new
««8 ;
Mock
««< @
<
««@ A"
IQueryableUnitOfWork
««A U
>
««U V
(
««V W
)
««W X
;
««X Y
Action
…… 
act
…… 
=
…… 
(
…… 
)
…… 
=>
…… 
{
   
IRepository
ÀÀ 
<
ÀÀ 
Test
ÀÀ  
>
ÀÀ  !
testRepository
ÀÀ" 0
=
ÀÀ1 2
new
ÀÀ3 6#
GenericTestRepository
ÀÀ7 L
(
ÀÀL M
mockUnitOfWork
ÀÀM [
.
ÀÀ[ \
Object
ÀÀ\ b
)
ÀÀb c
;
ÀÀc d
testRepository
ÃÃ 
.
ÃÃ 
Remove
ÃÃ %
(
ÃÃ% &
(
ÃÃ& '
ISpecification
ÃÃ' 5
<
ÃÃ5 6
Test
ÃÃ6 :
>
ÃÃ: ;
)
ÃÃ; <
null
ÃÃ= A
)
ÃÃA B
;
ÃÃB C
}
ÕÕ 
;
ÕÕ 
act
œœ 
.
œœ 
Should
œœ 
(
œœ 
)
œœ 
.
œœ 
Throw
œœ 
<
œœ #
ArgumentNullException
œœ 4
>
œœ4 5
(
œœ5 6
)
œœ6 7
.
œœ7 8
And
œœ8 ;
.
œœ; <
	ParamName
œœ< E
.
œœE F
Should
œœF L
(
œœL M
)
œœM N
.
œœN O
Be
œœO Q
(
œœQ R
$str
œœR a
)
œœa b
;
œœb c
}
–– 	
[
““ 	
Fact
““	 
]
““ 
public
”” 
void
”” D
6ThrowsArgumentNullExceptionGivenNullSpecificationAsync
”” J
(
””J K
)
””K L
{
‘‘ 	
Mock
’’ 
<
’’ "
IQueryableUnitOfWork
’’ %
>
’’% &
mockUnitOfWork
’’' 5
=
’’6 7
new
’’8 ;
Mock
’’< @
<
’’@ A"
IQueryableUnitOfWork
’’A U
>
’’U V
(
’’V W
)
’’W X
;
’’X Y
Action
◊◊ 
act
◊◊ 
=
◊◊ 
(
◊◊ 
)
◊◊ 
=>
◊◊ 
{
ÿÿ 
IRepository
ŸŸ 
<
ŸŸ 
Test
ŸŸ  
>
ŸŸ  !
testRepository
ŸŸ" 0
=
ŸŸ1 2
new
ŸŸ3 6#
GenericTestRepository
ŸŸ7 L
(
ŸŸL M
mockUnitOfWork
ŸŸM [
.
ŸŸ[ \
Object
ŸŸ\ b
)
ŸŸb c
;
ŸŸc d
testRepository
⁄⁄ 
.
⁄⁄ 
RemoveAsync
⁄⁄ *
(
⁄⁄* +
(
⁄⁄+ ,
ISpecification
⁄⁄, :
<
⁄⁄: ;
Test
⁄⁄; ?
>
⁄⁄? @
)
⁄⁄@ A
null
⁄⁄B F
)
⁄⁄F G
.
⁄⁄G H

GetAwaiter
⁄⁄H R
(
⁄⁄R S
)
⁄⁄S T
.
⁄⁄T U
	GetResult
⁄⁄U ^
(
⁄⁄^ _
)
⁄⁄_ `
;
⁄⁄` a
}
€€ 
;
€€ 
act
›› 
.
›› 
Should
›› 
(
›› 
)
›› 
.
›› 
Throw
›› 
<
›› #
ArgumentNullException
›› 4
>
››4 5
(
››5 6
)
››6 7
.
››7 8
And
››8 ;
.
››; <
	ParamName
››< E
.
››E F
Should
››F L
(
››L M
)
››M N
.
››N O
Be
››O Q
(
››Q R
$str
››R a
)
››a b
;
››b c
}
ﬁﬁ 	
private
‡‡ 
static
‡‡ 
List
‡‡ 
<
‡‡ 
Test
‡‡  
>
‡‡  !
	MockTests
‡‡" +
(
‡‡+ ,
int
‡‡, /
count
‡‡0 5
)
‡‡5 6
{
·· 	
List
‚‚ 
<
‚‚ 
Test
‚‚ 
>
‚‚ 
tests
‚‚ 
=
‚‚ 
new
‚‚ "
List
‚‚# '
<
‚‚' (
Test
‚‚( ,
>
‚‚, -
(
‚‚- .
)
‚‚. /
;
‚‚/ 0
for
‰‰ 
(
‰‰ 
int
‰‰ 
i
‰‰ 
=
‰‰ 
$num
‰‰ 
;
‰‰ 
i
‰‰ 
<=
‰‰  
count
‰‰! &
;
‰‰& '
i
‰‰( )
++
‰‰) +
)
‰‰+ ,
{
ÂÂ 
tests
ÊÊ 
.
ÊÊ 
Add
ÊÊ 
(
ÊÊ 
new
ÊÊ 
Test
ÊÊ "
(
ÊÊ" #
i
ÊÊ# $
)
ÊÊ$ %
)
ÊÊ% &
;
ÊÊ& '
}
ÁÁ 
return
ÈÈ 
tests
ÈÈ 
;
ÈÈ 
}
ÍÍ 	
private
ÏÏ 
static
ÏÏ 
List
ÏÏ 
<
ÏÏ 
Test
ÏÏ  
>
ÏÏ  !
	MockTests
ÏÏ" +
(
ÏÏ+ ,
)
ÏÏ, -
{
ÌÌ 	
return
ÓÓ 
	MockTests
ÓÓ 
(
ÓÓ 
$num
ÓÓ 
)
ÓÓ 
;
ÓÓ  
}
ÔÔ 	
}
 
}ÒÒ ¶¶
cC:\Projects\anderson.souza\Ritter\tests\Infra.Data.Seedwork.Tests\Repositories\Repository_Update.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Data 
. 
Tests !
.! "
Repositories" .
{ 
public 

class 
Repository_Update "
{ 
[ 	
Fact	 
] 
public 
void 5
)CallSaveChangesSuccessfullyGivenOneEntity =
(= >
)> ?
{ 	
List 
< 
Test 
> 
mockedTests "
=# $
new% (
List) -
<- .
Test. 2
>2 3
(3 4
)4 5
;5 6
Mock 
< 
DbSet 
< 
Test 
> 
> 
	mockDbSet '
=( )
new* -
Mock. 2
<2 3
DbSet3 8
<8 9
Test9 =
>= >
>> ?
(? @
)@ A
;A B
	mockDbSet 
. 
SetupAsQueryable &
(& '
mockedTests' 2
)2 3
;3 4
Mock 
<  
IQueryableUnitOfWork %
>% &
mockUnitOfWork' 5
=6 7
new8 ;
Mock< @
<@ A 
IQueryableUnitOfWorkA U
>U V
(V W
)W X
;X Y
mockUnitOfWork 
. 
Setup  
(  !
p! "
=># %
p& '
.' (
Set( +
<+ ,
Test, 0
>0 1
(1 2
)2 3
)3 4
.4 5
Returns5 <
(< =
	mockDbSet= F
.F G
ObjectG M
)M N
;N O
mockUnitOfWork 
. 
Setup  
(  !
p! "
=># %
p& '
.' (
SaveChanges( 3
(3 4
)4 5
)5 6
;6 7
IRepository 
< 
Test 
> 
testRepository ,
=- .
new/ 2!
GenericTestRepository3 H
(H I
mockUnitOfWorkI W
.W X
ObjectX ^
)^ _
;_ `
Test 
test 
= 
new 
Test  
(  !
)! "
;" #
testRepository 
. 
Update !
(! "
test" &
)& '
;' (
mockUnitOfWork!! 
.!! 
Verify!! !
(!!! "
x!!" #
=>!!$ &
x!!' (
.!!( )
Set!!) ,
<!!, -
Test!!- 1
>!!1 2
(!!2 3
)!!3 4
,!!4 5
Times!!6 ;
.!!; <
Once!!< @
)!!@ A
;!!A B
mockUnitOfWork"" 
."" 
Verify"" !
(""! "
x""" #
=>""$ &
x""' (
.""( )
SaveChanges"") 4
(""4 5
)""5 6
,""6 7
Times""8 =
.""= >
Once""> B
)""B C
;""C D
}## 	
[%% 	
Fact%%	 
]%% 
public&& 
void&& :
.CallSaveChangesSuccessfullyGivenOneEntityAsync&& B
(&&B C
)&&C D
{'' 	
List(( 
<(( 
Test(( 
>(( 
mockedTests(( "
=((# $
new((% (
List(() -
<((- .
Test((. 2
>((2 3
(((3 4
)((4 5
;((5 6
Mock** 
<** 
DbSet** 
<** 
Test** 
>** 
>** 
	mockDbSet** '
=**( )
new*** -
Mock**. 2
<**2 3
DbSet**3 8
<**8 9
Test**9 =
>**= >
>**> ?
(**? @
)**@ A
;**A B
	mockDbSet++ 
.++ !
SetupAsQueryableAsync++ +
(+++ ,
mockedTests++, 7
)++7 8
;++8 9
Mock-- 
<--  
IQueryableUnitOfWork-- %
>--% &
mockUnitOfWork--' 5
=--6 7
new--8 ;
Mock--< @
<--@ A 
IQueryableUnitOfWork--A U
>--U V
(--V W
)--W X
;--X Y
mockUnitOfWork.. 
... 
Setup..  
(..  !
p..! "
=>..# %
p..& '
...' (
Set..( +
<..+ ,
Test.., 0
>..0 1
(..1 2
)..2 3
)..3 4
...4 5
Returns..5 <
(..< =
	mockDbSet..= F
...F G
Object..G M
)..M N
;..N O
mockUnitOfWork// 
.// 
Setup//  
(//  !
p//! "
=>//# %
p//& '
.//' (
SaveChangesAsync//( 8
(//8 9
)//9 :
)//: ;
.//; <
Returns//< C
(//C D
Task//D H
.//H I

FromResult//I S
(//S T
It//T V
.//V W
IsAny//W \
<//\ ]
int//] `
>//` a
(//a b
)//b c
)//c d
)//d e
;//e f
IRepository11 
<11 
Test11 
>11 
testRepository11 ,
=11- .
new11/ 2!
GenericTestRepository113 H
(11H I
mockUnitOfWork11I W
.11W X
Object11X ^
)11^ _
;11_ `
Test22 
test22 
=22 
new22 
Test22  
(22  !
)22! "
;22" #
testRepository33 
.33 
UpdateAsync33 &
(33& '
test33' +
)33+ ,
.33, -

GetAwaiter33- 7
(337 8
)338 9
.339 :
	GetResult33: C
(33C D
)33D E
;33E F
mockUnitOfWork55 
.55 
Verify55 !
(55! "
x55" #
=>55$ &
x55' (
.55( )
Set55) ,
<55, -
Test55- 1
>551 2
(552 3
)553 4
,554 5
Times556 ;
.55; <
Once55< @
)55@ A
;55A B
mockUnitOfWork66 
.66 
Verify66 !
(66! "
x66" #
=>66$ &
x66' (
.66( )
SaveChangesAsync66) 9
(669 :
)66: ;
,66; <
Times66= B
.66B C
Once66C G
)66G H
;66H I
}77 	
[99 	
Fact99	 
]99 
public:: 
void:: 6
*ThrowsArgumentNullExceptionGivenNullEntity:: >
(::> ?
)::? @
{;; 	
Mock<< 
<<<  
IQueryableUnitOfWork<< %
><<% &
mockUnitOfWork<<' 5
=<<6 7
new<<8 ;
Mock<<< @
<<<@ A 
IQueryableUnitOfWork<<A U
><<U V
(<<V W
)<<W X
;<<X Y
Action>> 
act>> 
=>> 
(>> 
)>> 
=>>> 
{?? 
IRepository@@ 
<@@ 
Test@@  
>@@  !
testRepository@@" 0
=@@1 2
new@@3 6!
GenericTestRepository@@7 L
(@@L M
mockUnitOfWork@@M [
.@@[ \
Object@@\ b
)@@b c
;@@c d
testRepositoryAA 
.AA 
UpdateAA %
(AA% &
(AA& '
TestAA' +
)AA+ ,
nullAA- 1
)AA1 2
;AA2 3
}BB 
;BB 
actDD 
.DD 
ShouldDD 
(DD 
)DD 
.DD 
ThrowDD 
<DD !
ArgumentNullExceptionDD 4
>DD4 5
(DD5 6
)DD6 7
.DD7 8
AndDD8 ;
.DD; <
	ParamNameDD< E
.DDE F
ShouldDDF L
(DDL M
)DDM N
.DDN O
BeDDO Q
(DDQ R
$strDDR Z
)DDZ [
;DD[ \
}EE 	
[GG 	
FactGG	 
]GG 
publicHH 
voidHH ;
/ThrowsArgumentNullExceptionGivenNullEntityAsyncHH C
(HHC D
)HHD E
{II 	
MockJJ 
<JJ  
IQueryableUnitOfWorkJJ %
>JJ% &
mockUnitOfWorkJJ' 5
=JJ6 7
newJJ8 ;
MockJJ< @
<JJ@ A 
IQueryableUnitOfWorkJJA U
>JJU V
(JJV W
)JJW X
;JJX Y
ActionLL 
actLL 
=LL 
(LL 
)LL 
=>LL 
{MM 
IRepositoryNN 
<NN 
TestNN  
>NN  !
testRepositoryNN" 0
=NN1 2
newNN3 6!
GenericTestRepositoryNN7 L
(NNL M
mockUnitOfWorkNNM [
.NN[ \
ObjectNN\ b
)NNb c
;NNc d
testRepositoryOO 
.OO 
UpdateAsyncOO *
(OO* +
(OO+ ,
TestOO, 0
)OO0 1
nullOO2 6
)OO6 7
.OO7 8

GetAwaiterOO8 B
(OOB C
)OOC D
.OOD E
	GetResultOOE N
(OON O
)OOO P
;OOP Q
}PP 
;PP 
actRR 
.RR 
ShouldRR 
(RR 
)RR 
.RR 
ThrowRR 
<RR !
ArgumentNullExceptionRR 4
>RR4 5
(RR5 6
)RR6 7
.RR7 8
AndRR8 ;
.RR; <
	ParamNameRR< E
.RRE F
ShouldRRF L
(RRL M
)RRM N
.RRN O
BeRRO Q
(RRQ R
$strRRR Z
)RRZ [
;RR[ \
}SS 	
[UU 	
FactUU	 
]UU 
publicVV 
voidVV 8
,CallSaveChangesSuccessfullyGivenManyEntitiesVV @
(VV@ A
)VVA B
{WW 	
ListXX 
<XX 
TestXX 
>XX 
mockedTestsXX "
=XX# $
newXX% (
ListXX) -
<XX- .
TestXX. 2
>XX2 3
(XX3 4
)XX4 5
;XX5 6
MockZZ 
<ZZ 
DbSetZZ 
<ZZ 
TestZZ 
>ZZ 
>ZZ 
	mockDbSetZZ '
=ZZ( )
newZZ* -
MockZZ. 2
<ZZ2 3
DbSetZZ3 8
<ZZ8 9
TestZZ9 =
>ZZ= >
>ZZ> ?
(ZZ? @
)ZZ@ A
;ZZA B
	mockDbSet[[ 
.[[ 
SetupAsQueryable[[ &
([[& '
mockedTests[[' 2
)[[2 3
;[[3 4
Mock]] 
<]]  
IQueryableUnitOfWork]] %
>]]% &
mockUnitOfWork]]' 5
=]]6 7
new]]8 ;
Mock]]< @
<]]@ A 
IQueryableUnitOfWork]]A U
>]]U V
(]]V W
)]]W X
;]]X Y
mockUnitOfWork^^ 
.^^ 
Setup^^  
(^^  !
p^^! "
=>^^# %
p^^& '
.^^' (
Set^^( +
<^^+ ,
Test^^, 0
>^^0 1
(^^1 2
)^^2 3
)^^3 4
.^^4 5
Returns^^5 <
(^^< =
	mockDbSet^^= F
.^^F G
Object^^G M
)^^M N
;^^N O
mockUnitOfWork__ 
.__ 
Setup__  
(__  !
p__! "
=>__# %
p__& '
.__' (
SaveChanges__( 3
(__3 4
)__4 5
)__5 6
;__6 7
IRepositoryaa 
<aa 
Testaa 
>aa 
testRepositoryaa ,
=aa- .
newaa/ 2!
GenericTestRepositoryaa3 H
(aaH I
mockUnitOfWorkaaI W
.aaW X
ObjectaaX ^
)aa^ _
;aa_ `
Listbb 
<bb 
Testbb 
>bb 
testsbb 
=bb 
	MockTestsbb (
(bb( )
)bb) *
;bb* +
testRepositorycc 
.cc 
Updatecc !
(cc! "
testscc" '
)cc' (
;cc( )
mockUnitOfWorkee 
.ee 
Verifyee !
(ee! "
xee" #
=>ee$ &
xee' (
.ee( )
Setee) ,
<ee, -
Testee- 1
>ee1 2
(ee2 3
)ee3 4
,ee4 5
Timesee6 ;
.ee; <
Onceee< @
)ee@ A
;eeA B
mockUnitOfWorkff 
.ff 
Verifyff !
(ff! "
xff" #
=>ff$ &
xff' (
.ff( )
SaveChangesff) 4
(ff4 5
)ff5 6
,ff6 7
Timesff8 =
.ff= >
Onceff> B
)ffB C
;ffC D
}gg 	
[ii 	
Factii	 
]ii 
publicjj 
voidjj =
1CallSaveChangesSuccessfullyGivenManyEntitiesAsyncjj E
(jjE F
)jjF G
{kk 	
Listll 
<ll 
Testll 
>ll 
mockedTestsll "
=ll# $
newll% (
Listll) -
<ll- .
Testll. 2
>ll2 3
(ll3 4
)ll4 5
;ll5 6
Mocknn 
<nn 
DbSetnn 
<nn 
Testnn 
>nn 
>nn 
	mockDbSetnn '
=nn( )
newnn* -
Mocknn. 2
<nn2 3
DbSetnn3 8
<nn8 9
Testnn9 =
>nn= >
>nn> ?
(nn? @
)nn@ A
;nnA B
	mockDbSetoo 
.oo 
SetupAsQueryableoo &
(oo& '
mockedTestsoo' 2
)oo2 3
;oo3 4
Mockqq 
<qq  
IQueryableUnitOfWorkqq %
>qq% &
mockUnitOfWorkqq' 5
=qq6 7
newqq8 ;
Mockqq< @
<qq@ A 
IQueryableUnitOfWorkqqA U
>qqU V
(qqV W
)qqW X
;qqX Y
mockUnitOfWorkrr 
.rr 
Setuprr  
(rr  !
prr! "
=>rr# %
prr& '
.rr' (
Setrr( +
<rr+ ,
Testrr, 0
>rr0 1
(rr1 2
)rr2 3
)rr3 4
.rr4 5
Returnsrr5 <
(rr< =
	mockDbSetrr= F
.rrF G
ObjectrrG M
)rrM N
;rrN O
mockUnitOfWorkss 
.ss 
Setupss  
(ss  !
pss! "
=>ss# %
pss& '
.ss' (
SaveChangesAsyncss( 8
(ss8 9
)ss9 :
)ss: ;
.ss; <
Returnsss< C
(ssC D
TaskssD H
.ssH I

FromResultssI S
(ssS T
ItssT V
.ssV W
IsAnyssW \
<ss\ ]
intss] `
>ss` a
(ssa b
)ssb c
)ssc d
)ssd e
;sse f
IRepositoryuu 
<uu 
Testuu 
>uu 
testRepositoryuu ,
=uu- .
newuu/ 2!
GenericTestRepositoryuu3 H
(uuH I
mockUnitOfWorkuuI W
.uuW X
ObjectuuX ^
)uu^ _
;uu_ `
Listvv 
<vv 
Testvv 
>vv 
testsvv 
=vv 
	MockTestsvv (
(vv( )
)vv) *
;vv* +
testRepositoryww 
.ww 
UpdateAsyncww &
(ww& '
testsww' ,
)ww, -
.ww- .

GetAwaiterww. 8
(ww8 9
)ww9 :
.ww: ;
	GetResultww; D
(wwD E
)wwE F
;wwF G
mockUnitOfWorkyy 
.yy 
Verifyyy !
(yy! "
xyy" #
=>yy$ &
xyy' (
.yy( )
Setyy) ,
<yy, -
Testyy- 1
>yy1 2
(yy2 3
)yy3 4
,yy4 5
Timesyy6 ;
.yy; <
Onceyy< @
)yy@ A
;yyA B
mockUnitOfWorkzz 
.zz 
Verifyzz !
(zz! "
xzz" #
=>zz$ &
xzz' (
.zz( )
SaveChangesAsynczz) 9
(zz9 :
)zz: ;
,zz; <
Timeszz= B
.zzB C
OncezzC G
)zzG H
;zzH I
}{{ 	
[}} 	
Fact}}	 
]}} 
public~~ 
void~~ @
4ThrowsArgumentNullExceptionGivenNullEntityEnumerable~~ H
(~~H I
)~~I J
{ 	
Mock
ÄÄ 
<
ÄÄ "
IQueryableUnitOfWork
ÄÄ %
>
ÄÄ% &
mockUnitOfWork
ÄÄ' 5
=
ÄÄ6 7
new
ÄÄ8 ;
Mock
ÄÄ< @
<
ÄÄ@ A"
IQueryableUnitOfWork
ÄÄA U
>
ÄÄU V
(
ÄÄV W
)
ÄÄW X
;
ÄÄX Y
Action
ÇÇ 
act
ÇÇ 
=
ÇÇ 
(
ÇÇ 
)
ÇÇ 
=>
ÇÇ 
{
ÉÉ 
IRepository
ÑÑ 
<
ÑÑ 
Test
ÑÑ  
>
ÑÑ  !
testRepository
ÑÑ" 0
=
ÑÑ1 2
new
ÑÑ3 6#
GenericTestRepository
ÑÑ7 L
(
ÑÑL M
mockUnitOfWork
ÑÑM [
.
ÑÑ[ \
Object
ÑÑ\ b
)
ÑÑb c
;
ÑÑc d
testRepository
ÖÖ 
.
ÖÖ 
Update
ÖÖ %
(
ÖÖ% &
(
ÖÖ& '
IEnumerable
ÖÖ' 2
<
ÖÖ2 3
Test
ÖÖ3 7
>
ÖÖ7 8
)
ÖÖ8 9
null
ÖÖ: >
)
ÖÖ> ?
;
ÖÖ? @
}
ÜÜ 
;
ÜÜ 
act
àà 
.
àà 
Should
àà 
(
àà 
)
àà 
.
àà 
Throw
àà 
<
àà #
ArgumentNullException
àà 4
>
àà4 5
(
àà5 6
)
àà6 7
.
àà7 8
And
àà8 ;
.
àà; <
	ParamName
àà< E
.
ààE F
Should
ààF L
(
ààL M
)
ààM N
.
ààN O
Be
ààO Q
(
ààQ R
$str
ààR \
)
àà\ ]
;
àà] ^
}
ââ 	
[
ãã 	
Fact
ãã	 
]
ãã 
public
åå 
void
åå G
9ThrowsArgumentNullExceptionGivenNullEntityEnumerableAsync
åå M
(
ååM N
)
ååN O
{
çç 	
Mock
éé 
<
éé "
IQueryableUnitOfWork
éé %
>
éé% &
mockUnitOfWork
éé' 5
=
éé6 7
new
éé8 ;
Mock
éé< @
<
éé@ A"
IQueryableUnitOfWork
ééA U
>
ééU V
(
ééV W
)
ééW X
;
ééX Y
Action
êê 
act
êê 
=
êê 
(
êê 
)
êê 
=>
êê 
{
ëë 
IRepository
íí 
<
íí 
Test
íí  
>
íí  !
testRepository
íí" 0
=
íí1 2
new
íí3 6#
GenericTestRepository
íí7 L
(
ííL M
mockUnitOfWork
ííM [
.
íí[ \
Object
íí\ b
)
ííb c
;
ííc d
testRepository
ìì 
.
ìì 
UpdateAsync
ìì *
(
ìì* +
(
ìì+ ,
IEnumerable
ìì, 7
<
ìì7 8
Test
ìì8 <
>
ìì< =
)
ìì= >
null
ìì? C
)
ììC D
.
ììD E

GetAwaiter
ììE O
(
ììO P
)
ììP Q
.
ììQ R
	GetResult
ììR [
(
ìì[ \
)
ìì\ ]
;
ìì] ^
}
îî 
;
îî 
act
ññ 
.
ññ 
Should
ññ 
(
ññ 
)
ññ 
.
ññ 
Throw
ññ 
<
ññ #
ArgumentNullException
ññ 4
>
ññ4 5
(
ññ5 6
)
ññ6 7
.
ññ7 8
And
ññ8 ;
.
ññ; <
	ParamName
ññ< E
.
ññE F
Should
ññF L
(
ññL M
)
ññM N
.
ññN O
Be
ññO Q
(
ññQ R
$str
ññR \
)
ññ\ ]
;
ññ] ^
}
óó 	
private
ôô 
static
ôô 
List
ôô 
<
ôô 
Test
ôô  
>
ôô  !
	MockTests
ôô" +
(
ôô+ ,
int
ôô, /
count
ôô0 5
)
ôô5 6
{
öö 	
List
õõ 
<
õõ 
Test
õõ 
>
õõ 
tests
õõ 
=
õõ 
new
õõ "
List
õõ# '
<
õõ' (
Test
õõ( ,
>
õõ, -
(
õõ- .
)
õõ. /
;
õõ/ 0
for
ùù 
(
ùù 
int
ùù 
i
ùù 
=
ùù 
$num
ùù 
;
ùù 
i
ùù 
<=
ùù  
count
ùù! &
;
ùù& '
i
ùù( )
++
ùù) +
)
ùù+ ,
{
ûû 
tests
üü 
.
üü 
Add
üü 
(
üü 
new
üü 
Test
üü "
(
üü" #
i
üü# $
)
üü$ %
)
üü% &
;
üü& '
}
†† 
return
¢¢ 
tests
¢¢ 
;
¢¢ 
}
££ 	
private
•• 
static
•• 
List
•• 
<
•• 
Test
••  
>
••  !
	MockTests
••" +
(
••+ ,
)
••, -
{
¶¶ 	
return
ßß 
	MockTests
ßß 
(
ßß 
$num
ßß 
)
ßß 
;
ßß  
}
®® 	
}
©© 
}™™ 