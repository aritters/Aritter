ô
QC:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\Caching\CacheProvider.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Crosscutting #
.# $
Caching$ +
{ 
public 

abstract 
class 
CacheProvider '
{ 
private 
readonly 

Dictionary #
<# $
string$ *
,* +
object, 2
>2 3
cache4 9
=: ;
new< ?

Dictionary@ J
<J K
stringK Q
,Q R
objectS Y
>Y Z
(Z [
)[ \
;\ ]
static		 
readonly		 
object		 
padlock		 &
=		' (
new		) ,
object		- 3
(		3 4
)		4 5
;		5 6
	protected 
virtual 
void 
AddItem &
(& '
string' -
key. 1
,1 2
object3 9
value: ?
)? @
{ 	
lock 
( 
padlock 
) 
{ 
cache 
. 
Add 
( 
key 
, 
value $
)$ %
;% &
} 
} 	
	protected 
virtual 
void 

RemoveItem )
() *
string* 0
key1 4
)4 5
{ 	
lock 
( 
padlock 
) 
{ 
cache 
. 
Remove 
( 
key  
)  !
;! "
} 
} 	
	protected 
virtual 
object  
GetItem! (
(( )
string) /
key0 3
)3 4
{ 	
return 
GetItem 
( 
key 
, 
false  %
)% &
;& '
} 	
	protected   
virtual   
object    
GetItem  ! (
(  ( )
string  ) /
key  0 3
,  3 4
bool  5 9
remove  : @
)  @ A
{!! 	
lock"" 
("" 
padlock"" 
)"" 
{## 
if$$ 
($$ 
cache$$ 
.$$ 
TryGetValue$$ %
($$% &
key$$& )
,$$) *
out$$+ .
object$$/ 5
res$$6 9
)$$9 :
)$$: ;
{%% 
if&& 
(&& 
remove&& 
)&& 
cache'' 
.'' 
Remove'' $
(''$ %
key''% (
)''( )
;'') *
}(( 
return** 
res** 
;** 
}++ 
},, 	
}-- 
}.. ¾-
PC:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\Encryption\Encrypter.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Crosscutting #
.# $

Encryption$ .
{ 
public 

static 
class 
	Encrypter !
{		 
private

 
static

 
string

 

privateKey

 (
=

) *
$str

+ Y
;

Y Z
private 
static 
readonly 
byte  $
[$ %
]% &
arrByte' .
=/ 0
{ 	
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
} 	
;	 

public   
static   
string   
Decrypt   $
(  $ %
string  % +
value  , 1
)  1 2
{!! 	
if"" 
("" 
value"" 
."" 
IsNullOrEmpty"" #
(""# $
)""$ %
)""% &
return## 
null## 
;## 
var%% 
key%% 
=%% 
Convert%% 
.%% 
FromBase64String%% .
(%%. /

privateKey%%/ 9
)%%9 :
;%%: ;
var&& 
text&& 
=&& 
Convert&& 
.&& 
FromBase64String&& /
(&&/ 0
value&&0 5
)&&5 6
;&&6 7
var(( 
aes(( 
=(( 
Aes(( 
.(( 
Create((  
(((  !
)((! "
;((" #
var** 
stream** 
=** 
new** 
MemoryStream** )
(**) *
)*** +
;**+ ,
var++ 
	decryptor++ 
=++ 
new++ 
CryptoStream++  ,
(++, -
stream++- 3
,++3 4
aes++5 8
.++8 9
CreateDecryptor++9 H
(++H I
key++I L
,++L M
arrByte++N U
)++U V
,++V W
CryptoStreamMode++X h
.++h i
Write++i n
)++n o
;++o p
	decryptor-- 
.-- 
Write-- 
(-- 
text--  
,--  !
$num--" #
,--# $
text--% )
.--) *
Length--* 0
)--0 1
;--1 2
	decryptor.. 
... 
FlushFinalBlock.. %
(..% &
)..& '
;..' (
var00 
utf800 
=00 
new00 
UTF8Encoding00 '
(00' (
)00( )
;00) *
return22 
utf822 
.22 
	GetString22 !
(22! "
stream22" (
.22( )
ToArray22) 0
(220 1
)221 2
)222 3
;223 4
}33 	
public55 
static55 
string55 
Encrypt55 $
(55$ %
string55% +
value55, 1
)551 2
{66 	
if77 
(77 
value77 
.77 
IsNullOrEmpty77 #
(77# $
)77$ %
)77% &
return88 
null88 
;88 
var:: 
key:: 
=:: 
Convert:: 
.:: 
FromBase64String:: .
(::. /

privateKey::/ 9
)::9 :
;::: ;
var;; 
text;; 
=;; 
new;; 
UTF8Encoding;; '
(;;' (
);;( )
.;;) *
GetBytes;;* 2
(;;2 3
value;;3 8
);;8 9
;;;9 :
var== 
aes== 
=== 
Aes== 
.== 
Create==  
(==  !
)==! "
;==" #
var?? 
stream?? 
=?? 
new?? 
MemoryStream?? )
(??) *
)??* +
;??+ ,
var@@ 
	encryptor@@ 
=@@ 
new@@ 
CryptoStream@@  ,
(@@, -
stream@@- 3
,@@3 4
aes@@5 8
.@@8 9
CreateEncryptor@@9 H
(@@H I
key@@I L
,@@L M
arrByte@@N U
)@@U V
,@@V W
CryptoStreamMode@@X h
.@@h i
Write@@i n
)@@n o
;@@o p
	encryptorBB 
.BB 
WriteBB 
(BB 
textBB  
,BB  !
$numBB" #
,BB# $
textBB% )
.BB) *
LengthBB* 0
)BB0 1
;BB1 2
	encryptorCC 
.CC 
FlushFinalBlockCC %
(CC% &
)CC& '
;CC' (
returnEE 
ConvertEE 
.EE 
ToBase64StringEE )
(EE) *
streamEE* 0
.EE0 1
ToArrayEE1 8
(EE8 9
)EE9 :
)EE: ;
;EE; <
}FF 	
publicHH 
staticHH 
voidHH 
SetPrivateKeyHH (
(HH( )
stringHH) /
keyHH0 3
)HH3 4
{II 	
EnsureJJ 
.JJ 
ArgumentJJ 
.JJ 
NotNullOrEmptyJJ *
(JJ* +
keyJJ+ .
,JJ. /
nameofJJ0 6
(JJ6 7
keyJJ7 :
)JJ: ;
)JJ; <
;JJ< =

privateKeyKK 
=KK 
keyKK 
;KK 
}LL 	
}MM 
}NN ËM
BC:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\Ensure.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Crosscutting #
{ 
[ 
DebuggerStepThrough 
] 
public		 

static		 
class		 
Ensure		 
{

 
public 
static 
void 
That 
(  
bool  $
	condition% .
,. /
string0 6
message7 >
=? @
$strA C
)C D
=>E G
ThatH L
<L M
	ExceptionM V
>V W
(W X
	conditionX a
,a b
messagec j
)j k
;k l
public 
static 
void 
That 
<  

TException  *
>* +
(+ ,
bool, 0
	condition1 :
,: ;
string< B
messageC J
=K L
$strM O
)O P
where 

TException 
: 
	Exception (
{ 	
if 
( 
! 
	condition 
) 
throw 
( 

TException !
)! "
	Activator" +
.+ ,
CreateInstance, :
(: ;
typeof; A
(A B

TExceptionB L
)L M
,M N
messageO V
)V W
;W X
} 	
public 
static 
void 
Not 
< 

TException )
>) *
(* +
bool+ /
	condition0 9
,9 :
string; A
messageB I
=J K
$strL N
)N O
where 

TException 
: 
	Exception (
=> 
That 
< 

TException 
> 
(  
!  !
	condition! *
,* +
message, 3
)3 4
;4 5
public 
static 
void 
Not 
( 
bool #
	condition$ -
,- .
string/ 5
message6 =
=> ?
$str@ B
)B C
=>D F
NotG J
<J K
	ExceptionK T
>T U
(U V
	conditionV _
,_ `
messagea h
)h i
;i j
public 
static 
void 
NotNull "
(" #
object# )
value* /
,/ 0
string1 7
message8 ?
=@ A
$strB D
)D E
=>F H
ThatI M
<M N"
NullReferenceExceptionN d
>d e
(e f
!f g
valueg l
.l m
IsNullm s
(s t
)t u
,u v
messagew ~
)~ 
;	 
public 
static 
void 
NotNullOrEmpty )
() *
string* 0
value1 6
,6 7
string8 >
message? F
=G H
$strI i
)i j
=> 
That 
( 
! 
value 
. 
IsNullOrEmpty (
(( )
)) *
,* +
message, 3
)3 4
;4 5
public 
static 
void 
Equal  
<  !
T! "
>" #
(# $
T$ %
left& *
,* +
T, -
right. 3
,3 4
string5 ;
message< C
=D E
$strF \
)\ ]
=>   
That   
(   
left   
!=   
null    
&&  ! #
right  $ )
!=  * ,
null  - 1
&&  2 4
left  5 9
.  9 :
Equals  : @
(  @ A
right  A F
)  F G
,  G H
message  I P
)  P Q
;  Q R
public"" 
static"" 
void"" 
NotEqual"" #
<""# $
T""$ %
>""% &
(""& '
T""' (
left"") -
,""- .
T""/ 0
right""1 6
,""6 7
string""8 >
message""? F
=""G H
$str""I c
)""c d
=>## 
That## 
(## 
left## 
!=## 
null##  
&&##! #
right##$ )
!=##* ,
null##- 1
&&##2 4
!##5 6
left##6 :
.##: ;
Equals##; A
(##A B
right##B G
)##G H
,##H I
message##J Q
)##Q R
;##R S
public%% 
static%% 
void%% 
Items%%  
<%%  !
T%%! "
>%%" #
(%%# $
IEnumerable%%$ /
<%%/ 0
T%%0 1
>%%1 2

collection%%3 =
,%%= >
Func%%? C
<%%C D
T%%D E
,%%E F
bool%%G K
>%%K L
	predicate%%M V
,%%V W
string%%X ^
message%%_ f
=%%g h
$str%%i k
)%%k l
=>&& 
That&& 
(&& 
!&& 

collection&& 
.&&  
IsNull&&  &
(&&& '
)&&' (
&&&&) +
!&&, -

collection&&- 7
.&&7 8
Any&&8 ;
(&&; <
x&&< =
=>&&> @
!&&A B
	predicate&&B K
(&&K L
x&&L M
)&&M N
)&&N O
,&&O P
message&&Q X
)&&X Y
;&&Y Z
[(( 	
DebuggerStepThrough((	 
](( 
public)) 
static)) 
class)) 
Argument)) $
{** 	
public++ 
static++ 
void++ 
Is++ !
(++! "
bool++" &
	condition++' 0
,++0 1
string++2 8
message++9 @
=++A B
$str++C E
)++E F
=>++G I
That++J N
<++N O
ArgumentException++O `
>++` a
(++a b
	condition++b k
,++k l
message++m t
)++t u
;++u v
public-- 
static-- 
void-- 
IsNot-- $
(--$ %
bool--% )
	condition--* 3
,--3 4
string--5 ;
message--< C
=--D E
$str--F H
)--H I
=>--J L
Is--M O
(--O P
!--P Q
	condition--Q Z
,--Z [
message--\ c
)--c d
;--d e
public// 
static// 
void// 
NotNull// &
(//& '
object//' -
value//. 3
)//3 4
=>//5 7
NotNull//8 ?
(//? @
value//@ E
,//E F
null//G K
,//K L
null//M Q
)//Q R
;//R S
public11 
static11 
void11 
NotNull11 &
(11& '
object11' -
value11. 3
,113 4
string115 ;
	paramName11< E
)11E F
=>11G I
NotNull11J Q
(11Q R
value11R W
,11W X
	paramName11Y b
,11b c
null11d h
)11h i
;11i j
public33 
static33 
void33 
NotNull33 &
(33& '
object33' -
value33. 3
,333 4
string335 ;
	paramName33< E
,33E F
string33G M
message33N U
)33U V
{44 
if55 
(55 
value55 
.55 
IsNull55  
(55  !
)55! "
)55" #
throw66 
new66 !
ArgumentNullException66 3
(663 4
	paramName664 =
,66= >
message66? F
??66G I
$str66J g
)66g h
;66h i
}77 
public99 
static99 
void99 
NotNullOrEmpty99 -
(99- .
string99. 4
value995 :
)99: ;
=>99< >
NotNullOrEmpty99? M
(99M N
value99N S
,99S T
null99U Y
,99Y Z
null99[ _
)99_ `
;99` a
public;; 
static;; 
void;; 
NotNullOrEmpty;; -
(;;- .
string;;. 4
value;;5 :
,;;: ;
string;;< B
	paramName;;C L
);;L M
=>;;N P
NotNullOrEmpty;;Q _
(;;_ `
value;;` e
,;;e f
	paramName;;g p
,;;p q
null;;r v
);;v w
;;;w x
public== 
static== 
void== 
NotNullOrEmpty== -
(==- .
string==. 4
value==5 :
,==: ;
string==< B
	paramName==C L
,==L M
string==N T
message==U \
)==\ ]
{>> 
if?? 
(?? 
value?? 
.?? 
IsNull??  
(??  !
)??! "
)??" #
throw@@ 
new@@ !
ArgumentNullException@@ 3
(@@3 4
	paramName@@4 =
,@@= >
message@@? F
??@@G I
$str@@J g
)@@g h
;@@h i
ifBB 
(BB 
stringBB 
.BB 
EmptyBB  
.BB  !
EqualsBB! '
(BB' (
valueBB( -
)BB- .
)BB. /
throwCC 
newCC 
ArgumentExceptionCC /
(CC/ 0
messageCC0 7
??CC8 :
$strCC; Y
,CCY Z
	paramNameCC[ d
)CCd e
;CCe f
}DD 
}EE 	
}FF 
}GG Ý
^C:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\Exceptions\NotFoundObjectException.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Crosscutting #
.# $

Exceptions$ .
{ 
public 

sealed 
class #
NotFoundObjectException /
:0 1
	Exception2 ;
{ 
public #
NotFoundObjectException &
(& '
)' (
{		 	
}

 	
public #
NotFoundObjectException &
(& '
string' -
message. 5
)5 6
: 
base 
( 
message 
) 
{ 	
} 	
public #
NotFoundObjectException &
(& '
string' -
message. 5
,5 6
	Exception7 @
innerExceptionA O
)O P
: 
base 
( 
message 
, 
innerException *
)* +
{ 	
} 	
private #
NotFoundObjectException '
(' (
SerializationInfo( 9
info: >
,> ?
StreamingContext@ P
contextQ X
)X Y
: 
base 
( 
info 
, 
context  
)  !
{ 	
} 	
} 
} Å
ZC:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\Exceptions\ValidationException.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Crosscutting #
.# $

Exceptions$ .
{ 
public 

sealed 
class 
ValidationException +
:, -
	Exception. 7
{ 
public 
ValidationException "
(" #
)# $
{		 	
}

 	
public 
ValidationException "
(" #
string# )
message* 1
)1 2
: 
base 
( 
message 
) 
{ 	
} 	
public 
ValidationException "
(" #
string# )
message* 1
,1 2
	Exception3 <
innerException= K
)K L
: 
base 
( 
message 
, 
innerException *
)* +
{ 	
} 	
private 
ValidationException #
(# $
SerializationInfo$ 5
info6 :
,: ;
StreamingContext< L
contextM T
)T U
: 
base 
( 
info 
, 
context  
)  !
{ 	
} 	
} 
}  
\C:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\Extensions\CultureInfoExtensions.cs
	namespace 	
System
 
. 
Globalization 
{ 
public 

static 
class !
CultureInfoExtensions -
{ 
public 
static 
bool 
IsEqual "
(" #
this# '
CultureInfo( 3
culture4 ;
,; <
CultureInfo= H
	toCompareI R
)R S
=> 
culture 
. 
CompareInfo "
." #
Name# '
==( *
	toCompare+ 4
.4 5
CompareInfo5 @
.@ A
NameA E
;E F
} 
} ¡
[C:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\Extensions\DictionaryExtensions.cs
	namespace 	
System
 
. 
Collections 
. 
Generic $
{ 
[ 
DebuggerStepThrough 
] 
public 

static 
class  
DictionaryExtensions ,
{ 
public 
static 
TValue 
GetOrAddNew (
<( )
TKey) -
,- .
TValue/ 5
>5 6
(6 7
this7 ;
IDictionary< G
<G H
TKeyH L
,L M
TValueN T
>T U
sourceV \
,\ ]
TKey^ b
keyc f
)f g
where		 
TValue		 
:		 
new		 
(		 
)		  
{

 	
if 
( 
! 
source 
. 
TryGetValue #
(# $
key$ '
,' (
out) ,
var- 0
value1 6
)6 7
)7 8
{ 
value 
= 
new 
TValue "
(" #
)# $
;$ %
source 
. 
Add 
( 
key 
, 
value  %
)% &
;& '
} 
return 
value 
; 
} 	
public 
static 
TValue 
Find !
<! "
TKey" &
,& '
TValue( .
>. /
(/ 0
this0 4
IDictionary5 @
<@ A
TKeyA E
,E F
TValueG M
>M N
sourceO U
,U V
TKeyW [
key\ _
)_ `
=> 
! 
source 
. 
TryGetValue "
(" #
key# &
,& '
out( +
var, /
value0 5
)5 6
?7 8
default9 @
:A B
valueC H
;H I
} 
} ×I
[C:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\Extensions\EnumerableExtensions.cs
	namespace 	
System
 
. 
Collections 
. 
Generic $
{ 
public 

static 
class  
EnumerableExtensions ,
{ 
public		 
static		 
void		 
ForEach		 "
<		" #
T		# $
>		$ %
(		% &
this		& *
IEnumerable		+ 6
<		6 7
T		7 8
>		8 9
source		: @
,		@ A
Action		B H
<		H I
T		I J
>		J K
action		L R
)		R S
{

 	
Ensure 
. 
Argument 
. 
NotNull #
(# $
source$ *
,* +
nameof, 2
(2 3
source3 9
)9 :
): ;
;; <
Ensure 
. 
Argument 
. 
NotNull #
(# $
action$ *
,* +
nameof, 2
(2 3
action3 9
)9 :
): ;
;; <
foreach 
( 
var 
item 
in  
source! '
)' (
{ 
action 
( 
item 
) 
; 
} 
} 	
public 
static 
IEnumerable !
<! "
T" #
># $
Paginate% -
<- .
T. /
>/ 0
(0 1
this1 5
IEnumerable6 A
<A B
TB C
>C D
valuesE K
,K L
IPaginationM X
pageY ]
)] ^
=> 
Paginate 
< 
T 
> 
( 
values !
.! "
AsQueryable" -
(- .
). /
,/ 0
page1 5
)5 6
;6 7
public 
static 
async 
Task  
<  !
IEnumerable! ,
<, -
T- .
>. /
>/ 0
PaginateAsync1 >
<> ?
T? @
>@ A
(A B
thisB F
IEnumerableG R
<R S
TS T
>T U
valuesV \
,\ ]
IPagination^ i
pagej n
)n o
=> 
await 
PaginateAsync "
<" #
T# $
>$ %
(% &
values& ,
., -
AsQueryable- 8
(8 9
)9 :
,: ;
page< @
)@ A
;A B
public 
static 

IPagedList  
<  !
T! "
>" #
PaginateList$ 0
<0 1
T1 2
>2 3
(3 4
this4 8
IEnumerable9 D
<D E
TE F
>F G
valuesH N
,N O
IPaginationP [
page\ `
)` a
=> 
PaginateList 
< 
T 
> 
( 
values %
.% &
AsQueryable& 1
(1 2
)2 3
,3 4
page5 9
)9 :
;: ;
public 
static 
async 
Task  
<  !

IPagedList! +
<+ ,
T, -
>- .
>. /
PaginateListAsync0 A
<A B
TB C
>C D
(D E
thisE I
IEnumerableJ U
<U V
TV W
>W X
valuesY _
,_ `
IPaginationa l
pagem q
)q r
=> 
await 
PaginateListAsync &
<& '
T' (
>( )
() *
values* 0
.0 1
AsQueryable1 <
(< =
)= >
,> ?
page@ D
)D E
;E F
public   
static   
async   
Task    
<    !

IQueryable  ! +
<  + ,
T  , -
>  - .
>  . /
PaginateAsync  0 =
<  = >
T  > ?
>  ? @
(  @ A
this  A E

IQueryable  F P
<  P Q
T  Q R
>  R S
dataList  T \
,  \ ]
IPagination  ^ i
page  j n
)  n o
=>!! 
await!! 
Task!! 
.!! 

FromResult!! #
(!!# $
dataList!!$ ,
.!!, -
Paginate!!- 5
(!!5 6
page!!6 :
)!!: ;
)!!; <
;!!< =
public## 
static## 

IPagedList##  
<##  !
T##! "
>##" #
PaginateList##$ 0
<##0 1
T##1 2
>##2 3
(##3 4
this##4 8

IQueryable##9 C
<##C D
T##D E
>##E F
dataList##G O
,##O P
IPagination##Q \
page##] a
)##a b
{$$ 	
Ensure%% 
.%% 
Argument%% 
.%% 
NotNull%% #
(%%# $
page%%$ (
,%%( )
nameof%%* 0
(%%0 1
page%%1 5
)%%5 6
)%%6 7
;%%7 8
return&& 
new&& 
	PagedList&&  
<&&  !
T&&! "
>&&" #
(&&# $
dataList&&$ ,
.&&, -
Paginate&&- 5
<&&5 6
T&&6 7
>&&7 8
(&&8 9
page&&9 =
)&&= >
.&&> ?
ToList&&? E
(&&E F
)&&F G
,&&G H
page&&I M
.&&M N
PageSize&&N V
,&&V W
dataList&&X `
.&&` a
Count&&a f
(&&f g
)&&g h
)&&h i
;&&i j
}'' 	
public)) 
static)) 
async)) 
Task))  
<))  !

IPagedList))! +
<))+ ,
T)), -
>))- .
>)). /
PaginateListAsync))0 A
<))A B
T))B C
>))C D
())D E
this))E I

IQueryable))J T
<))T U
T))U V
>))V W
dataList))X `
,))` a
IPagination))b m
page))n r
)))r s
=>** 
await** 
Task** 
.** 

FromResult** $
(**$ %
dataList**% -
.**- .
PaginateList**. :
(**: ;
page**; ?
)**? @
)**@ A
;**A B
public,, 
static,, 

IQueryable,,  
<,,  !
T,,! "
>,," #
Paginate,,$ ,
<,,, -
T,,- .
>,,. /
(,,/ 0
this,,0 4

IQueryable,,5 ?
<,,? @
T,,@ A
>,,A B
dataList,,C K
,,,K L
IPagination,,M X
page,,Y ]
),,] ^
{-- 	
Ensure.. 
... 
Argument.. 
... 
NotNull.. #
(..# $
page..$ (
,..( )
nameof..* 0
(..0 1
page..1 5
)..5 6
)..6 7
;..7 8
var00 
queryableList00 
=00 
dataList00  (
;00( )
if22 
(22 
!22 
page22 
.22 
OrderByName22 !
.22! "
IsNullOrEmpty22" /
(22/ 0
)220 1
)221 2
queryableList33 
=33 
queryableList33  -
.33- .
OrderBy33. 5
(335 6
page336 :
.33: ;
OrderByName33; F
,33F G
page33H L
.33L M
	Ascending33M V
)33V W
;33W X
queryableList55 
=55 
queryableList55 )
.55) *
Skip55* .
(55. /
page55/ 3
.553 4
	PageIndex554 =
*55> ?
page55@ D
.55D E
PageSize55E M
)55M N
;55N O
queryableList66 
=66 
queryableList66 )
.66) *
Take66* .
(66. /
page66/ 3
.663 4
PageSize664 <
)66< =
;66= >
return88 
queryableList88  
;88  !
}99 	
public;; 
static;; 
string;; 
Join;; !
(;;! "
this;;" &
IEnumerable;;' 2
<;;2 3
string;;3 9
>;;9 :
values;;; A
,;;A B
string;;C I
	separator;;J S
);;S T
=><< 
string<< 
.<< 
Join<< 
(<< 
	separator<< $
,<<$ %
values<<& ,
)<<, -
;<<- .
public>> 
static>> 
string>> 
Join>> !
<>>! "
T>>" #
>>># $
(>>$ %
this>>% )
IEnumerable>>* 5
<>>5 6
T>>6 7
>>>7 8
values>>9 ?
,>>? @
string>>A G
	separator>>H Q
)>>Q R
=>?? 
string?? 
.?? 
Join?? 
(?? 
	separator?? $
,??$ %
values??& ,
)??, -
;??- .
}@@ 
}AA ÷+
UC:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\Extensions\EnumExtensions.cs
	namespace 	
System
 
{ 
public 

static 
class 
EnumExtensions &
{ 
public		 
static		 

TAttribute		  $
GetAttributeFromEnumType		! 9
<		9 :

TAttribute		: D
>		D E
(		E F
this		F J
Enum		K O
value		P U
)		U V
where

 

TAttribute

 
:

 
	Attribute

 (
{ 	
Type 
type 
= 
value 
. 
GetType %
(% &
)& '
;' (

MemberInfo 
[ 
] 
members  
=! "
type# '
.' (
	GetMember( 1
(1 2
value2 7
.7 8
ToString8 @
(@ A
)A B
)B C
;C D

TAttribute 
	attribute  
=! "
members# *
[* +
$num+ ,
], -
.- .
GetCustomAttribute. @
<@ A

TAttributeA K
>K L
(L M
falseM R
)R S
;S T
return 
	attribute 
; 
} 	
public 
static 
string 
GetDescription +
(+ ,
this, 0
Enum1 5
	enumValue6 ?
)? @
=> 
	enumValue 
. 
GetDescription '
(' (
	enumValue( 1
.1 2
ToString2 :
(: ;
); <
)< =
;= >
public 
static 
string 
GetDescription +
(+ ,
this, 0
Enum1 5
	enumValue6 ?
,? @
stringA G
defaultValueH T
)T U
{ 	
var 
	attribute 
= 
	enumValue %
.% &$
GetAttributeFromEnumType& >
<> ? 
DescriptionAttribute? S
>S T
(T U
)U V
;V W
return 
	attribute 
? 
. 
Description )
??* ,
defaultValue- 9
;9 :
} 	
public 
static 
string 
GetDisplayName +
(+ ,
this, 0
Enum1 5
	enumValue6 ?
)? @
=> 
	enumValue 
. 
GetDisplayName '
(' (
	enumValue( 1
.1 2
ToString2 :
(: ;
); <
)< =
;= >
public 
static 
string 
GetDisplayName +
(+ ,
this, 0
Enum1 5
	enumValue6 ?
,? @
stringA G
defaultValueH T
)T U
{   	
var!! 
	attribute!! 
=!! 
	enumValue!! %
.!!% &$
GetAttributeFromEnumType!!& >
<!!> ? 
DisplayNameAttribute!!? S
>!!S T
(!!T U
)!!U V
;!!V W
return"" 
	attribute"" 
?"" 
."" 
DisplayName"" )
??""* ,
defaultValue""- 9
;""9 :
}## 	
public%% 
static%% 
object%% 
GetAmbientValue%% ,
(%%, -
this%%- 1
Enum%%2 6
	enumValue%%7 @
)%%@ A
=>&& 
	enumValue&& 
.&& 
GetAmbientValue&& (
(&&( )
default&&) 0
)&&0 1
;&&1 2
public(( 
static(( 
object(( 
GetAmbientValue(( ,
(((, -
this((- 1
Enum((2 6
	enumValue((7 @
,((@ A
object((B H
defaultValue((I U
)((U V
{)) 	
var** 
	attribute** 
=** 
	enumValue** %
.**% &$
GetAttributeFromEnumType**& >
<**> ?!
AmbientValueAttribute**? T
>**T U
(**U V
)**V W
;**W X
return++ 
	attribute++ 
?++ 
.++ 
Value++ #
??++$ &
defaultValue++' 3
;++3 4
},, 	
public.. 
static.. 
TType.. 
GetAmbientValue.. +
<..+ ,
TType.., 1
>..1 2
(..2 3
this..3 7
Enum..8 <
	enumValue..= F
)..F G
{// 	
object00 
value00 
=00 
	enumValue00 $
.00$ %
GetAmbientValue00% 4
(004 5
)005 6
;006 7
Ensure11 
.11 
That11 
<11  
InvalidCastException11 ,
>11, -
(11- .
value11. 3
.113 4
Is114 6
<116 7
TType117 <
>11< =
(11= >
)11> ?
,11? @
$"11A C"
The value must be an '11C Y
{11Y Z
typeof11Z `
(11` a
TType11a f
)11f g
.11g h
Name11h l
}11l m
' type11m s
"11s t
)11t u
;11u v
return33 
value33 
.33 
	ConvertTo33 "
<33" #
TType33# (
>33( )
(33) *
)33* +
;33+ ,
}44 	
}55 
}66 
[C:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\Extensions\ExpressionExtensions.cs
	namespace 	
System
 
. 
Linq 
. 
Expressions !
{ 
public 

static 
partial 
class 
ExtensionManager  0
{ 
public 
static 
string 
GetPropertyName ,
<, -
TSource- 4
,4 5
TProp6 ;
>; <
(< =
this= A

ExpressionB L
<L M
FuncM Q
<Q R
TSourceR Y
,Y Z
TProp[ `
>` a
>a b
	predicatec l
)l m
{ 	
Ensure		 
.		 
Argument		 
.		 
NotNull		 #
(		# $
	predicate		$ -
,		- .
nameof		/ 5
(		5 6
	predicate		6 ?
)		? @
)		@ A
;		A B
if 
( 
	predicate 
. 
Body 
is !
MemberExpression" 2
memberExpression3 C
)C D
return 
memberExpression '
.' (
Member( .
.. /
Name/ 3
;3 4
if 
( 
	predicate 
. 
Body 
is !
UnaryExpression" 1
unaryExpression2 A
)A B
return 
( 
unaryExpression '
.' (
Operand( /
as0 2
MemberExpression3 C
)C D
.D E
MemberE K
.K L
NameL P
;P Q
throw 
new 
ArgumentException '
(' (
$"( *%
Expression not supported.* C
"C D
,D E
nameofF L
(L M
	predicateM V
)V W
)W X
;X Y
} 	
} 
} *
WC:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\Extensions\ObjectExtensions.cs
	namespace 	
System
 
{ 
public 

static 
class 
ObjectExtensions (
{ 
public		 
static		 
IDictionary		 !
<		! "
string		" (
,		( )
object		* 0
>		0 1
ToDictionary		2 >
(		> ?
this		? C
object		D J
source		K Q
)		Q R
{

 	
var 

dictionary 
= 
new  

Dictionary! +
<+ ,
string, 2
,2 3
object4 :
>: ;
(; <
)< =
;= >
if 
( 
! 
source 
. 
IsNull 
( 
)  
)  !
{ 
var 

properties 
=  
source! '
.' (
GetType( /
(/ 0
)0 1
.1 2
GetTypeInfo2 =
(= >
)> ?
.? @
DeclaredProperties@ R
;R S
foreach 
( 
var 
property %
in& (

properties) 3
)3 4
{ 
var 
value 
= 
property  (
.( )
GetValue) 1
(1 2
source2 8
)8 9
;9 :

dictionary 
. 
Add "
(" #
property# +
.+ ,
Name, 0
,0 1
value2 7
??8 :
default; B
)B C
;C D
} 
} 
return 

dictionary 
; 
} 	
public 
static 
IDictionary !
<! "
string" (
,( )
TValue* 0
>0 1
ToDictionary2 >
<> ?
TValue? E
>E F
(F G
thisG K
objectL R
sourceS Y
)Y Z
{ 	
var 

dictionary 
= 
new  

Dictionary! +
<+ ,
string, 2
,2 3
TValue4 :
>: ;
(; <
)< =
;= >
if 
( 
! 
source 
. 
IsNull 
( 
)  
)  !
{ 
var   

properties   
=    
source  ! '
.  ' (
GetType  ( /
(  / 0
)  0 1
.  1 2
GetTypeInfo  2 =
(  = >
)  > ?
.  ? @
DeclaredProperties  @ R
;  R S

dictionary"" 
="" 
new""  

Dictionary""! +
<""+ ,
string"", 2
,""2 3
TValue""4 :
>"": ;
(""; <

properties## 
.## 
Select## %
(##% &
p##& '
=>##( *
new##+ .
KeyValuePair##/ ;
<##; <
string##< B
,##B C
TValue##D J
>##J K
(##K L
p$$ 
.$$ 
Name$$ 
,$$ 
p%% 
.%% 
GetValue%% "
(%%" #
source%%# )
)%%) *
.%%* +
	ConvertTo%%+ 4
(%%4 5
default%%5 <
(%%< =
TValue%%= C
)%%C D
)%%D E
)%%E F
)%%F G
)%%G H
;%%H I
}&& 
return'' 

dictionary'' 
;'' 
}(( 	
public** 
static** 
TType** 
	ConvertTo** %
<**% &
TType**& +
>**+ ,
(**, -
this**- 1
object**2 8
value**9 >
)**> ?
=>++ 
(++ 
TType++ 
)++ 
Convert++ 
.++ 

ChangeType++ (
(++( )
value++) .
,++. /
typeof++0 6
(++6 7
TType++7 <
)++< =
)++= >
;++> ?
public-- 
static-- 
TType-- 
	ConvertTo-- %
<--% &
TType--& +
>--+ ,
(--, -
this--- 1
object--2 8
value--9 >
,--> ?
TType--@ E
defaultValue--F R
)--R S
{.. 	
try// 
{00 
return11 
value11 
.11 
	ConvertTo11 &
<11& '
TType11' ,
>11, -
(11- .
)11. /
;11/ 0
}22 
catch33 
{44 
return55 
defaultValue55 #
;55# $
}66 
}77 	
public99 
static99 
bool99 
Is99 
<99 
TType99 #
>99# $
(99$ %
this99% )
object99* 0
obj991 4
)994 5
=>:: 
obj:: 
is:: 
TType:: 
;:: 
public<< 
static<< 
bool<< 
IsNull<< !
(<<! "
this<<" &
object<<' -
obj<<. 1
)<<1 2
=>== 
obj== 
is== 
null== 
;== 
}>> 
}?? Õ2
ZC:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\Extensions\QueryableExtensions.cs
	namespace 	
System
 
. 
Linq 
{ 
public 

static 
class 
QueryableExtensions +
{ 
public 
static 
IOrderedQueryable '
<' (
T( )
>) *
OrderBy+ 2
<2 3
T3 4
>4 5
(5 6
this6 :

IQueryable; E
<E F
TF G
>G H
sourceI O
,O P
stringQ W
propertyNameX d
,d e
boolf j
	ascendingk t
)t u
=> 
OrderingHelper 
( 
source $
,$ %
propertyName& 2
,2 3
!4 5
	ascending5 >
,> ?
false@ E
)E F
;F G
public

 
static

 
IOrderedQueryable

 '
<

' (
T

( )
>

) *
OrderBy

+ 2
<

2 3
T

3 4
>

4 5
(

5 6
this

6 :

IQueryable

; E
<

E F
T

F G
>

G H
source

I O
,

O P
string

Q W
propertyName

X d
)

d e
=> 
OrderingHelper 
( 
source $
,$ %
propertyName& 2
,2 3
false4 9
,9 :
false; @
)@ A
;A B
public 
static 
IOrderedQueryable '
<' (
T( )
>) *
OrderByDescending+ <
<< =
T= >
>> ?
(? @
this@ D

IQueryableE O
<O P
TP Q
>Q R
sourceS Y
,Y Z
string[ a
propertyNameb n
)n o
=> 
OrderingHelper 
( 
source $
,$ %
propertyName& 2
,2 3
true4 8
,8 9
false: ?
)? @
;@ A
public 
static 
IOrderedQueryable '
<' (
T( )
>) *
ThenBy+ 1
<1 2
T2 3
>3 4
(4 5
this5 9
IOrderedQueryable: K
<K L
TL M
>M N
sourceO U
,U V
stringW ]
propertyName^ j
)j k
=> 
OrderingHelper 
( 
source $
,$ %
propertyName& 2
,2 3
false4 9
,9 :
true; ?
)? @
;@ A
public 
static 
IOrderedQueryable '
<' (
T( )
>) *
ThenByDescending+ ;
<; <
T< =
>= >
(> ?
this? C
IOrderedQueryableD U
<U V
TV W
>W X
sourceY _
,_ `
stringa g
propertyNameh t
)t u
=> 
OrderingHelper 
( 
source $
,$ %
propertyName& 2
,2 3
true4 8
,8 9
true: >
)> ?
;? @
private 
static 
IOrderedQueryable (
<( )
T) *
>* +
OrderingHelper, :
<: ;
T; <
>< =
(= >

IQueryable> H
<H I
TI J
>J K
sourceL R
,R S
stringT Z
propertyName[ g
,g h
booli m

descendingn x
,x y
boolz ~
anotherLevel	 
)
 
{ 	
ParameterExpression 
param  %
=& '

Expression( 2
.2 3
	Parameter3 <
(< =
typeof= C
(C D
TD E
)E F
,F G
stringH N
.N O
EmptyO T
)T U
;U V
MemberExpression 
property %
=& '
null( ,
;, -
LambdaExpression 
sort !
=" #
null$ (
;( )
foreach 
( 
var 
prop 
in  
propertyName! -
.- .
Split. 3
(3 4
$char4 7
)7 8
)8 9
{ 
property 
= 

Expression %
.% &
PropertyOrField& 5
(5 6
(6 7

Expression7 A
)A B
propertyB J
??K M
paramN S
,S T
propU Y
)Y Z
;Z [
sort 
= 

Expression !
.! "
Lambda" (
(( )
property) 1
,1 2
param3 8
)8 9
;9 :
}    
MethodCallExpression""  
call""! %
=""& '

Expression""( 2
.""2 3
Call""3 7
(""7 8
typeof""8 >
(""> ?
	Queryable""? H
)""H I
,""I J
(##8 9
!##9 :
anotherLevel##: F
?##G H
$str##I R
:##S T
$str##U ]
)##] ^
+##_ `
(##a b

descending##b l
?##m n
$str##o {
:##| }
string	##~ 
.
## 
Empty
## 
)
## 
,
## 
new$$8 ;
[$$; <
]$$< =
{$$> ?
typeof$$@ F
($$F G
T$$G H
)$$H I
,$$I J
property$$K S
.$$S T
Type$$T X
}$$Y Z
,$$Z [
source%%8 >
.%%> ?

Expression%%? I
,%%I J

Expression&&8 B
.&&B C
Quote&&C H
(&&H I
sort&&I M
)&&M N
)&&N O
;&&O P
return(( 
((( 
IOrderedQueryable(( %
<((% &
T((& '
>((' (
)((( )
source(() /
.((/ 0
Provider((0 8
.((8 9
CreateQuery((9 D
<((D E
T((E F
>((F G
(((G H
call((H L
)((L M
;((M N
})) 	
}** 
}++ 
WC:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\Extensions\StreamExtensions.cs
	namespace 	
System
 
. 
IO 
{ 
public 

static 
class 
StreamExtensions (
{ 
public 
static 
byte 
[ 
] 
ToByteArray (
(( )
this) -
Stream. 4
stream5 ;
); <
{ 	
var 
buffer 
= 
new 
byte !
[! "
(" #
int# &
)& '
stream' -
.- .
Length. 4
]4 5
;5 6
stream 
. 
Read 
( 
buffer 
, 
$num  !
,! "
buffer# )
.) *
Length* 0
)0 1
;1 2
return		 
buffer		 
;		 
}

 	
} 
} Æ
WC:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\Extensions\StringExtensions.cs
	namespace 	
System
 
{ 
public 

static 
class 
StringExtensions (
{ 
public 
static 
string 
PadLeft $
($ %
this% )
string* 0
text1 5
,5 6
int7 :

totalWidth; E
,E F
stringG M
paddingStringN [
)[ \
{ 	
var		 
padding		 
=		 
new		 
StringBuilder		 +
(		+ ,
)		, -
;		- .
for 
( 
int 
i 
= 
$num 
; 
i 
< 

totalWidth  *
;* +
i, -
++- /
)/ 0
{ 
padding 
. 
Append 
( 
paddingString ,
), -
;- .
} 
padding 
. 
Append 
( 
text 
)  
;  !
return 
padding 
. 
ToString #
(# $
)$ %
;% &
} 	
public 
static 
string 
PadRight %
(% &
this& *
string+ 1
text2 6
,6 7
int8 ;

totalWidth< F
,F G
stringH N
paddingStringO \
)\ ]
{ 	
var 
padding 
= 
new 
StringBuilder +
(+ ,
), -
;- .
padding 
. 
Append 
( 
text 
)  
;  !
for 
( 
int 
i 
= 
$num 
; 
i 
< 

totalWidth  *
;* +
i, -
++- /
)/ 0
{ 
padding 
. 
Append 
( 
paddingString ,
), -
;- .
} 
return   
padding   
.   
ToString   #
(  # $
)  $ %
;  % &
}!! 	
public## 
static## 
bool## 
IsNullOrEmpty## (
(##( )
this##) -
string##. 4
value##5 :
)##: ;
=>$$ 
string$$ 
.$$ 
IsNullOrEmpty$$ #
($$# $
value$$$ )
)$$) *
;$$* +
}%% 
}&& ù
FC:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\IPagedList.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Crosscutting #
{ 
public 

	interface 

IPagedList 
<  
T  !
>! "
:# $
IList% *
<* +
T+ ,
>, -
,- .
IList/ 4
,4 5
IReadOnlyList6 C
<C D
TD E
>E F
{ 
int 

TotalCount 
{ 
get 
; 
} 
int		 
	PageCount		 
{		 
get		 
;		 
}		 
}

 
} Ö
GC:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\IPagination.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Crosscutting #
{ 
public 
	interface 
IPagination 
{ 
int 
	PageIndex 
{ 
get 
; 
} 
int 
PageSize 
{ 
get 
; 
} 
string		 
OrderByName			 
{		 
get		 
;		 
}		 
bool 
	Ascending 
{ 
get 
; 
} 
} 
} ×
EC:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\PagedList.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Crosscutting #
{ 
public 

class 
	PagedList 
< 
T 
> 
: 
List  $
<$ %
T% &
>& '
,' (

IPagedList) 3
<3 4
T4 5
>5 6
{ 
public 
	PagedList 
( 
IEnumerable $
<$ %
T% &
>& '
source( .
,. /
int0 3
pageSize4 <
,< =
int> A

totalCountB L
)L M
{		 	
PageSize

 
=

 
pageSize

 
;

  

TotalCount 
= 

totalCount #
;# $
	PageCount 
= 
GetTotalPage $
($ %
PageSize% -
,- .

TotalCount/ 9
)9 :
;: ;
AddRange 
( 
source 
) 
; 
} 	
public 
	PagedList 
( 
) 
: 
this 
( 

Enumerable 
. 
Empty #
<# $
T$ %
>% &
(& '
)' (
,( )
$num* +
,+ ,
$num- .
). /
{ 	
} 	
public 
int 

TotalCount 
{ 
get  #
;# $
private% ,
set- 0
;0 1
}2 3
public 
int 
	PageCount 
{ 
get "
;" #
private$ +
set, /
;/ 0
}1 2
public 
int 
PageSize 
{ 
get !
;! "
private# *
set+ .
;. /
}0 1
private 
static 
int 
GetTotalPage '
(' (
int( +
pageSize, 4
,4 5
int6 9

totalCount: D
)D E
{ 	
if 
( 
pageSize 
== 
$num 
) 
return 
$num 
; 
var   
	remainder   
=   

totalCount   &
%  ' (
pageSize  ) 1
;  1 2
return!! 

totalCount!! 
/!! 
pageSize!!  (
+!!) *
(!!+ ,
	remainder!!, 5
==!!6 8
$num!!9 :
?!!; <
$num!!= >
:!!? @
$num!!A B
)!!B C
;!!C D
}"" 	
}## 
}$$ 
FC:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\Pagination.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Crosscutting #
{ 
public 

class 

Pagination 
: 
IPagination )
{ 
public 
int 
	PageIndex 
{ 
get "
;" #
private$ +
set, /
;/ 0
}1 2
public 
int 
PageSize 
{ 
get !
;! "
private# *
set+ .
;. /
}0 1
public		 
string		 
OrderByName		 !
{		" #
get		$ '
;		' (
private		) 0
set		1 4
;		4 5
}		6 7
public 
bool 
	Ascending 
{ 
get  #
;# $
private% ,
set- 0
;0 1
}2 3
public 

Pagination 
( 
int 
	pageIndex '
,' (
int) ,
pageSize- 5
)5 6
{ 	
	PageIndex 
= 
	pageIndex !
<" #
$num$ %
?& '
$num( )
:* +
	pageIndex, 5
;5 6
PageSize 
= 
pageSize 
<  !
$num" #
?$ %
$num& (
:) *
pageSize+ 3
;3 4
} 	
public 

Pagination 
( 
int 
	pageIndex '
,' (
int) ,
pageSize- 5
,5 6
string7 =
orderByName> I
,I J
boolK O
	ascendingP Y
)Y Z
: 
this 
( 
	pageIndex 
, 
pageSize &
)& '
{ 	
OrderByName 
= 
orderByName %
;% &
	Ascending 
= 
	ascending !
;! "
} 	
} 
} Î
TC:\Projects\anderson.souza\Ritter\src\Infra.Crosscutting\TypeAdapter\ITypeAdapter.cs
	namespace 	
Ritter
 
. 
Infra 
. 
Crosscutting #
.# $
TypeAdapter$ /
{ 
public 

	interface 
ITypeAdapter !
{ 
TTarget 
Adapt 
< 
TSource 
, 
TTarget &
>& '
(' (
TSource( /
source0 6
)6 7
where 
TTarget 
: 
class !
,! "
new# &
(& '
)' (
where 
TSource 
: 
class !
;! "
TTarget		 
Adapt		 
<		 
TTarget		 
>		 
(		 
object		 %
source		& ,
)		, -
where

 
TTarget

 
:

 
class

 !
,

! "
new

# &
(

& '
)

' (
;

( )
} 
} 